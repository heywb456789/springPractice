2025-04-26 15:27:00.907 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 1976 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:27:00.913 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:27:00.914 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:27:00.969 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 15:27:00.970 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 15:27:02.629 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:27:03.035 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 397 ms. Found 14 JPA repository interfaces.
2025-04-26 15:27:04.234 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:27:04.251 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:27:04.251 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:27:04.364 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:27:04.365 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3394 ms
2025-04-26 15:27:04.907 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:27:04.983 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 15:27:05.028 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:27:05.389 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:27:05.429 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:27:05.532 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 15:27:05.538 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 6 msec}
2025-04-26 15:27:05.540 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@3ddf786
2025-04-26 15:27:05.543 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:27:05.562 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:27:05.562 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:27:05.578 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:27:06.017 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:27:06.053 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 36 msec}
2025-04-26 15:27:06.055 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:27:06.055 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:27:06.079 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 24 msec}
2025-04-26 15:27:06.081 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:27:07.201 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:27:07.227 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:27:07.228 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:27:07.228 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:27:07.229 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:27:07.229 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:27:07.230 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:27:07.230 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:27:07.231 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:27:07.258 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:27:07.259 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:27:07.274 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 14 msec}
2025-04-26 15:27:07.274 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:27:07.274 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:27:07.286 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:27:07.287 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:27:07.287 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:27:07.301 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 14 msec}
2025-04-26 15:27:07.305 DEBUG [restartedMain] org.hibernate.SQL - 
    create table t_board_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        board_post_id bigint not null comment '비디오 id',
        reader_id bigint not null,
        primary key (id)
    ) engine=InnoDB
2025-04-26 15:27:07.305 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create table t_board_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        board_post_id bigint not null comment '비디오 id',
        reader_id bigint not null,
        primary key (id)
    ) engine=InnoDB

2025-04-26 15:27:07.316 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create table t_board_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        board_post_id bigint not null comment '비디오 id',
        reader_id bigint not null,
        primary key (id)
    ) engine=InnoDB
 {executed in 10 msec}
2025-04-26 15:27:07.317 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:27:07.318 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:27:07.331 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 13 msec}
2025-04-26 15:27:07.331 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:27:07.332 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:27:07.344 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 15:27:07.345 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       add column author_name varchar(10) comment '작성자 /기자 '
2025-04-26 15:27:07.346 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       add column author_name varchar(10) comment '작성자 /기자 '

2025-04-26 15:27:07.360 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       add column author_name varchar(10) comment '작성자 /기자 '
 {executed in 13 msec}
2025-04-26 15:27:07.360 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:27:07.360 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:27:07.374 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 13 msec}
2025-04-26 15:27:07.375 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:27:07.375 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:27:07.387 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:27:07.388 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:27:07.388 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:27:07.401 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:27:07.408 DEBUG [restartedMain] org.hibernate.SQL - 
    create index idx02_t_board_post_title 
       on t_board_post (title)
2025-04-26 15:27:07.408 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx02_t_board_post_title 
       on t_board_post (title)

2025-04-26 15:27:07.426 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx02_t_board_post_title 
       on t_board_post (title)
 {executed in 17 msec}
2025-04-26 15:27:07.426 DEBUG [restartedMain] org.hibernate.SQL - 
    create index idx02_t_board_post_content 
       on t_board_post (content)
2025-04-26 15:27:07.426 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx02_t_board_post_content 
       on t_board_post (content)

2025-04-26 15:27:07.446 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx02_t_board_post_content 
       on t_board_post (content)
 {executed in 20 msec}
2025-04-26 15:27:07.452 DEBUG [restartedMain] org.hibernate.SQL - 
    create index idx01_t_board_post_view_history_created_at 
       on t_board_post_view_history (created_at)
2025-04-26 15:27:07.452 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx01_t_board_post_view_history_created_at 
       on t_board_post_view_history (created_at)

2025-04-26 15:27:07.469 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. create index idx01_t_board_post_view_history_created_at 
       on t_board_post_view_history (created_at)
 {executed in 17 msec}
2025-04-26 15:27:07.486 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.486 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.488 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.491 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.492 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:27:07.492 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.497 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:27:07.497 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.498 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:27:07.499 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.499 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.500 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.501 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.502 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:27:07.502 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.504 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:27:07.504 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.504 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:27:07.506 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:27:07.506 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.507 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:27:07.507 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.508 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.508 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.508 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post_view_history 
       add constraint FK175y5a1erhjd9tygemoipgssj 
       foreign key (board_post_id) 
       references t_board_post (id)
2025-04-26 15:27:07.508 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post_view_history 
       add constraint FK175y5a1erhjd9tygemoipgssj 
       foreign key (board_post_id) 
       references t_board_post (id)

2025-04-26 15:27:07.536 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post_view_history 
       add constraint FK175y5a1erhjd9tygemoipgssj 
       foreign key (board_post_id) 
       references t_board_post (id)
 {executed in 27 msec}
2025-04-26 15:27:07.537 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post_view_history 
       add constraint FK7h3lhlw6gibe8srthe51whgvq 
       foreign key (reader_id) 
       references t_member (id)
2025-04-26 15:27:07.537 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post_view_history 
       add constraint FK7h3lhlw6gibe8srthe51whgvq 
       foreign key (reader_id) 
       references t_member (id)

2025-04-26 15:27:07.566 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post_view_history 
       add constraint FK7h3lhlw6gibe8srthe51whgvq 
       foreign key (reader_id) 
       references t_member (id)
 {executed in 28 msec}
2025-04-26 15:27:07.568 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.569 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.569 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.571 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.571 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.571 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.574 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.574 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.574 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.575 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:27:07.576 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.576 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:27:07.578 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.578 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.579 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.580 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:27:07.580 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.580 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:27:07.582 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.583 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.583 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.585 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:27:07.585 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.586 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:27:07.588 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:27:07.588 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.589 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:27:07.590 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.591 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.591 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.593 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:27:07.593 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.593 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:27:07.594 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:27:07.594 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.595 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:27:07.595 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:27:07.596 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:27:07.596 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:27:07.598 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:27:08.093 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:27:09.249 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:27:09.249 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:27:09.840 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:27:10.554 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@379fc0fd. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:27:10.555 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:27:10.904 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:27:10.978 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:27:10.987 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.857 seconds (process running for 11.553)
2025-04-26 15:28:03.832 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 15:28:03.832 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 15:28:03.834 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-04-26 15:28:04.086 ERROR [http-nio-8080-exec-7] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 15:28:16.369 DEBUG [http-nio-8080-exec-3] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] POST https://api.otongtong.net/v1/api/external/PASSTONG/plain/login
2025-04-26 15:28:16.370 DEBUG [http-nio-8080-exec-3] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] Content-Type=application/x-www-form-urlencoded
2025-04-26 15:28:17.210 DEBUG [reactor-http-nio-2] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Response][Body] {"result":true,"code":0,"message":"","value":{"userKey":"1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975","name":"김민재","deviceType":"ANDROID","userStatus":"login","appType":"AlrimTong","lastLoginDate":0,"lastLogoffDate":0,"online":0,"longOffline":0,"logoutUC":0,"decPhoneNum":"01089754896","nationType":"KR","profileImg":"","profileImgThume":"","transferExist":false,"passiveblockstatus":0,"interPhoneNum":"+82 10-8975-4896","blockstatus":0,"qrpath":"http://api.otongtong.net:28080/file/profile/1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975/qr/1706749795099.png","statusMsg":"","userUniqueNo":"T294777341","address":"","phoneOpenYn":"N","addrOpenYn":"N","walletOpenYn":"N","voipNum":"","passwd":"0BWS+8bw5IzL3gLlI+nv6+xEk0rzvkGWgseo3AQgHaY=","registerID":868928,"compCode":"ETOMATO","registerDate":"2024-02-01 10:08:57","wallet_addr":"","coin_info":{},"supporter_airdrop_amount":0.0,"tongtonguser":true,"created_at":0,"nameOpenYn":"Y","statusMsgOpenYn":"Y"}}
2025-04-26 15:28:17.378 DEBUG [reactor-http-nio-2] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.user_key=?
2025-04-26 15:28:17.379 DEBUG [reactor-http-nio-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:17.379 DEBUG [reactor-http-nio-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:17.381 DEBUG [reactor-http-nio-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.user_key='1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975'

2025-04-26 15:28:17.382 DEBUG [reactor-http-nio-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.user_key='1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975'
 {executed in 1 msec}
2025-04-26 15:28:17.393 INFO  [reactor-http-nio-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:17.457 DEBUG [reactor-http-nio-2] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.auth.entity.RefreshToken */insert 
    into
        t_refresh_token (created_at, created_by, device_type, expiry_date, ip_address, last_used_at, member_id, refresh_token, updated_at, updated_by, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 15:28:17.461 DEBUG [reactor-http-nio-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. /* insert for com.tomato.naraclub.application.auth.entity.RefreshToken */insert into t_refresh_token (created_at,created_by,device_type,expiry_date,ip_address,last_used_at,member_id,refresh_token,updated_at,updated_by,user_agent) values (NULL,NULL,NULL,'05/10/2025 15:28:17.000','0:0:0:0:0:0:0:1','04/26/2025 15:28:17.427',1,'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjQ4ODk3LCJleHAiOjE3NDY4NTg0OTd9.gk30sR_lTPnOf-EnyppzqaNr3lB6XZximdtngMCKg40',NULL,NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36') returning id

2025-04-26 15:28:17.462 DEBUG [reactor-http-nio-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. /* insert for com.tomato.naraclub.application.auth.entity.RefreshToken */insert into t_refresh_token (created_at,created_by,device_type,expiry_date,ip_address,last_used_at,member_id,refresh_token,updated_at,updated_by,user_agent) values (NULL,NULL,NULL,'05/10/2025 15:28:17.000','0:0:0:0:0:0:0:1','04/26/2025 15:28:17.427',1,'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjQ4ODk3LCJleHAiOjE3NDY4NTg0OTd9.gk30sR_lTPnOf-EnyppzqaNr3lB6XZximdtngMCKg40',NULL,NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36') returning id
 {executed in 1 msec}
2025-04-26 15:28:17.472 INFO  [reactor-http-nio-2] jdbc.resultsettable - 
|---|
|id |
|---|
|5  |
|---|

2025-04-26 15:28:17.653 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:17.654 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:17.655 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:28:17.656 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:18.089 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:18.089 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1

2025-04-26 15:28:18.090 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1
 {executed in 0 msec}
2025-04-26 15:28:18.090 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:28:18.118 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video */ select
            count(v1_0.id) 
        from
            t_video v1_0
2025-04-26 15:28:18.119 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0

2025-04-26 15:28:18.120 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0
 {executed in 0 msec}
2025-04-26 15:28:18.120 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:28:18.148 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:18.149 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:18.150 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:28:18.151 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:18.266 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:18.267 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 4,?

2025-04-26 15:28:18.271 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 4,?
 {executed in 2 msec}
2025-04-26 15:28:18.272 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |1     |0           |true                                  |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |3     |0           |true                                  |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:28:18.274 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:28:18.275 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:28:18.276 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:28:18.276 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:28:18.292 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:18.293 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:18.293 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:28:18.295 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:18.304 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:18.304 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4

2025-04-26 15:28:18.305 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4
 {executed in 1 msec}
2025-04-26 15:28:18.305 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|---|

2025-04-26 15:28:18.359 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        votePost.isNew as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?1 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            vp1_0.is_new,
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 15:28:18.360 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc

2025-04-26 15:28:18.361 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 15:28:18.363 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |is_new |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|

2025-04-26 15:28:18.370 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 15:28:18.371 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 15:28:18.371 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 15:28:18.372 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 15:28:26.049 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:26.049 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:26.050 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:26.051 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:26.051 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:28:26.052 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:26.058 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:26.059 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?

2025-04-26 15:28:26.060 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?
 {executed in 0 msec}
2025-04-26 15:28:26.061 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |1     |0           |true                                  |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |3     |0           |true                                  |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true                                  |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true                                  |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:28:26.062 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:28:26.062 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:28:26.063 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:28:26.063 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:28:27.440 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:27.440 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:27.441 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:27.441 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:27.442 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:28:27.443 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:27.445 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:27.446 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:27.447 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:28:27.448 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:27.452 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 15:28:27.453 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 15:28:27.453 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 15:28:27.454 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:27.481 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        boardComments.id as commentId,
        boardComments.author.id as authorId,
        boardComments.author.name as authorName,
        (boardComments.author.id = ?1) as isMine,
        boardComments.content,
        boardComments.createdAt,
        boardComments.updatedAt 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?2 
    order by
        boardComments.createdAt desc */ select
            bc1_0.id,
            bc1_0.author_id,
            a1_0.name,
            (bc1_0.author_id=cast(? as signed)),
            bc1_0.content,
            bc1_0.created_at,
            bc1_0.updated_at 
        from
            t_board_comments bc1_0 
        join
            t_member a1_0 
                on a1_0.id=bc1_0.author_id 
        where
            bc1_0.board_post_id=? 
        order by
            bc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:27.482 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 72
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?

2025-04-26 15:28:27.483 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 72
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 15:28:27.484 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|id |author_id |name |(bc1_0.author_id=cast(1 as signed)) |content |created_at |updated_at |
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|---|----------|-----|------------------------------------|--------|-----------|-----------|

2025-04-26 15:28:27.486 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        count(boardComments) 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?1 */ select
            count(bc1_0.id) 
        from
            t_board_comments bc1_0 
        where
            bc1_0.board_post_id=?
2025-04-26 15:28:27.486 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 71 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?

2025-04-26 15:28:27.487 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 71 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?
 {executed in 0 msec}
2025-04-26 15:28:27.487 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|----------------|
|count(bc1_0.id) |
|----------------|
|0               |
|----------------|

2025-04-26 15:28:27.488 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        i1_0.board_post_id,
        i1_0.id,
        i1_0.created_at,
        i1_0.created_by,
        i1_0.image_url,
        i1_0.updated_at,
        i1_0.updated_by,
        bp1_0.is_hot,
        bp1_0.is_new,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    left join
        t_board_post_image i1_0 
            on bp1_0.id=i1_0.board_post_id 
    where
        bp1_0.id=?
2025-04-26 15:28:27.488 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.is_new,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=7

2025-04-26 15:28:27.489 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.is_new,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=7
 {executed in 0 msec}
2025-04-26 15:28:27.504 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|--------------|---|---------------------------|-----------|-----------------------------------------------------------|---------------------------|-----------|-------|-------|------|------------|--------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |board_post_id |id |created_at                 |created_by |image_url                                                  |updated_at                 |updated_by |is_hot |is_new |likes |share_count |title   |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|--------------|---|---------------------------|-----------|-----------------------------------------------------------|---------------------------|-----------|-------|-------|------|------------|--------|---------------------------|-----------|------|
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |7             |6  |2025-04-23 22:59:44.313241 |null       |/uploads/images/7/0c4dd8f0-4aa2-4de9-a353-b1a92a7f291f.png |2025-04-23 22:59:44.313241 |null       |false  |true   |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ |2025-04-23 22:59:44.264704 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|--------------|---|---------------------------|-----------|-----------------------------------------------------------|---------------------------|-----------|-------|-------|------|------------|--------|---------------------------|-----------|------|

2025-04-26 15:28:27.506 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert 
    into
        t_board_post_view_history (board_post_id, created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 15:28:27.508 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (7,'04/26/2025 15:28:27.505',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 15:28:27.505',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 15:28:27.505') returning id

2025-04-26 15:28:27.508 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (7,'04/26/2025 15:28:27.505',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 15:28:27.505',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 15:28:27.505') returning id
 {executed in 0 msec}
2025-04-26 15:28:27.509 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|
|id |
|---|
|1  |
|---|

2025-04-26 15:28:27.523 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bpl1_0.id,
        bpl1_0.board_post_id,
        bpl1_0.created_at,
        bpl1_0.created_by,
        bpl1_0.member_id,
        bpl1_0.updated_at,
        bpl1_0.updated_by 
    from
        t_board_post_like bpl1_0 
    where
        bpl1_0.member_id=? 
        and bpl1_0.board_post_id=?
2025-04-26 15:28:27.523 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=7

2025-04-26 15:28:27.524 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=7
 {executed in 1 msec}
2025-04-26 15:28:27.524 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------|-----------|-----------|----------|-----------|-----------|
|id |board_post_id |created_at |created_by |member_id |updated_at |updated_by |
|---|--------------|-----------|-----------|----------|-----------|-----------|
|---|--------------|-----------|-----------|----------|-----------|-----------|

2025-04-26 15:28:27.529 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post 
    set
        author_id=?,
        comment_count=?,
        content=?,
        is_hot=?,
        is_new=?,
        likes=?,
        share_count=?,
        title=?,
        updated_at=?,
        updated_by=?,
        views=? 
    where
        id=?
2025-04-26 15:28:27.530 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='ㅋㅋㅇㅁㄴㅇ',is_hot=0,is_new=1,likes=0,share_count=0,title='ㅋㅁㄴㅇㅁㄴㅇ',updated_at='04/23/2025 22:59:44.264',updated_by=NULL,views=2 where id=7

2025-04-26 15:28:27.531 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='ㅋㅋㅇㅁㄴㅇ',is_hot=0,is_new=1,likes=0,share_count=0,title='ㅋㅁㄴㅇㅁㄴㅇ',updated_at='04/23/2025 22:59:44.264',updated_by=NULL,views=2 where id=7
 {executed in 1 msec}
2025-04-26 15:28:27.553 ERROR [http-nio-8080-exec-10] c.t.n.c.e.GlobalExceptionAdvice - [Exception: NoResourceFoundException]
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource images/7/0c4dd8f0-4aa2-4de9-a353-b1a92a7f291f.png.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapUnsecured$1(ObservationFilterChainDecorator.java:90)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:219)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 15:28:27.556 WARN  [http-nio-8080-exec-10] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource images/7/0c4dd8f0-4aa2-4de9-a353-b1a92a7f291f.png.]
2025-04-26 15:28:52.175 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:52.175 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:52.176 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:52.176 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:52.177 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:28:52.178 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:52.188 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:52.189 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?

2025-04-26 15:28:52.189 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?
 {executed in 0 msec}
2025-04-26 15:28:52.190 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |3     |0           |true                                  |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true                                  |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true                                  |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:28:52.191 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:28:52.192 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:28:52.192 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:28:52.192 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:28:54.559 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:54.559 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 15:28:54.559 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:54.559 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:54.560 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:54.560 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:54.561 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:54.561 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:54.561 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:28:54.562 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:28:54.562 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:54.562 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:54.564 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        boardComments.id as commentId,
        boardComments.author.id as authorId,
        boardComments.author.name as authorName,
        (boardComments.author.id = ?1) as isMine,
        boardComments.content,
        boardComments.createdAt,
        boardComments.updatedAt 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?2 
    order by
        boardComments.createdAt desc */ select
            bc1_0.id,
            bc1_0.author_id,
            a1_0.name,
            (bc1_0.author_id=cast(? as signed)),
            bc1_0.content,
            bc1_0.created_at,
            bc1_0.updated_at 
        from
            t_board_comments bc1_0 
        join
            t_member a1_0 
                on a1_0.id=bc1_0.author_id 
        where
            bc1_0.board_post_id=? 
        order by
            bc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:54.565 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 15:28:54.565 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 52
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?

2025-04-26 15:28:54.565 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 15:28:54.566 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 52
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 15:28:54.566 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 15:28:54.567 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:54.567 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|-------------------------|---------------------------|---------------------------|
|id |author_id |name |(bc1_0.author_id=cast(1 as signed)) |content                  |created_at                 |updated_at                 |
|---|----------|-----|------------------------------------|-------------------------|---------------------------|---------------------------|
|8  |1         |김민재  |true                                |zzzzzzzzzzzzzzz          |2025-04-23 21:44:43.619091 |2025-04-23 21:44:43.619091 |
|7  |1         |김민재  |true                                |zzzzzzzzzzzzzzzz         |2025-04-23 21:44:40.799503 |2025-04-23 21:44:40.799503 |
|6  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzzzzzzzz |2025-04-23 21:44:34.523202 |2025-04-23 21:44:34.523202 |
|5  |1         |김민재  |true                                |zzzzzzzzzzz              |2025-04-23 21:44:31.614794 |2025-04-23 21:44:31.614794 |
|4  |1         |김민재  |true                                |zzzzzzzzzzzz             |2025-04-23 21:42:14.278515 |2025-04-23 21:42:14.278515 |
|3  |1         |김민재  |true                                |zzzzzzzzzzzz             |2025-04-23 21:42:03.795758 |2025-04-23 21:42:03.795758 |
|2  |1         |김민재  |true                                |zzzzzzz                  |2025-04-23 21:42:02.04826  |2025-04-23 21:42:02.04826  |
|---|----------|-----|------------------------------------|-------------------------|---------------------------|---------------------------|

2025-04-26 15:28:54.568 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        count(boardComments) 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?1 */ select
            count(bc1_0.id) 
        from
            t_board_comments bc1_0 
        where
            bc1_0.board_post_id=?
2025-04-26 15:28:54.568 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 51 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?

2025-04-26 15:28:54.569 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 51 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?
 {executed in 1 msec}
2025-04-26 15:28:54.570 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|----------------|
|count(bc1_0.id) |
|----------------|
|7               |
|----------------|

2025-04-26 15:28:54.570 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        i1_0.board_post_id,
        i1_0.id,
        i1_0.created_at,
        i1_0.created_by,
        i1_0.image_url,
        i1_0.updated_at,
        i1_0.updated_by,
        bp1_0.is_hot,
        bp1_0.is_new,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    left join
        t_board_post_image i1_0 
            on bp1_0.id=i1_0.board_post_id 
    where
        bp1_0.id=?
2025-04-26 15:28:54.570 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.is_new,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=5

2025-04-26 15:28:54.571 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.is_new,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=5
 {executed in 1 msec}
2025-04-26 15:28:54.572 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|--------------|--------|--------------------------|-----------|--------------|-------|-----------|-----------|----------|-----------|-----------|-------|-------|------|------------|----------|--------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                |created_by |board_post_id |id     |created_at |created_by |image_url |updated_at |updated_by |is_hot |is_new |likes |share_count |title     |updated_at                |updated_by |views |
|---|----------|--------------|--------|--------------------------|-----------|--------------|-------|-----------|-----------|----------|-----------|-----------|-------|-------|------|------------|----------|--------------------------|-----------|------|
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486 |null       |[null]        |[null] |[null]     |[null]     |[null]    |[null]     |[null]     |false  |true   |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486 |null       |3     |
|---|----------|--------------|--------|--------------------------|-----------|--------------|-------|-----------|-----------|----------|-----------|-----------|-------|-------|------|------------|----------|--------------------------|-----------|------|

2025-04-26 15:28:54.573 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert 
    into
        t_board_post_view_history (board_post_id, created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 15:28:54.574 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (5,'04/26/2025 15:28:54.573',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 15:28:54.573',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 15:28:54.573') returning id

2025-04-26 15:28:54.576 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (5,'04/26/2025 15:28:54.573',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 15:28:54.573',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 15:28:54.573') returning id
 {executed in 1 msec}
2025-04-26 15:28:54.576 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|
|id |
|---|
|2  |
|---|

2025-04-26 15:28:54.578 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* <criteria> */ select
        bpl1_0.id,
        bpl1_0.board_post_id,
        bpl1_0.created_at,
        bpl1_0.created_by,
        bpl1_0.member_id,
        bpl1_0.updated_at,
        bpl1_0.updated_by 
    from
        t_board_post_like bpl1_0 
    where
        bpl1_0.member_id=? 
        and bpl1_0.board_post_id=?
2025-04-26 15:28:54.578 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=5

2025-04-26 15:28:54.579 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=5
 {executed in 0 msec}
2025-04-26 15:28:54.579 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------|-----------|-----------|----------|-----------|-----------|
|id |board_post_id |created_at |created_by |member_id |updated_at |updated_by |
|---|--------------|-----------|-----------|----------|-----------|-----------|
|---|--------------|-----------|-----------|----------|-----------|-----------|

2025-04-26 15:28:54.580 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post 
    set
        author_id=?,
        comment_count=?,
        content=?,
        is_hot=?,
        is_new=?,
        likes=?,
        share_count=?,
        title=?,
        updated_at=?,
        updated_by=?,
        views=? 
    where
        id=?
2025-04-26 15:28:54.580 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=7,content='ㅋㅋㅋㅋㅋ',is_hot=0,is_new=1,likes=0,share_count=0,title='ㅁㄴㅇㅁㄴㅇㅁㄴㅇ',updated_at='04/23/2025 20:32:44.224',updated_by=NULL,views=4 where id=5

2025-04-26 15:28:54.581 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=7,content='ㅋㅋㅋㅋㅋ',is_hot=0,is_new=1,likes=0,share_count=0,title='ㅁㄴㅇㅁㄴㅇㅁㄴㅇ',updated_at='04/23/2025 20:32:44.224',updated_by=NULL,views=4 where id=5
 {executed in 1 msec}
2025-04-26 15:28:56.745 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:28:56.745 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:28:56.746 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:28:56.746 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:28:56.747 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:28:56.747 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:28:56.751 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:28:56.752 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?

2025-04-26 15:28:56.753 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?
 {executed in 0 msec}
2025-04-26 15:28:56.753 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true                                  |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true                                  |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:28:56.754 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:28:56.755 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:28:56.755 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:28:56.755 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:29:02.366 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 15:29:02.367 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 15:29:02.368 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:29:02.368 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:29:02.368 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 15:29:02.369 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:29:02.372 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:29:02.373 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?

2025-04-26 15:29:02.373 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?
 {executed in 0 msec}
2025-04-26 15:29:02.374 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true                                  |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true                                  |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:29:02.374 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:29:02.375 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:29:02.375 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:29:02.375 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:29:02.945 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:29:02.945 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:29:02.946 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 15:29:02.946 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 15:29:02.947 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 15:29:02.948 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 15:29:02.950 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.isNew 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?1 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.is_new 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:29:02.950 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?

2025-04-26 15:29:02.951 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.isNew and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 11 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.is_new and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=0 and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit 10,?
 {executed in 1 msec}
2025-04-26 15:29:02.951 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.is_new and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true                                  |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true                                  |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true                                  |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true                                  |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|--------------------------------------|-------|---------------------------|

2025-04-26 15:29:02.952 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:29:02.952 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:29:02.952 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:29:02.953 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:29:13.359 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:29:13.360 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:29:13.365 ERROR [http-nio-8080-exec-2] c.t.n.c.e.GlobalExceptionAdvice - [Exception: InvalidDataAccessApiUsageException]
org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy187.getBoardPostList(Unknown Source)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl.listPosts(BoardPostServiceImpl.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl$$SpringCGLIB$$0.listPosts(<generated>)
	at com.tomato.naraclub.application.board.controller.BoardPostController.list(BoardPostController.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: eq(null) is not allowed. Use isNull() instead
	at com.querydsl.core.types.dsl.SimpleExpression.eq(SimpleExpression.java:128)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl.getBoardPostList(BoardPostCustomRepositoryImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:721)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl$$SpringCGLIB$$0.getBoardPostList(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:173)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:148)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 153 common frames omitted
2025-04-26 15:29:13.370 WARN  [http-nio-8080-exec-2] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead]
2025-04-26 15:29:15.096 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 15:29:15.097 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 15:29:15.098 ERROR [http-nio-8080-exec-1] c.t.n.c.e.GlobalExceptionAdvice - [Exception: InvalidDataAccessApiUsageException]
org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy187.getBoardPostList(Unknown Source)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl.listPosts(BoardPostServiceImpl.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl$$SpringCGLIB$$0.listPosts(<generated>)
	at com.tomato.naraclub.application.board.controller.BoardPostController.list(BoardPostController.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: eq(null) is not allowed. Use isNull() instead
	at com.querydsl.core.types.dsl.SimpleExpression.eq(SimpleExpression.java:128)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl.getBoardPostList(BoardPostCustomRepositoryImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:721)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl$$SpringCGLIB$$0.getBoardPostList(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:173)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:148)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 153 common frames omitted
2025-04-26 15:29:15.101 WARN  [http-nio-8080-exec-1] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead]
2025-04-26 15:29:15.984 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 15:29:15.984 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 15:29:15.985 ERROR [http-nio-8080-exec-4] c.t.n.c.e.GlobalExceptionAdvice - [Exception: InvalidDataAccessApiUsageException]
org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy187.getBoardPostList(Unknown Source)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl.listPosts(BoardPostServiceImpl.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl$$SpringCGLIB$$0.listPosts(<generated>)
	at com.tomato.naraclub.application.board.controller.BoardPostController.list(BoardPostController.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: eq(null) is not allowed. Use isNull() instead
	at com.querydsl.core.types.dsl.SimpleExpression.eq(SimpleExpression.java:128)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl.getBoardPostList(BoardPostCustomRepositoryImpl.java:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:721)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl$$SpringCGLIB$$0.getBoardPostList(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:173)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:148)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 153 common frames omitted
2025-04-26 15:29:15.990 WARN  [http-nio-8080-exec-4] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: eq(null) is not allowed. Use isNull() instead]
2025-04-26 15:33:45.291 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 18268 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:33:45.292 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:33:45.293 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:33:45.341 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 15:33:45.341 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 15:33:46.938 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:33:47.335 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 388 ms. Found 14 JPA repository interfaces.
2025-04-26 15:33:48.461 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:33:48.479 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:33:48.480 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:33:48.611 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:33:48.612 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3269 ms
2025-04-26 15:33:49.131 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:33:49.221 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 15:33:49.265 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:33:49.638 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:33:49.677 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:33:49.775 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 15:33:49.777 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 2 msec}
2025-04-26 15:33:49.779 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@6d60a4dc
2025-04-26 15:33:49.781 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:33:49.797 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:33:49.797 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:33:49.812 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:33:50.232 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:33:50.233 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:33:50.234 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:33:50.235 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:33:50.235 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:33:50.238 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:33:51.369 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:33:51.399 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:33:51.400 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:33:51.400 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:33:51.401 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:33:51.401 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:33:51.402 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:33:51.402 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:33:51.404 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:33:51.432 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:33:51.432 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:33:51.444 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:33:51.445 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:33:51.445 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:33:51.457 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:33:51.458 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:33:51.458 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:33:51.469 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 15:33:51.470 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:33:51.470 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:33:51.482 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 15:33:51.482 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:33:51.483 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:33:51.496 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 15:33:51.497 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:33:51.497 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:33:51.508 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 15:33:51.509 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:33:51.509 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:33:51.522 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:33:51.522 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:33:51.522 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:33:51.535 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 15:33:51.554 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.555 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:33:51.557 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.560 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.561 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.562 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.564 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:33:51.564 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.565 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:33:51.565 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.567 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 2 msec}
2025-04-26 15:33:51.567 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.569 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.569 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.569 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.571 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:33:51.571 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.571 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:33:51.573 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:33:51.573 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.574 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:33:51.574 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.575 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:33:51.575 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.577 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:33:51.577 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.577 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:33:51.578 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.579 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:33:51.579 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.581 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.581 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.582 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.583 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.584 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.584 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.585 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.585 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.587 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.588 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:33:51.588 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.589 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:33:51.590 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.590 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.591 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.592 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:33:51.592 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.593 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:33:51.594 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.595 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:33:51.595 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.596 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:33:51.597 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.597 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:33:51.598 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:33:51.598 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.598 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:33:51.600 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.600 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.601 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.602 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:33:51.602 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.603 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:33:51.604 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:33:51.604 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.604 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:33:51.605 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:33:51.605 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:33:51.606 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:33:51.607 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:33:52.036 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:33:53.211 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:33:53.211 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:33:53.902 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:33:54.594 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@387aadb1. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:33:54.594 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:33:54.933 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:33:55.011 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:33:55.021 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.441 seconds (process running for 11.11)
2025-04-26 15:33:57.865 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 15:33:57.865 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 15:33:57.865 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-26 15:33:58.075 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:33:58.076 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:33:58.514 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:33:58.518 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:33:58.518 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 15:33:58.521 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:33:58.559 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:33:58.559 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:33:58.560 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:33:58.561 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:00.421 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:00.422 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:34:00.424 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:00.425 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:00.425 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 15:34:00.428 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:00.429 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:00.430 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:00.430 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:34:00.431 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:01.029 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:01.030 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:34:01.031 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:01.031 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:01.032 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 15:34:01.033 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:01.035 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:01.035 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:01.036 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:34:01.036 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:03.394 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:03.394 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:34:03.396 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:03.396 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:03.397 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 15:34:03.398 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:03.399 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:03.400 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:03.401 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:34:03.401 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:05.255 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:05.256 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:34:05.258 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:05.258 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:05.259 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 15:34:05.260 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:05.261 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:05.261 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:05.262 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:34:05.262 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:06.840 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:06.841 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:34:06.843 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:06.843 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:06.844 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 15:34:06.845 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:06.845 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:06.845 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:06.847 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 2 msec}
2025-04-26 15:34:06.847 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:34:07.711 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:34:07.712 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:34:07.713 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        boardPost.isNew as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            bp1_0.is_new,
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:34:07.714 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10

2025-04-26 15:34:07.714 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, boardPost.isNew as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,bp1_0.is_new,bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 15:34:07.716 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |is_new |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |true   |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |true   |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |true   |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |true   |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |true   |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |true   |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------|-------|---------------------------|

2025-04-26 15:34:07.716 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:34:07.717 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:34:07.717 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 15:34:07.717 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:37:21.435 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 15932 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:37:21.437 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:37:21.438 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:37:21.487 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 15:37:21.487 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 15:37:23.098 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:37:23.497 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 391 ms. Found 14 JPA repository interfaces.
2025-04-26 15:37:24.661 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:37:24.677 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:37:24.678 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:37:24.792 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:37:24.793 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3304 ms
2025-04-26 15:37:25.300 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:37:25.392 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 15:37:25.445 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:37:25.815 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:37:25.856 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:37:25.953 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 15:37:25.956 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 15:37:25.957 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@6d60a4dc
2025-04-26 15:37:25.959 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:37:25.976 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:37:25.976 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:37:25.990 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:37:26.402 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:37:26.403 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:37:26.405 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:37:26.406 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:37:26.406 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:37:26.409 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:37:27.492 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:37:27.520 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:37:27.521 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:37:27.522 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:37:27.523 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:37:27.523 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:37:27.523 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:37:27.525 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:37:27.526 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:37:27.552 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:37:27.553 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:37:27.565 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:37:27.566 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:37:27.566 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:37:27.581 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 15 msec}
2025-04-26 15:37:27.582 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:37:27.582 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:37:27.594 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 15:37:27.594 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:37:27.595 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:37:27.606 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 15:37:27.606 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:37:27.607 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:37:27.621 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 14 msec}
2025-04-26 15:37:27.622 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:37:27.622 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:37:27.634 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:37:27.634 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:37:27.634 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:37:27.646 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:37:27.646 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:37:27.646 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:37:27.658 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:37:27.683 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.683 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.686 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.689 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.689 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.690 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.692 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:37:27.692 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.693 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:37:27.694 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.694 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.694 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.696 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.696 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.697 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.698 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:37:27.698 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.699 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:37:27.700 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:37:27.700 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.701 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:37:27.701 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.702 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.702 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.703 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:37:27.704 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 15:37:27.704 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:37:27.705 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.705 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.705 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.707 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.708 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.708 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.710 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.710 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.711 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.712 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.713 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.713 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.713 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:37:27.715 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.715 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:37:27.717 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.717 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.717 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.718 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:37:27.718 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.719 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:37:27.722 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.723 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.723 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.724 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:37:27.724 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.724 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:37:27.725 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:37:27.726 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.726 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:37:27.727 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.728 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:37:27.728 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.729 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:37:27.730 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.730 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:37:27.731 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:37:27.731 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.731 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:37:27.732 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:37:27.733 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:37:27.733 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:37:27.735 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:37:28.183 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:37:29.341 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:37:29.341 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:37:30.035 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:37:30.724 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@7d16b5f. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:37:30.725 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:37:31.064 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:37:31.138 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:37:31.146 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.42 seconds (process running for 11.093)
2025-04-26 15:37:33.576 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 15:37:33.576 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 15:37:33.577 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 15:37:34.236 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    where
        video.type = ?1 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:37:34.237 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:37:34.237 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:37:34.240 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_VIDEO'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?

2025-04-26 15:37:34.241 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_VIDEO'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?
 {executed in 1 msec}
2025-04-26 15:37:34.241 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:37:34.267 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 15:37:34.268 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 15:37:34.269 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 0 msec}
2025-04-26 15:37:34.270 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:37:41.741 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    where
        video.type = ?1 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:37:41.741 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:37:41.743 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 2 msec}
2025-04-26 15:37:41.743 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_SHORTS'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?

2025-04-26 15:37:41.744 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_SHORTS'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?
 {executed in 1 msec}
2025-04-26 15:37:41.745 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:37:41.745 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 15:37:41.745 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_SHORTS'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 15:37:41.746 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_SHORTS'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 1 msec}
2025-04-26 15:37:41.746 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:37:42.151 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    where
        video.type = ?1 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:37:42.152 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'NEWS_ARTICLE'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?

2025-04-26 15:37:42.153 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'NEWS_ARTICLE'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?
 {executed in 0 msec}
2025-04-26 15:37:42.153 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:37:42.154 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 15:37:42.154 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'NEWS_ARTICLE'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 15:37:42.155 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'NEWS_ARTICLE'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 1 msec}
2025-04-26 15:37:42.155 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:37:42.855 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    where
        video.type = ?1 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:37:42.855 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:37:42.856 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:37:42.856 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_VIDEO'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?

2025-04-26 15:37:42.857 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
where video.type = 'YOUTUBE_VIDEO'1
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 where v1_0.type=0 order by v1_0.created_at desc limit 4,?
 {executed in 0 msec}
2025-04-26 15:37:42.858 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:37:42.858 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 15:37:42.858 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 15:37:42.859 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 1 msec}
2025-04-26 15:37:42.859 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:51:55.627 INFO  [File Watcher] o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 303 class path changes (0 additions, 303 deletions, 0 modifications)
2025-04-26 15:51:55.671 INFO  [Thread-5] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:51:55.673 INFO  [Thread-5] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 15:51:55.676 INFO  [Thread-5] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 15:52:08.961 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 15932 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:52:08.961 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:52:08.961 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:52:09.756 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:52:10.035 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 278 ms. Found 14 JPA repository interfaces.
2025-04-26 15:52:10.281 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:52:10.282 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:52:10.283 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:52:10.394 INFO  [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:52:10.394 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1429 ms
2025-04-26 15:52:10.668 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:52:10.678 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:52:10.703 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:52:10.705 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:52:10.710 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
2. SELECT 1

2025-04-26 15:52:10.710 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 15:52:10.711 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@617ca714
2025-04-26 15:52:10.711 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:52:10.713 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
2. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:52:10.714 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
2. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:52:10.714 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:52:10.926 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:52:10.928 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:52:10.928 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:52:10.928 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:52:10.929 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 15:52:10.931 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:52:11.348 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:52:11.349 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:52:11.350 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:52:11.350 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:52:11.351 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:52:11.352 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:52:11.352 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:52:11.368 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:52:11.369 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:52:11.381 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:52:11.382 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:11.382 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:11.395 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 15:52:11.395 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:52:11.395 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:52:11.407 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 15:52:11.408 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:52:11.408 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:52:11.420 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 15:52:11.420 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:52:11.420 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:52:11.434 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 14 msec}
2025-04-26 15:52:11.435 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:52:11.435 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:52:11.447 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 15:52:11.447 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:11.447 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:11.459 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:52:11.459 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:11.460 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:11.472 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
2. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:52:11.494 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.495 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.495 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.497 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.497 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.498 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.500 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:11.500 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.501 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:11.502 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.502 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.502 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.504 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.504 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.505 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.506 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:11.506 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.506 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:11.507 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:11.508 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.508 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:11.509 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.509 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.509 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.510 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:11.511 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:11.511 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:11.512 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.512 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.513 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.514 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.514 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.515 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.516 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.516 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.516 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.517 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.517 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.517 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.518 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:52:11.518 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.519 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:52:11.520 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.521 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.523 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.524 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:52:11.525 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_video` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:11.525 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:52:11.527 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.528 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.528 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.530 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:11.530 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.530 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:11.532 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:11.533 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.533 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:11.535 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.535 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.536 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.538 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:11.538 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.538 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:11.539 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:52:11.539 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.540 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:52:11.540 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:11.541 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:11.541 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:11.541 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:52:11.675 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:52:12.252 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:52:12.253 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:52:12.570 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:52:13.025 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@7744c869. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:52:13.026 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:52:13.064 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:52:13.088 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:52:13.110 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 4.239 seconds (process running for 893.058)
2025-04-26 15:52:13.114 INFO  [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-04-26 15:52:42.105 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 22692 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:52:42.107 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:52:42.108 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:52:42.156 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 15:52:42.156 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 15:52:43.751 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:52:44.149 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 388 ms. Found 14 JPA repository interfaces.
2025-04-26 15:52:45.286 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:52:45.304 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:52:45.304 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:52:45.422 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:52:45.422 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3266 ms
2025-04-26 15:52:45.942 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:52:46.025 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 15:52:46.068 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:52:46.446 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:52:46.485 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:52:46.583 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 15:52:46.586 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 15:52:46.588 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@1456f763
2025-04-26 15:52:46.590 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:52:46.609 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:52:46.609 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:52:46.625 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:52:47.038 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:52:47.040 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:52:47.041 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:52:47.042 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:52:47.043 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:52:47.046 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:52:48.168 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:52:48.198 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:52:48.199 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:52:48.200 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:52:48.201 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 15:52:48.201 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:52:48.202 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:52:48.202 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:52:48.203 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:52:48.230 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:52:48.231 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:52:48.244 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:52:48.244 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:48.244 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:48.255 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:52:48.256 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:52:48.256 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:52:48.269 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 13 msec}
2025-04-26 15:52:48.269 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:52:48.270 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:52:48.281 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 15:52:48.281 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:52:48.282 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:52:48.295 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 15:52:48.295 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:52:48.295 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:52:48.306 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 10 msec}
2025-04-26 15:52:48.307 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:48.307 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:48.320 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 15:52:48.320 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:52:48.320 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:52:48.331 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:52:48.350 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.351 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.353 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.356 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.357 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:48.358 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.360 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:48.360 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.361 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:48.362 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.362 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.363 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.364 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.364 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.365 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.366 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:48.367 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.367 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:48.369 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:48.369 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.369 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:48.370 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.370 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.370 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.372 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:52:48.372 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.373 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:52:48.374 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.374 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.375 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.376 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.377 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:48.377 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.379 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.380 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:48.380 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.382 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.382 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.383 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.384 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:52:48.384 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.384 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:52:48.386 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.386 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.386 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.387 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:52:48.388 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.388 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:52:48.389 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.390 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.390 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.391 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:48.391 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.392 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:48.393 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:48.393 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.393 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:48.395 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.395 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.395 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.397 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:52:48.397 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.397 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:52:48.398 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:52:48.399 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 1 msec}
2025-04-26 15:52:48.399 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:52:48.400 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:52:48.400 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:52:48.400 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:52:48.402 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:52:48.856 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:52:49.988 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:52:49.989 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:52:50.633 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:52:51.318 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@4e1145b2. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:52:51.318 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:52:51.662 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:52:51.736 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:52:51.746 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.348 seconds (process running for 11.033)
2025-04-26 15:53:13.605 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 15:53:13.607 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 15:53:13.609 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-04-26 15:53:13.885 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:53:13.886 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:53:14.374 ERROR [http-nio-8080-exec-4] c.t.n.c.e.GlobalExceptionAdvice - [Exception: InvalidDataAccessApiUsageException]
org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.query.SemanticException: Could not interpret path expression 'boardPostViewHistory.id'
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:371)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:550)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:335)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy4/jdk.proxy4.$Proxy187.getBoardPostList(Unknown Source)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl.listPosts(BoardPostServiceImpl.java:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.tomato.naraclub.application.board.service.BoardPostServiceImpl$$SpringCGLIB$$0.listPosts(<generated>)
	at com.tomato.naraclub.application.board.controller.BoardPostController.list(BoardPostController.java:29)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.SemanticException: Could not interpret path expression 'boardPostViewHistory.id'
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:860)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:765)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:140)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy172.createQuery(Unknown Source)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319)
	at jdk.proxy4/jdk.proxy4.$Proxy172.createQuery(Unknown Source)
	at com.querydsl.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:132)
	at com.querydsl.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:125)
	at com.querydsl.jpa.impl.AbstractJPAQuery.fetch(AbstractJPAQuery.java:242)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl.getBoardPostList(BoardPostCustomRepositoryImpl.java:64)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:769)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:721)
	at com.tomato.naraclub.application.board.repository.custom.BoardPostCustomRepositoryImpl$$SpringCGLIB$$0.getBoardPostList(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:173)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:148)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 153 common frames omitted
Caused by: org.hibernate.query.SemanticException: Could not interpret path expression 'boardPostViewHistory.id'
	at org.hibernate.query.hql.internal.BasicDotIdentifierConsumer$BaseLocalSequencePart.resolvePathPart(BasicDotIdentifierConsumer.java:241)
	at org.hibernate.query.hql.internal.BasicDotIdentifierConsumer.consumeIdentifier(BasicDotIdentifierConsumer.java:92)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimplePath(SemanticQueryBuilder.java:5269)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitIndexedPathAccessFragment(SemanticQueryBuilder.java:5218)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGeneralPathFragment(SemanticQueryBuilder.java:5193)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGeneralPathExpression(SemanticQueryBuilder.java:1886)
	at org.hibernate.grammars.hql.HqlParser$GeneralPathExpressionContext.accept(HqlParser.java:7967)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitBarePrimaryExpression(HqlParserBaseVisitor.java:777)
	at org.hibernate.grammars.hql.HqlParser$BarePrimaryExpressionContext.accept(HqlParser.java:7425)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitIsNullPredicate(SemanticQueryBuilder.java:2437)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitIsNullPredicate(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$IsNullPredicateContext.accept(HqlParser.java:6595)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2374)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6307)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGroupedPredicate(SemanticQueryBuilder.java:2364)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGroupedPredicate(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$GroupedPredicateContext.accept(HqlParser.java:6352)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitExpressionOrPredicate(HqlParserBaseVisitor.java:917)
	at org.hibernate.grammars.hql.HqlParser$ExpressionOrPredicateContext.accept(HqlParser.java:8195)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectableNode(SemanticQueryBuilder.java:1430)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelection(SemanticQueryBuilder.java:1407)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectClause(SemanticQueryBuilder.java:1400)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuery(SemanticQueryBuilder.java:1249)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:1035)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$QuerySpecExpressionContext.accept(HqlParser.java:2132)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:1020)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$SimpleQueryGroupContext.accept(HqlParser.java:2003)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectStatement(SemanticQueryBuilder.java:490)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitStatement(SemanticQueryBuilder.java:449)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.buildSemanticModel(SemanticQueryBuilder.java:322)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:71)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:145)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:132)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:802)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:852)
	... 198 common frames omitted
2025-04-26 15:53:14.458 WARN  [http-nio-8080-exec-4] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.query.SemanticException: Could not interpret path expression 'boardPostViewHistory.id']
2025-04-26 15:58:29.810 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 16040 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 15:58:29.811 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 15:58:29.812 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 15:58:29.859 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 15:58:29.859 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 15:58:31.450 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 15:58:31.854 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 395 ms. Found 14 JPA repository interfaces.
2025-04-26 15:58:32.995 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 15:58:33.012 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 15:58:33.012 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 15:58:33.128 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 15:58:33.128 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3268 ms
2025-04-26 15:58:33.636 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 15:58:33.719 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 15:58:33.763 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 15:58:34.131 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 15:58:34.169 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 15:58:34.262 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 15:58:34.265 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 15:58:34.266 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@12bcea3b
2025-04-26 15:58:34.268 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 15:58:34.286 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 15:58:34.286 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 15:58:34.299 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 15:58:34.711 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:58:34.713 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 15:58:34.714 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:58:34.715 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:58:34.716 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:58:34.718 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:58:35.797 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 15:58:35.823 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:58:35.824 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:58:35.825 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 15:58:35.826 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 15:58:35.826 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 15:58:35.827 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 15:58:35.828 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 15:58:35.829 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 15:58:35.855 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:58:35.856 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:58:35.869 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:58:35.869 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:58:35.869 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:58:35.881 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 15:58:35.881 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 15:58:35.881 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 15:58:35.892 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 15:58:35.893 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 15:58:35.893 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 15:58:35.905 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 15:58:35.905 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 15:58:35.905 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 15:58:35.918 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 15:58:35.919 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 15:58:35.919 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 15:58:35.931 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 15:58:35.931 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:58:35.931 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:58:35.943 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 10 msec}
2025-04-26 15:58:35.943 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 15:58:35.943 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 15:58:35.955 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 15:58:35.975 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.976 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 15:58:35.978 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:35.981 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.981 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.982 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:35.985 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:58:35.985 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.986 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:58:35.987 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.987 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.988 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:35.989 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.990 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.990 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:35.992 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:58:35.992 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.992 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:58:35.994 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:58:35.994 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.994 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:58:35.995 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.995 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.995 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:35.997 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 15:58:35.998 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:35.998 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 15:58:35.999 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:35.999 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.000 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.002 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.002 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.002 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.004 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.004 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.005 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.006 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.007 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.007 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.008 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:58:36.008 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.008 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:58:36.010 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.011 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.011 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.012 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 15:58:36.012 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.013 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 15:58:36.014 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.014 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.019 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.020 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:58:36.020 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.020 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:58:36.022 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:58:36.022 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.022 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:58:36.024 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.024 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.025 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.026 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 15:58:36.027 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.027 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 15:58:36.028 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 15:58:36.028 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.028 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 15:58:36.029 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 15:58:36.029 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 15:58:36.030 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 15:58:36.031 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 15:58:36.461 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 15:58:37.669 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 15:58:37.670 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 15:58:38.313 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 15:58:38.981 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@2397b2a2. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:58:38.981 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 15:58:39.319 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 15:58:39.392 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 15:58:39.402 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.308 seconds (process running for 11.005)
2025-04-26 15:58:43.780 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 15:58:43.780 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 15:58:43.781 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 15:58:44.036 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:58:44.037 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:58:44.557 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6))),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:58:44.562 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?

2025-04-26 15:58:44.563 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 15:58:44.566 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6))) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                          |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                          |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                          |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                          |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                          |false  |2025-04-22 22:35:27.285519 |
|1  |1         |zz        |zz      |0             |1     |0           |false                                                                                                                          |false  |2025-04-22 22:34:07.601494 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 15:58:44.598 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:58:44.599 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:58:44.600 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:58:44.600 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:59:19.296 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:59:19.296 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 15:59:19.298 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6))),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:59:19.299 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?

2025-04-26 15:59:19.300 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 15:59:19.301 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6))) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |1     |0           |true                                                                                                                           |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                          |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                          |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                          |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                          |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                          |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 15:59:19.303 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:59:19.303 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:59:19.304 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:59:19.304 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:59:41.677 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:59:41.677 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 15:59:41.678 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 15:59:41.679 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1

2025-04-26 15:59:41.679 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1
 {executed in 0 msec}
2025-04-26 15:59:41.679 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 15:59:41.680 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video */ select
            count(v1_0.id) 
        from
            t_video v1_0
2025-04-26 15:59:41.681 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0

2025-04-26 15:59:41.681 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0
 {executed in 0 msec}
2025-04-26 15:59:41.681 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 15:59:41.690 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6))),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:59:41.691 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?

2025-04-26 15:59:41.692 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6))),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 15:59:41.693 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6))) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |1     |0           |true                                                                                                                           |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                          |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                          |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                          |false  |2025-04-23 20:32:34.019068 |
|---|----------|----------|--------|--------------|------|------------|-------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 15:59:41.694 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 15:59:41.694 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 15:59:41.695 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 15:59:41.695 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 15:59:41.714 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 15:59:41.714 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4

2025-04-26 15:59:41.715 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4
 {executed in 1 msec}
2025-04-26 15:59:41.715 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|---|

2025-04-26 15:59:41.762 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        votePost.isNew as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?1 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            vp1_0.is_new,
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 15:59:41.762 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc

2025-04-26 15:59:41.764 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc
 {executed in 2 msec}
2025-04-26 15:59:41.766 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |is_new |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|

2025-04-26 15:59:41.771 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 15:59:41.772 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 15:59:41.772 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 15:59:41.773 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 15:59:53.175 ERROR [http-nio-8080-exec-1] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 16:00:05.960 DEBUG [http-nio-8080-exec-6] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] POST https://api.otongtong.net/v1/api/external/PASSTONG/plain/login
2025-04-26 16:00:05.960 DEBUG [http-nio-8080-exec-6] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] Content-Type=application/x-www-form-urlencoded
2025-04-26 16:00:06.809 DEBUG [reactor-http-nio-2] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Response][Body] {"result":false,"code":1015,"message":"INVALID_USER_PASSWORD"}
2025-04-26 16:00:25.773 DEBUG [http-nio-8080-exec-2] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] POST https://api.otongtong.net/v1/api/external/PASSTONG/plain/login
2025-04-26 16:00:25.773 DEBUG [http-nio-8080-exec-2] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Request] Content-Type=application/x-www-form-urlencoded
2025-04-26 16:00:25.824 DEBUG [reactor-http-nio-3] c.t.n.c.util.WebClientLoggingFilter - [WebClient][Response][Body] {"result":true,"code":0,"message":"","value":{"userKey":"1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975","name":"김민재","deviceType":"ANDROID","userStatus":"login","appType":"AlrimTong","lastLoginDate":0,"lastLogoffDate":0,"online":0,"longOffline":0,"logoutUC":0,"decPhoneNum":"01089754896","nationType":"KR","profileImg":"","profileImgThume":"","transferExist":false,"passiveblockstatus":0,"interPhoneNum":"+82 10-8975-4896","blockstatus":0,"qrpath":"http://api.otongtong.net:28080/file/profile/1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975/qr/1706749795099.png","statusMsg":"","userUniqueNo":"T294777341","address":"","phoneOpenYn":"N","addrOpenYn":"N","walletOpenYn":"N","voipNum":"","passwd":"0BWS+8bw5IzL3gLlI+nv6+xEk0rzvkGWgseo3AQgHaY=","registerID":868928,"compCode":"ETOMATO","registerDate":"2024-02-01 10:08:57","wallet_addr":"","coin_info":{},"supporter_airdrop_amount":0.0,"tongtonguser":true,"created_at":0,"nameOpenYn":"Y","statusMsgOpenYn":"Y"}}
2025-04-26 16:00:25.885 DEBUG [reactor-http-nio-3] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.user_key=?
2025-04-26 16:00:25.886 DEBUG [reactor-http-nio-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:00:25.886 DEBUG [reactor-http-nio-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:00:25.887 DEBUG [reactor-http-nio-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.user_key='1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975'

2025-04-26 16:00:25.888 DEBUG [reactor-http-nio-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.user_key='1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975'
 {executed in 0 msec}
2025-04-26 16:00:25.902 INFO  [reactor-http-nio-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:25.943 DEBUG [reactor-http-nio-3] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.auth.entity.RefreshToken */insert 
    into
        t_refresh_token (created_at, created_by, device_type, expiry_date, ip_address, last_used_at, member_id, refresh_token, updated_at, updated_by, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 16:00:25.945 DEBUG [reactor-http-nio-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. /* insert for com.tomato.naraclub.application.auth.entity.RefreshToken */insert into t_refresh_token (created_at,created_by,device_type,expiry_date,ip_address,last_used_at,member_id,refresh_token,updated_at,updated_by,user_agent) values (NULL,NULL,NULL,'05/10/2025 16:00:25.000','0:0:0:0:0:0:0:1','04/26/2025 16:00:25.924',1,'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',NULL,NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36') returning id

2025-04-26 16:00:25.946 DEBUG [reactor-http-nio-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. /* insert for com.tomato.naraclub.application.auth.entity.RefreshToken */insert into t_refresh_token (created_at,created_by,device_type,expiry_date,ip_address,last_used_at,member_id,refresh_token,updated_at,updated_by,user_agent) values (NULL,NULL,NULL,'05/10/2025 16:00:25.000','0:0:0:0:0:0:0:1','04/26/2025 16:00:25.924',1,'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',NULL,NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36') returning id
 {executed in 1 msec}
2025-04-26 16:00:25.954 INFO  [reactor-http-nio-3] jdbc.resultsettable - 
|---|
|id |
|---|
|6  |
|---|

2025-04-26 16:00:26.093 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:26.094 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:26.095 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:26.096 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:26.101 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot 
    from
        Video video 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot 
        from
            t_video v1_0 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:26.101 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1

2025-04-26 16:00:26.102 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot
from Video video
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot from t_video v1_0 order by v1_0.created_at desc limit 0,1
 {executed in 1 msec}
2025-04-26 16:00:26.102 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|

2025-04-26 16:00:26.104 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video */ select
            count(v1_0.id) 
        from
            t_video v1_0
2025-04-26 16:00:26.104 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0

2025-04-26 16:00:26.104 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0
 {executed in 0 msec}
2025-04-26 16:00:26.104 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 16:00:26.121 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:26.122 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:26.122 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:26.124 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:26.175 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:26.176 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:00:26.178 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 16:00:26.178 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |1     |0           |true                                                                                                                                                  |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:00:26.179 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:00:26.179 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:00:26.180 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 16:00:26.180 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:00:26.194 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:26.195 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:26.195 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:26.196 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:26.198 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:26.199 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4

2025-04-26 16:00:26.200 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4
 {executed in 0 msec}
2025-04-26 16:00:26.200 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|---|

2025-04-26 16:00:26.202 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        votePost.isNew as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?1 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            vp1_0.is_new,
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 16:00:26.202 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc

2025-04-26 16:00:26.203 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, votePost.isNew as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 131
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,vp1_0.is_new,vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (12,11,10,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 16:00:26.204 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |is_new |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false  |2025-04-23 20:44:23.0 |2025-04-23 20:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------|----------------------|----------------------|

2025-04-26 16:00:26.205 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 16:00:26.205 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 16:00:26.206 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 16:00:26.206 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 16:00:35.611 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:00:35.611 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:00:35.612 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:35.612 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:35.612 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:35.613 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:35.616 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:35.617 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:00:35.618 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:00:35.619 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |1     |0           |true                                                                                                                                                  |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:00:35.619 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:00:35.620 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:00:35.620 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 16:00:35.620 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:00:36.869 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:00:36.869 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:00:36.870 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:36.870 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:36.871 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 16:00:36.871 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:36.874 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:36.874 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:36.875 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:36.875 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:36.880 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 16:00:36.881 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 16:00:36.882 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 16:00:36.882 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        boardComments.id as commentId,
        boardComments.author.id as authorId,
        boardComments.author.name as authorName,
        (boardComments.author.id = ?1) as isMine,
        boardComments.content,
        boardComments.createdAt,
        boardComments.updatedAt 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?2 
    order by
        boardComments.createdAt desc */ select
            bc1_0.id,
            bc1_0.author_id,
            a1_0.name,
            (bc1_0.author_id=cast(? as signed)),
            bc1_0.content,
            bc1_0.created_at,
            bc1_0.updated_at 
        from
            t_board_comments bc1_0 
        join
            t_member a1_0 
                on a1_0.id=bc1_0.author_id 
        where
            bc1_0.board_post_id=? 
        order by
            bc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:36.882 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:36.882 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?

2025-04-26 16:00:36.882 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:00:36.883 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|id |author_id |name |(bc1_0.author_id=cast(1 as signed)) |content |created_at |updated_at |
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|---|----------|-----|------------------------------------|--------|-----------|-----------|

2025-04-26 16:00:36.884 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(boardComments) 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?1 */ select
            count(bc1_0.id) 
        from
            t_board_comments bc1_0 
        where
            bc1_0.board_post_id=?
2025-04-26 16:00:36.884 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?

2025-04-26 16:00:36.885 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?
 {executed in 0 msec}
2025-04-26 16:00:36.885 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(bc1_0.id) |
|----------------|
|0               |
|----------------|

2025-04-26 16:00:36.905 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        i1_0.board_post_id,
        i1_0.id,
        i1_0.created_at,
        i1_0.created_by,
        i1_0.image_url,
        i1_0.updated_at,
        i1_0.updated_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    left join
        t_board_post_image i1_0 
            on bp1_0.id=i1_0.board_post_id 
    where
        bp1_0.id=?
2025-04-26 16:00:36.906 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1

2025-04-26 16:00:36.907 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1
 {executed in 1 msec}
2025-04-26 16:00:36.918 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at              |created_by |board_post_id |id |created_at                 |created_by |image_url                                           |updated_at                 |updated_by |is_hot |likes |share_count |title |updated_at                 |updated_by |views |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|1  |1         |0             |test    |2025-04-26 12:34:07.601 |null       |1             |1  |2025-04-22 22:34:07.629607 |null       |/uploads/1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png |2025-04-22 22:34:07.629607 |null       |false  |0     |0           |test  |2025-04-22 22:34:07.601494 |null       |1     |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|

2025-04-26 16:00:36.919 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert 
    into
        t_board_post_view_history (board_post_id, created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 16:00:36.920 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 16:00:36.919',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 16:00:36.919',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 16:00:36.919') returning id

2025-04-26 16:00:36.921 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 16:00:36.919',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 16:00:36.919',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 16:00:36.919') returning id
 {executed in 1 msec}
2025-04-26 16:00:36.921 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|
|id |
|---|
|3  |
|---|

2025-04-26 16:00:36.936 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* <criteria> */ select
        bpl1_0.id,
        bpl1_0.board_post_id,
        bpl1_0.created_at,
        bpl1_0.created_by,
        bpl1_0.member_id,
        bpl1_0.updated_at,
        bpl1_0.updated_by 
    from
        t_board_post_like bpl1_0 
    where
        bpl1_0.member_id=? 
        and bpl1_0.board_post_id=?
2025-04-26 16:00:36.937 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1

2025-04-26 16:00:36.938 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1
 {executed in 1 msec}
2025-04-26 16:00:36.938 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------|-----------|-----------|----------|-----------|-----------|
|id |board_post_id |created_at |created_by |member_id |updated_at |updated_by |
|---|--------------|-----------|-----------|----------|-----------|-----------|
|---|--------------|-----------|-----------|----------|-----------|-----------|

2025-04-26 16:00:36.943 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post 
    set
        author_id=?,
        comment_count=?,
        content=?,
        is_hot=?,
        likes=?,
        share_count=?,
        title=?,
        updated_at=?,
        updated_by=?,
        views=? 
    where
        id=?
2025-04-26 16:00:36.944 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=0,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=2 where id=1

2025-04-26 16:00:36.945 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=0,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=2 where id=1
 {executed in 1 msec}
2025-04-26 16:00:36.957 ERROR [http-nio-8080-exec-9] c.t.n.c.e.GlobalExceptionAdvice - [Exception: NoResourceFoundException]
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapUnsecured$1(ObservationFilterChainDecorator.java:90)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:219)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 16:00:36.960 WARN  [http-nio-8080-exec-9] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.]
2025-04-26 16:00:38.717 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:00:38.718 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 16:00:38.718 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:38.719 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:38.719 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:38.720 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:38.722 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:38.723 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:00:38.724 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:00:38.725 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:00:38.726 DEBUG [http-nio-8080-exec-7] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:00:38.726 DEBUG [http-nio-8080-exec-7] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:00:38.727 DEBUG [http-nio-8080-exec-7] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 16:00:38.727 INFO  [http-nio-8080-exec-7] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:00:42.773 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:00:42.774 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:00:42.775 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:00:42.775 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:00:42.776 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:00:42.777 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:00:42.780 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:00:42.781 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:00:42.781 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:00:42.782 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:00:42.782 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:00:42.782 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:00:42.783 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 16:00:42.783 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:10:09.784 INFO  [File Watcher] o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 9 class path changes (0 additions, 9 deletions, 0 modifications)
2025-04-26 16:10:09.826 INFO  [Thread-5] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:10:09.830 INFO  [Thread-5] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 16:10:09.833 INFO  [Thread-5] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 16:10:10.000 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 16040 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 16:10:10.000 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 16:10:10.000 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 16:10:10.973 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 16:10:11.235 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 261 ms. Found 14 JPA repository interfaces.
2025-04-26 16:10:11.513 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 16:10:11.514 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 16:10:11.514 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 16:10:11.626 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 16:10:11.626 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1623 ms
2025-04-26 16:10:11.907 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 16:10:11.916 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 16:10:11.942 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 16:10:11.944 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 16:10:11.949 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
3. SELECT 1

2025-04-26 16:10:11.950 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 16:10:11.950 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@6c0ba106
2025-04-26 16:10:11.951 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 16:10:11.952 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
3. SELECT @@character_set_database, @@sql_mode

2025-04-26 16:10:11.952 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
3. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 16:10:11.953 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 16:10:12.154 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:10:12.156 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 16:10:12.156 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:10:12.156 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:10:12.156 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:10:12.157 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:10:12.585 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 16:10:12.585 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:10:12.587 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:10:12.587 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:10:12.587 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:10:12.587 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:10:12.587 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:10:12.603 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:10:12.604 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:10:12.616 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:10:12.616 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:12.617 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:12.629 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:10:12.629 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 16:10:12.629 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 16:10:12.641 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 12 msec}
2025-04-26 16:10:12.642 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 16:10:12.643 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 16:10:12.654 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 16:10:12.655 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 16:10:12.655 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 16:10:12.669 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 16:10:12.669 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:10:12.669 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:10:12.682 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:10:12.682 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:12.682 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:12.694 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:10:12.695 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:12.695 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:12.706 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:10:12.709 DEBUG [restartedMain] org.hibernate.SQL - 
    create table t_vote_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        reader_id bigint not null,
        vote_post_id bigint not null comment '비디오 id',
        primary key (id)
    ) engine=InnoDB
2025-04-26 16:10:12.709 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. create table t_vote_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        reader_id bigint not null,
        vote_post_id bigint not null comment '비디오 id',
        primary key (id)
    ) engine=InnoDB

2025-04-26 16:10:12.718 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. create table t_vote_post_view_history (
        id bigint not null auto_increment,
        created_at datetime(6) comment '등록일시',
        created_by varchar(100) comment '등록자',
        updated_at datetime(6) comment '수정일시',
        updated_by varchar(100) comment '수정자',
        device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)',
        ip_address varchar(45) not null comment '조회자 IP 주소',
        user_agent varchar(512) not null comment 'User-Agent 헤더 전체',
        viewed_at datetime(6) not null comment '조회 시각 (변경 불가)',
        reader_id bigint not null,
        vote_post_id bigint not null comment '비디오 id',
        primary key (id)
    ) engine=InnoDB
 {executed in 8 msec}
2025-04-26 16:10:12.737 DEBUG [restartedMain] org.hibernate.SQL - 
    create index idx01_t_vote_post_view_history_created_at 
       on t_vote_post_view_history (created_at)
2025-04-26 16:10:12.737 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. create index idx01_t_vote_post_view_history_created_at 
       on t_vote_post_view_history (created_at)

2025-04-26 16:10:12.754 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. create index idx01_t_vote_post_view_history_created_at 
       on t_vote_post_view_history (created_at)
 {executed in 17 msec}
2025-04-26 16:10:12.757 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.757 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.757 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.759 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.759 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.759 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.761 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:12.761 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.761 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:12.762 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.762 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.763 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.764 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.764 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.764 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.766 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:12.766 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.766 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:12.767 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:12.769 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.769 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:12.770 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.770 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.770 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.771 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:12.772 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.772 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:12.773 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.773 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.773 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.775 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.775 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.775 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.776 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.777 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.777 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.778 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.778 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.778 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.779 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:10:12.780 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.780 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:10:12.781 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.781 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.782 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.783 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:10:12.783 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.783 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:10:12.785 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.785 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.786 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.787 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:12.787 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.787 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:12.788 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:12.790 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.790 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:12.791 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.792 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.792 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.792 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_post_view_history 
       add constraint FKmddcn4870t4l5gv6skpai1svm 
       foreign key (reader_id) 
       references t_member (id)
2025-04-26 16:10:12.792 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_post_view_history 
       add constraint FKmddcn4870t4l5gv6skpai1svm 
       foreign key (reader_id) 
       references t_member (id)

2025-04-26 16:10:12.822 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_post_view_history 
       add constraint FKmddcn4870t4l5gv6skpai1svm 
       foreign key (reader_id) 
       references t_member (id)
 {executed in 30 msec}
2025-04-26 16:10:12.823 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_post_view_history 
       add constraint FK3lvhmudpqdrmdywbwt18mn2gn 
       foreign key (vote_post_id) 
       references t_vote_post (id)
2025-04-26 16:10:12.823 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_post_view_history 
       add constraint FK3lvhmudpqdrmdywbwt18mn2gn 
       foreign key (vote_post_id) 
       references t_vote_post (id)

2025-04-26 16:10:12.856 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
3. alter table if exists t_vote_post_view_history 
       add constraint FK3lvhmudpqdrmdywbwt18mn2gn 
       foreign key (vote_post_id) 
       references t_vote_post (id)
 {executed in 32 msec}
2025-04-26 16:10:12.857 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:12.857 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.857 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:12.858 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 16:10:12.859 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.859 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 16:10:12.860 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:12.860 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:12.860 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:12.861 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:10:12.984 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 16:10:13.206 WARN  [restartedMain] o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'voteCommentController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\controller\VoteCommentController.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'com.tomato.naraclub.application.comment.service.VoteCommentService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2025-04-26 16:10:13.207 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:10:13.207 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 16:10:13.208 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 16:10:13.208 INFO  [restartedMain] o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-26 16:10:13.225 INFO  [restartedMain] o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-26 16:10:13.260 ERROR [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.tomato.naraclub.application.comment.controller.VoteCommentController required a bean of type 'com.tomato.naraclub.application.comment.service.VoteCommentService' that could not be found.


Action:

Consider defining a bean of type 'com.tomato.naraclub.application.comment.service.VoteCommentService' in your configuration.

2025-04-26 16:10:15.417 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 16040 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 16:10:15.417 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 16:10:15.417 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 16:10:16.143 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 16:10:16.374 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 230 ms. Found 14 JPA repository interfaces.
2025-04-26 16:10:16.571 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 16:10:16.572 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 16:10:16.572 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 16:10:16.662 INFO  [restartedMain] o.a.c.c.C.[Tomcat-1].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 16:10:16.662 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1242 ms
2025-04-26 16:10:16.864 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 16:10:16.873 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 16:10:16.894 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 16:10:16.895 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 16:10:16.898 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
4. SELECT 1

2025-04-26 16:10:16.898 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
4. SELECT 1
 {executed in 0 msec}
2025-04-26 16:10:16.899 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@40546440
2025-04-26 16:10:16.899 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 16:10:16.899 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
4. SELECT @@character_set_database, @@sql_mode

2025-04-26 16:10:16.900 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
4. SELECT @@character_set_database, @@sql_mode
 {executed in 1 msec}
2025-04-26 16:10:16.900 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 16:10:17.014 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:10:17.015 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:10:17.016 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:10:17.016 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:10:17.016 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:10:17.017 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:10:17.234 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 16:10:17.235 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:10:17.236 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:10:17.236 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:10:17.237 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:10:17.237 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:10:17.237 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:10:17.250 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:10:17.251 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:10:17.263 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:10:17.263 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:17.263 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:17.274 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:10:17.274 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 16:10:17.274 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 16:10:17.286 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 12 msec}
2025-04-26 16:10:17.287 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 16:10:17.287 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 16:10:17.299 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 10 msec}
2025-04-26 16:10:17.299 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 16:10:17.299 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 16:10:17.312 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 16:10:17.312 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:10:17.312 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:10:17.367 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 54 msec}
2025-04-26 16:10:17.367 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:17.367 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:17.378 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:10:17.379 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:10:17.379 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:10:17.391 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
4. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:10:17.410 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.410 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.410 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.412 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.412 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.412 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.413 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:17.414 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 16:10:17.414 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:17.415 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.415 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.415 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.416 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.416 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.417 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.418 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:17.418 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.419 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:17.420 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:17.420 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.420 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:17.422 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.422 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.422 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.423 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:10:17.424 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 16:10:17.424 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:10:17.425 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.425 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.425 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.427 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.427 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.427 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.428 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.429 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.429 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.430 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.431 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:10:17.431 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.432 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:10:17.432 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.433 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:10:17.434 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.435 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:10:17.435 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.436 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:10:17.436 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.436 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:10:17.437 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.437 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.438 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.438 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:17.438 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.439 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:17.440 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:17.440 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.440 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:17.441 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.442 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:10:17.442 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.443 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.443 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.444 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.444 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:17.445 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.445 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:17.446 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:10:17.446 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.446 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:10:17.447 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 16:10:17.448 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.448 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 16:10:17.448 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:10:17.448 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:10:17.448 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:10:17.450 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:10:17.560 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 16:10:17.953 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 16:10:17.954 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 16:10:18.172 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 16:10:18.494 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@361cb9df. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:10:18.494 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:10:18.536 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 16:10:18.556 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 16:10:18.562 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 3.207 seconds (process running for 710.165)
2025-04-26 16:10:18.565 INFO  [restartedMain] o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2025-04-26 16:20:18.588 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 4204 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 16:20:18.589 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 16:20:18.590 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 16:20:18.639 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 16:20:18.639 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 16:20:20.226 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 16:20:20.632 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 398 ms. Found 14 JPA repository interfaces.
2025-04-26 16:20:21.763 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 16:20:21.779 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 16:20:21.779 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 16:20:21.899 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 16:20:21.899 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3259 ms
2025-04-26 16:20:22.467 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 16:20:22.562 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 16:20:22.614 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 16:20:22.978 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 16:20:23.019 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 16:20:23.117 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 16:20:23.120 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 16:20:23.122 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@641a243
2025-04-26 16:20:23.125 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 16:20:23.142 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 16:20:23.144 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 2 msec}
2025-04-26 16:20:23.157 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 16:20:23.567 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:20:23.569 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:20:23.570 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:20:23.570 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:20:23.571 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 16:20:23.574 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:20:24.720 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 16:20:24.746 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:20:24.746 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:20:24.747 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:20:24.748 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:20:24.748 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:20:24.749 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:20:24.749 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:20:24.750 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:20:24.776 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:20:24.777 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:20:24.789 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:20:24.790 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:20:24.790 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:20:24.802 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:20:24.802 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 16:20:24.802 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 16:20:24.813 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 16:20:24.814 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 16:20:24.814 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 16:20:24.826 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 16:20:24.826 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 16:20:24.826 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 16:20:24.839 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 16:20:24.840 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:20:24.840 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:20:24.851 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 16:20:24.851 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:20:24.852 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:20:24.864 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:20:24.864 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:20:24.864 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:20:24.876 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:20:24.899 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.900 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.902 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.906 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.906 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.907 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.909 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:20:24.909 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.910 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:20:24.911 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.911 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.912 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.913 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.913 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.913 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.915 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:20:24.915 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.916 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:20:24.917 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:20:24.918 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.918 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:20:24.919 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.919 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.919 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.921 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:20:24.922 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.922 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:20:24.923 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.923 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.924 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.925 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.926 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:20:24.926 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.928 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.928 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.928 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.930 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.930 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.931 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.931 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:20:24.932 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 1 msec}
2025-04-26 16:20:24.932 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:20:24.933 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.935 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.935 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.936 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:20:24.936 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.937 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:20:24.938 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.938 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.939 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.940 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:20:24.940 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.940 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:20:24.941 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:20:24.942 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.942 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:20:24.943 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.943 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.944 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.945 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.946 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.946 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.947 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:20:24.947 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.947 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:20:24.949 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:20:24.950 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.950 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:20:24.951 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 16:20:24.951 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 16:20:24.952 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 16:20:24.952 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:20:24.953 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 1 msec}
2025-04-26 16:20:24.953 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:20:24.955 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:20:25.409 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 16:20:26.533 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 16:20:26.534 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 16:20:27.216 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 16:20:27.901 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@4f90b2f. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:20:27.901 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:20:28.247 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 16:20:28.322 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 16:20:28.331 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.486 seconds (process running for 11.168)
2025-04-26 16:20:35.242 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 16:20:35.243 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 16:20:35.244 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 16:20:35.525 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:20:35.526 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 16:20:35.573 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:20:35.577 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:20:35.578 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 16:20:35.588 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:20:36.006 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:20:36.007 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 16:20:36.008 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 16:20:36.008 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 16:20:36.372 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as isNew,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 16:20:36.375 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 16:20:36.377 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 16:20:36.385 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 16:20:36.406 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 16:20:36.407 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 16:20:36.407 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 16:20:36.408 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 16:20:42.082 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:20:42.083 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 16:20:42.083 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:20:42.084 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:20:42.085 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:20:42.086 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:20:42.090 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:20:42.090 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 16:20:42.091 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 16:20:42.091 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 16:20:42.095 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as isNew,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 16:20:42.096 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 16:20:42.098 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 0 msec}
2025-04-26 16:20:42.102 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 16:20:42.104 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 16:20:42.104 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 16:20:42.105 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 1 msec}
2025-04-26 16:20:42.105 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 16:29:51.505 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 25580 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 16:29:51.507 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 16:29:51.507 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 16:29:51.556 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 16:29:51.556 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 16:29:53.182 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 16:29:53.595 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 405 ms. Found 14 JPA repository interfaces.
2025-04-26 16:29:54.751 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 16:29:54.769 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 16:29:54.769 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 16:29:54.886 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 16:29:54.886 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3329 ms
2025-04-26 16:29:55.363 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 16:29:55.446 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 16:29:55.490 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 16:29:55.858 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 16:29:55.904 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 16:29:56.010 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 16:29:56.013 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 16:29:56.015 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@127fcb0a
2025-04-26 16:29:56.017 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 16:29:56.036 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 16:29:56.036 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 16:29:56.052 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 16:29:56.494 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:29:56.495 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:29:56.496 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:29:56.497 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:29:56.497 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:29:56.501 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:29:57.656 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 16:29:57.683 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:29:57.683 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:29:57.684 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:29:57.685 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:29:57.685 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:29:57.686 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:29:57.686 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:29:57.688 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:29:57.714 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:29:57.715 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:29:57.727 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:29:57.728 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:29:57.728 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:29:57.741 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:29:57.741 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 16:29:57.742 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 16:29:57.753 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 16:29:57.754 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 16:29:57.754 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 16:29:57.766 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 16:29:57.766 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 16:29:57.767 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 16:29:57.780 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 16:29:57.780 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:29:57.781 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:29:57.793 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 16:29:57.793 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:29:57.794 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:29:57.807 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:29:57.807 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:29:57.807 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:29:57.819 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 16:29:57.846 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.847 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.851 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.854 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.855 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:29:57.855 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.858 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:29:57.858 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.858 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:29:57.859 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.859 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.860 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.862 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.862 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.863 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.865 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:29:57.865 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.866 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:29:57.867 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:29:57.867 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.867 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:29:57.869 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.870 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.870 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.872 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:29:57.872 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.873 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:29:57.874 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.874 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.875 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.877 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.877 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.878 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.879 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.879 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.879 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.881 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.881 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.881 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.882 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:29:57.883 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.883 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:29:57.884 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.885 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.885 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.887 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:29:57.887 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.887 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:29:57.890 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.890 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.890 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.891 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:29:57.892 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.892 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:29:57.893 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:29:57.893 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.894 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:29:57.895 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.895 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.895 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.896 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.897 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:29:57.897 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.897 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:29:57.899 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.899 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:29:57.901 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:29:57.901 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.902 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:29:57.902 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 16:29:57.903 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 1 msec}
2025-04-26 16:29:57.903 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 16:29:57.904 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:29:57.904 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:29:57.904 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:29:57.907 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:29:58.454 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 16:29:59.754 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 16:29:59.755 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 16:30:00.348 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 16:30:01.117 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@78fdcb24. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:30:01.118 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:30:01.551 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 16:30:01.639 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 16:30:01.650 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.855 seconds (process running for 11.53)
2025-04-26 16:30:02.268 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 16:30:02.268 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 16:30:02.269 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 16:30:02.601 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:30:02.602 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:30:02.661 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:30:02.664 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:30:02.665 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 16:30:02.677 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:30:03.120 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:30:03.121 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 16:30:03.122 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 16:30:03.122 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 16:30:03.518 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as isNew,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 16:30:03.520 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 16:30:03.525 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 16:30:03.534 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 16:30:03.558 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 16:30:03.559 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 16:30:03.560 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 1 msec}
2025-04-26 16:30:03.560 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 16:30:42.081 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:30:42.082 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 16:30:42.083 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:30:42.083 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:30:42.083 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:30:42.084 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:30:42.107 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:30:42.109 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:30:42.110 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:30:42.111 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:30:42.113 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:30:42.114 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:30:42.114 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 16:30:42.115 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:31:13.253 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 29356 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 16:31:13.254 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 16:31:13.255 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 16:31:13.298 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 16:31:13.299 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 16:31:14.869 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 16:31:15.287 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 410 ms. Found 14 JPA repository interfaces.
2025-04-26 16:31:16.433 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 16:31:16.449 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 16:31:16.450 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 16:31:16.567 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 16:31:16.568 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3268 ms
2025-04-26 16:31:17.073 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 16:31:17.168 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 16:31:17.218 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 16:31:17.583 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 16:31:17.621 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 16:31:17.714 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 16:31:17.717 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 16:31:17.718 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@2357edf3
2025-04-26 16:31:17.720 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 16:31:17.741 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 16:31:17.741 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 16:31:17.756 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 16:31:18.170 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:31:18.172 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 16:31:18.173 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:31:18.174 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:31:18.174 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 16:31:18.177 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:31:19.303 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 16:31:19.331 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:31:19.331 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:31:19.332 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 16:31:19.333 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 16:31:19.333 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 16:31:19.333 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 16:31:19.334 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 16:31:19.335 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 16:31:19.361 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:31:19.361 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:31:19.374 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 13 msec}
2025-04-26 16:31:19.374 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:31:19.378 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:31:19.390 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:31:19.390 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 16:31:19.390 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 16:31:19.406 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 15 msec}
2025-04-26 16:31:19.407 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 16:31:19.407 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 16:31:19.418 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 16:31:19.419 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 16:31:19.419 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 16:31:19.432 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 16:31:19.433 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 16:31:19.433 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 16:31:19.445 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 16:31:19.445 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:31:19.445 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:31:19.457 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:31:19.457 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 16:31:19.457 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 16:31:19.469 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 16:31:19.489 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.490 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.493 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.496 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.496 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.497 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.499 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:31:19.500 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.500 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:31:19.501 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.501 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.502 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.503 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.504 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.504 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.506 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:31:19.506 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.506 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:31:19.508 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:31:19.509 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 16:31:19.509 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:31:19.510 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.510 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.510 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.512 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 16:31:19.513 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 16:31:19.513 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 16:31:19.514 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.515 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.515 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.517 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.517 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.518 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.519 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.519 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.520 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.521 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.522 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 16:31:19.522 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.523 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:31:19.523 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.524 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:31:19.525 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.526 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.526 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.526 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 16:31:19.528 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 2 msec}
2025-04-26 16:31:19.528 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 16:31:19.530 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.530 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.530 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.531 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:31:19.531 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.532 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:31:19.533 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:31:19.533 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.533 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:31:19.534 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.535 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.535 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.537 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.537 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.537 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.538 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:31:19.538 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.538 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:31:19.540 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 16:31:19.540 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.540 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 16:31:19.541 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 16:31:19.541 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.542 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 16:31:19.543 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 16:31:19.543 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 16:31:19.543 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 16:31:19.545 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 16:31:19.975 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 16:31:21.132 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 16:31:21.132 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 16:31:21.760 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 16:31:22.431 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@686f3414. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:31:22.432 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 16:31:22.776 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 16:31:22.855 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 16:31:22.864 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.312 seconds (process running for 10.987)
2025-04-26 16:31:26.175 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 16:31:26.175 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 16:31:26.177 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 16:31:26.441 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:31:26.441 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 16:31:26.487 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:31:26.489 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:31:26.490 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:31:26.500 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:31:27.053 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:31:27.054 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:31:27.055 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 16:31:27.057 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:31:27.096 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:31:27.096 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:31:27.097 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 16:31:27.097 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 16:31:37.609 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 16:31:37.610 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 16:31:37.611 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 16:31:37.612 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 16:31:37.612 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 16:31:37.613 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 16:31:37.619 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 16:31:37.620 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 16:31:37.621 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 16:31:37.623 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 16:31:37.624 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 16:31:37.625 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 16:31:37.625 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 16:31:37.626 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 18:03:04.532 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 25752 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 18:03:04.534 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 18:03:04.534 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 18:03:04.583 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 18:03:04.583 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 18:03:06.249 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 18:03:06.660 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 402 ms. Found 14 JPA repository interfaces.
2025-04-26 18:03:07.767 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 18:03:07.784 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 18:03:07.785 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 18:03:07.903 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 18:03:07.903 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3320 ms
2025-04-26 18:03:08.422 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 18:03:08.508 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 18:03:08.550 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 18:03:08.926 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 18:03:08.968 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 18:03:09.065 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 18:03:09.068 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 18:03:09.069 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@21c310e0
2025-04-26 18:03:09.071 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 18:03:09.088 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 18:03:09.088 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 18:03:09.104 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 18:03:09.534 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:03:09.536 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 18:03:09.537 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:03:09.538 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:03:09.538 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:03:09.541 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:03:10.670 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 18:03:10.693 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:03:10.693 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:03:10.694 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:03:10.695 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:03:10.695 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:03:10.695 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:03:10.696 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:03:10.697 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:03:10.723 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:03:10.723 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:03:10.736 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 13 msec}
2025-04-26 18:03:10.736 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:10.737 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:10.749 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:03:10.749 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 18:03:10.750 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 18:03:10.761 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 18:03:10.762 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 18:03:10.762 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 18:03:10.774 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 18:03:10.774 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 18:03:10.774 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 18:03:10.787 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 18:03:10.788 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:03:10.788 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:03:10.799 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 18:03:10.800 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:10.800 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:10.812 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:03:10.812 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:10.812 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:10.824 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:03:10.844 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.845 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:10.848 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.851 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.851 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.853 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.855 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:10.855 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.856 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:10.856 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.857 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:10.857 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.859 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.859 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.860 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.862 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:10.862 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.862 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:10.864 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:10.864 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.865 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:10.866 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.866 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.866 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.868 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:10.868 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.869 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:10.870 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.870 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.870 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.875 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.876 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.876 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.878 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.878 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.878 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.880 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.880 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.881 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.881 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:03:10.881 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.883 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:03:10.884 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.885 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.885 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.886 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:03:10.886 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.887 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:03:10.888 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.888 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.889 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.889 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:10.890 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.890 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:10.891 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:10.891 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.891 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:10.893 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.894 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.894 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.896 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.896 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.896 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.897 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:10.897 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.898 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:10.899 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:10.900 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:10.900 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:10.901 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 18:03:10.901 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.901 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 18:03:10.902 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:10.902 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:10.903 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:10.904 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 18:03:11.432 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 18:03:12.634 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 18:03:12.635 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 18:03:13.317 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 18:03:14.024 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@7efc1d4d. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:03:14.024 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:03:14.364 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 18:03:14.461 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 18:03:14.470 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.663 seconds (process running for 11.352)
2025-04-26 18:03:23.318 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 18:03:23.319 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 18:03:23.320 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 18:03:23.588 ERROR [http-nio-8080-exec-3] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 18:03:23.756 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        rt1_0.id,
        rt1_0.created_at,
        rt1_0.created_by,
        rt1_0.device_type,
        rt1_0.expiry_date,
        rt1_0.ip_address,
        rt1_0.last_used_at,
        rt1_0.member_id,
        rt1_0.refresh_token,
        rt1_0.updated_at,
        rt1_0.updated_by,
        rt1_0.user_agent 
    from
        t_refresh_token rt1_0 
    where
        rt1_0.refresh_token=?
2025-04-26 18:03:23.757 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:03:23.758 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:03:23.759 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'

2025-04-26 18:03:23.760 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'
 {executed in 1 msec}
2025-04-26 18:03:23.774 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|id |created_at |created_by |device_type |expiry_date           |ip_address      |last_used_at               |member_id |refresh_token                                                                                                                                                                     |updated_at |updated_by |user_agent                                                                                                                          |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|6  |null       |null       |null        |2025-05-10 16:00:25.0 |0:0:0:0:0:0:0:1 |2025-04-26 16:00:25.924374 |1         |eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk |null       |null       |Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36 |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 18:03:23.788 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:03:23.789 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:03:23.789 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:03:23.792 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:03:23.858 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token 
    set
        device_type=?,
        expiry_date=?,
        ip_address=?,
        last_used_at=?,
        member_id=?,
        refresh_token=?,
        updated_at=?,
        updated_by=?,
        user_agent=? 
    where
        id=?
2025-04-26 18:03:23.862 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 18:03:23.823',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6

2025-04-26 18:03:23.863 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 18:03:23.823',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6
 {executed in 1 msec}
2025-04-26 18:03:23.919 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:03:23.919 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:03:23.920 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:03:23.921 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:03:24.399 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:03:24.400 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 18:03:24.401 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 18:03:24.403 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |false  |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 18:03:24.425 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 18:03:24.426 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 18:03:24.427 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 18:03:24.427 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 18:03:26.153 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:03:26.154 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 18:03:26.155 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:03:26.155 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:03:26.156 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:03:26.156 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:03:26.172 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:03:26.172 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:03:26.173 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:03:26.173 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:03:26.287 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:03:26.289 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:03:26.290 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:03:26.294 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:03:26.302 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:03:26.302 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:03:26.303 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:03:26.303 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:03:27.419 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:03:27.420 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:03:27.421 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:03:27.421 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:03:27.422 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:03:27.422 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:03:27.427 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:03:27.427 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:03:27.428 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 18:03:27.428 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:03:27.431 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:03:27.433 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:03:27.435 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 0 msec}
2025-04-26 18:03:27.439 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:03:27.443 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:03:27.444 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:03:27.444 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:03:27.445 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:03:45.633 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 23664 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 18:03:45.635 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 18:03:45.635 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 18:03:45.687 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 18:03:45.688 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 18:03:47.375 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 18:03:47.817 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 433 ms. Found 14 JPA repository interfaces.
2025-04-26 18:03:49.050 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 18:03:49.073 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 18:03:49.073 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 18:03:49.208 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 18:03:49.209 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3521 ms
2025-04-26 18:03:49.802 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 18:03:49.902 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 18:03:49.961 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 18:03:50.357 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 18:03:50.398 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 18:03:50.500 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 18:03:50.504 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 18:03:50.505 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@2c157609
2025-04-26 18:03:50.508 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 18:03:50.525 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 18:03:50.525 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 18:03:50.539 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 18:03:51.012 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:03:51.014 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 18:03:51.015 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:03:51.015 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:03:51.016 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:03:51.019 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:03:52.187 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 18:03:52.217 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:03:52.218 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:03:52.218 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:03:52.222 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:03:52.222 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:03:52.223 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:03:52.223 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:03:52.224 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:03:52.253 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:03:52.254 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:03:52.267 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 18:03:52.267 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:52.267 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:52.279 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:03:52.279 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 18:03:52.279 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 18:03:52.290 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 18:03:52.291 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 18:03:52.291 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 18:03:52.309 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 18 msec}
2025-04-26 18:03:52.309 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 18:03:52.310 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 18:03:52.323 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 18:03:52.323 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:03:52.323 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:03:52.335 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 18:03:52.336 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:52.336 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:52.347 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:03:52.347 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:03:52.348 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:03:52.359 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 10 msec}
2025-04-26 18:03:52.380 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.381 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.384 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.387 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.388 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.389 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.391 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:52.391 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.391 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:52.392 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.393 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.393 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.394 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.395 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.395 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.397 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:52.397 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.397 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:52.399 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:52.399 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.400 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:52.400 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.401 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.401 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.403 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:03:52.403 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.403 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:03:52.404 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.405 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.405 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.407 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.407 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.408 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.409 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.409 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.410 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.411 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.412 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.412 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.414 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:03:52.414 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.414 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:03:52.416 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.416 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.417 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.418 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:03:52.418 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.418 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:03:52.420 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.420 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.420 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.421 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:52.421 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.422 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:52.423 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:52.423 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.423 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:52.424 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.424 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.425 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.426 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.426 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.427 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.427 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:52.428 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:03:52.428 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:52.430 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:03:52.430 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.431 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:03:52.431 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 18:03:52.431 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.431 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 18:03:52.433 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:03:52.434 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:03:52.434 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:03:52.436 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 18:03:52.910 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 18:03:54.176 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 18:03:54.176 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 18:03:55.031 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 18:03:55.806 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@1b521d37. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:03:55.807 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:03:56.153 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 18:03:56.254 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 18:03:56.264 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 11.414 seconds (process running for 12.327)
2025-04-26 18:04:06.163 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 18:04:06.163 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 18:04:06.164 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 18:04:06.422 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:04:06.423 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 18:04:06.474 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:04:06.477 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:04:06.478 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:04:06.487 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:05:15.527 WARN  [narasarang-pool housekeeper] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Thread starvation or clock leap detected (housekeeper delta=1m24s904ms645µs200ns).
2025-04-26 18:05:15.862 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:05:15.863 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:05:15.863 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:05:15.864 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:05:15.864 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:05:15.865 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:05:16.194 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:05:16.196 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:05:16.198 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:05:16.203 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:05:16.228 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:05:16.229 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:05:16.230 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 1 msec}
2025-04-26 18:05:16.230 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:05:25.633 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:05:25.634 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:05:25.635 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:05:25.635 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:05:25.636 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:05:25.637 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:05:28.013 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:05:28.014 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:05:28.014 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:05:28.015 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 10,10

2025-04-26 18:05:28.015 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 10,10
 {executed in 0 msec}
2025-04-26 18:05:28.016 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|3  |
|---|

2025-04-26 18:05:28.022 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id = ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id=? 
        order by
            vp1_0.created_at desc
2025-04-26 18:05:28.023 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id = 34
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(? as datetime(6)) and vp1_0.created_at<cast(? as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=? and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=? order by vp1_0.created_at desc

2025-04-26 18:05:28.024 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id = 34
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(? as datetime(6)) and vp1_0.created_at<cast(? as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=? and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=? order by vp1_0.created_at desc
 {executed in 0 msec}
2025-04-26 18:05:28.025 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|--------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question      |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|--------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|3  |1         |연금 개혁은 옳은것인가? |5  |찬성          |0          |null       |null       |0             |1          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:20.0 |2025-04-23 20:10:20.0 |
|3  |1         |연금 개혁은 옳은것인가? |6  |반대          |0          |null       |null       |0             |1          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:20.0 |2025-04-23 20:10:20.0 |
|---|----------|--------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:05:28.026 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:05:28.026 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:05:28.027 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:05:28.027 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:05:31.143 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:05:31.144 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:05:31.145 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:05:31.145 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:05:31.146 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:05:31.146 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:05:33.560 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:05:33.562 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:05:33.562 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:05:33.563 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:05:33.563 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:05:33.563 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:05:33.567 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:05:33.567 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:05:33.568 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 0 msec}
2025-04-26 18:05:33.572 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:05:33.574 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:05:33.574 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:05:33.574 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:05:33.575 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:06:54.234 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 4764 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 18:06:54.235 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 18:06:54.236 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 18:06:54.287 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 18:06:54.288 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 18:06:55.911 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 18:06:56.320 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 401 ms. Found 14 JPA repository interfaces.
2025-04-26 18:06:57.536 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 18:06:57.554 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 18:06:57.555 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 18:06:57.678 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 18:06:57.679 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3391 ms
2025-04-26 18:06:58.251 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 18:06:58.345 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 18:06:58.393 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 18:06:58.760 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 18:06:58.799 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 18:06:58.895 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 18:06:58.898 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 2 msec}
2025-04-26 18:06:58.899 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@98c342b
2025-04-26 18:06:58.901 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 18:06:58.917 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 18:06:58.918 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 18:06:58.932 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 18:06:59.355 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:06:59.356 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:06:59.357 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:06:59.358 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:06:59.358 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:06:59.361 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:07:00.512 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 18:07:00.548 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:07:00.550 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:07:00.550 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:07:00.552 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 18:07:00.552 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:07:00.553 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:07:00.553 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:07:00.554 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:07:00.582 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:07:00.583 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:07:00.597 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 18:07:00.597 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:07:00.598 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:07:00.610 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:07:00.611 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 18:07:00.611 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 18:07:00.623 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 12 msec}
2025-04-26 18:07:00.624 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 18:07:00.624 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 18:07:00.637 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 18:07:00.638 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 18:07:00.638 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 18:07:00.652 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 14 msec}
2025-04-26 18:07:00.653 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:07:00.653 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:07:00.666 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 18:07:00.667 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:07:00.667 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:07:00.679 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:07:00.680 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:07:00.680 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:07:00.692 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:07:00.719 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.719 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.723 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.727 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.727 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.728 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.730 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:07:00.731 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.735 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:07:00.736 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.737 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.737 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.739 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.739 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.739 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.742 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:07:00.742 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.743 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:07:00.745 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:07:00.745 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.745 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:07:00.746 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.747 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.747 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.749 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:07:00.750 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.750 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:07:00.751 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.752 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.752 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.754 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.755 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.755 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.757 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.757 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.757 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.759 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.760 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.760 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.761 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:07:00.761 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.761 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:07:00.764 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.764 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.765 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.766 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:07:00.766 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.767 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:07:00.769 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.770 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.770 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.771 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:07:00.771 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.772 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:07:00.773 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:07:00.774 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.774 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:07:00.777 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.779 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.779 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.785 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.786 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.787 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.789 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:07:00.790 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.790 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:07:00.793 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:07:00.793 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.794 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:07:00.795 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 18:07:00.795 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 18:07:00.795 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 18:07:00.796 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:07:00.797 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:07:00.797 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:07:00.801 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 18:07:01.331 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 18:07:02.536 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 18:07:02.537 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 18:07:03.199 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 18:07:03.883 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@4dd13ef7. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:07:03.884 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:07:04.253 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 18:07:04.336 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 18:07:04.346 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.829 seconds (process running for 11.517)
2025-04-26 18:07:05.223 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 18:07:05.224 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 18:07:05.225 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 18:07:05.553 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:07:05.553 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:07:05.599 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:07:05.602 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:07:05.603 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:07:05.611 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:07:06.044 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:07:06.044 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:07:06.045 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 18:07:06.045 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:07:06.395 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as isNew,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:07:06.397 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:07:06.402 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:07:06.407 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:07:06.428 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:07:06.428 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:07:06.429 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 1 msec}
2025-04-26 18:07:06.429 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:08:12.521 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:08:12.521 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:08:12.522 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:08:12.522 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:08:12.523 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:08:12.524 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:08:12.528 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:08:12.528 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:08:12.529 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 18:08:12.529 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:08:12.534 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as isNew,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:08:12.535 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:08:12.537 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as isNew, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:08:12.539 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:08:12.543 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:08:12.544 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:08:12.545 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:08:12.545 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:08:43.815 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 29152 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 18:08:43.816 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 18:08:43.817 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 18:08:43.869 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 18:08:43.869 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 18:08:45.475 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 18:08:45.883 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 400 ms. Found 14 JPA repository interfaces.
2025-04-26 18:08:47.044 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 18:08:47.063 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 18:08:47.064 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 18:08:47.181 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 18:08:47.181 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3311 ms
2025-04-26 18:08:47.635 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 18:08:47.716 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 18:08:47.759 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 18:08:48.117 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 18:08:48.155 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 18:08:48.249 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 18:08:48.252 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 18:08:48.253 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@641a243
2025-04-26 18:08:48.255 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 18:08:48.275 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 18:08:48.276 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 18:08:48.291 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 18:08:48.717 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:08:48.718 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:08:48.719 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:08:48.720 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:08:48.720 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:08:48.723 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:08:49.843 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 18:08:49.871 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:08:49.872 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 18:08:49.872 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:08:49.873 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:08:49.874 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:08:49.874 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:08:49.874 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 18:08:49.876 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:08:49.907 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:08:49.907 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:08:49.919 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 18:08:49.920 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:08:49.920 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:08:49.931 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:08:49.932 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 18:08:49.932 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 18:08:49.943 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 18:08:49.944 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 18:08:49.944 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 18:08:49.956 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 18:08:49.956 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 18:08:49.956 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 18:08:49.968 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 18:08:49.970 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:08:49.970 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:08:49.981 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 18:08:49.982 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:08:49.982 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:08:49.993 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:08:49.994 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:08:49.994 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:08:50.005 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:08:50.030 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.031 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.033 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.036 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.036 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.037 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.039 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:08:50.040 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:08:50.040 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:08:50.041 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.041 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.041 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.043 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.043 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.043 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.045 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:08:50.045 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.045 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:08:50.047 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:08:50.047 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.047 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:08:50.048 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.048 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.048 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.051 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:08:50.051 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.051 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:08:50.052 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.053 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.053 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.055 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.055 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.055 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.056 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.057 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:08:50.057 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.059 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.059 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.059 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.060 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:08:50.060 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.060 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:08:50.063 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.063 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.063 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.065 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:08:50.065 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.065 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:08:50.067 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.067 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.067 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.068 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:08:50.068 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.069 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:08:50.069 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:08:50.069 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.070 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:08:50.071 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.071 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.071 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.073 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.073 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.073 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.074 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:08:50.075 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:08:50.075 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:08:50.077 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:08:50.077 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.077 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:08:50.078 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 18:08:50.078 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.079 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 18:08:50.080 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:08:50.080 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:08:50.080 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:08:50.082 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 18:08:50.548 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 18:08:51.701 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 18:08:51.702 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 18:08:52.348 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 18:08:52.997 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@11d3b1b5. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:08:52.997 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:08:53.375 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 18:08:53.448 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 18:08:53.457 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.349 seconds (process running for 11.018)
2025-04-26 18:08:54.362 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 18:08:54.362 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 18:08:54.363 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 18:08:54.675 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:08:54.676 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:08:54.720 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:08:54.722 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:08:54.723 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:08:54.732 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:08:55.112 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:08:55.112 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:08:55.113 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 18:08:55.114 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:08:55.451 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:08:55.452 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:08:55.454 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:08:55.458 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:08:55.478 DEBUG [http-nio-8080-exec-3] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:08:55.479 DEBUG [http-nio-8080-exec-3] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:08:55.479 DEBUG [http-nio-8080-exec-3] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:08:55.480 INFO  [http-nio-8080-exec-3] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:08:59.580 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:08:59.581 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:08:59.582 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:08:59.583 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:08:59.583 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:08:59.584 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:08:59.585 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:08:59.585 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:08:59.585 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:08:59.586 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:08:59.610 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        voteComments.id as commentId,
        voteComments.author.id as authorId,
        voteComments.author.name as authorName,
        (voteComments.author.id = ?1) as isMine,
        voteComments.content,
        voteComments.createdAt,
        voteComments.updatedAt 
    from
        VoteComments voteComments 
    where
        voteComments.votePost.id = ?2 
    order by
        voteComments.createdAt desc */ select
            vc1_0.id,
            vc1_0.author_id,
            a1_0.name,
            (vc1_0.author_id=cast(? as signed)),
            vc1_0.content,
            vc1_0.created_at,
            vc1_0.updated_at 
        from
            t_vote_comments vc1_0 
        join
            t_member a1_0 
                on a1_0.id=vc1_0.author_id 
        where
            vc1_0.vote_post_id=? 
        order by
            vc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:08:59.611 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select voteComments.id as commentId, voteComments.author.id as authorId, voteComments.author.name as authorName, (voteComments.author.id = 11) as isMine, voteComments.content, voteComments.createdAt, voteComments.updatedAt
from VoteComments voteComments
where voteComments.votePost.id = 132
order by voteComments.createdAt desc */ select vc1_0.id,vc1_0.author_id,a1_0.name,(vc1_0.author_id=cast(0 as signed)),vc1_0.content,vc1_0.created_at,vc1_0.updated_at from t_vote_comments vc1_0 join t_member a1_0 on a1_0.id=vc1_0.author_id where vc1_0.vote_post_id=10 order by vc1_0.created_at desc limit ?,?

2025-04-26 18:08:59.612 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select voteComments.id as commentId, voteComments.author.id as authorId, voteComments.author.name as authorName, (voteComments.author.id = 11) as isMine, voteComments.content, voteComments.createdAt, voteComments.updatedAt
from VoteComments voteComments
where voteComments.votePost.id = 132
order by voteComments.createdAt desc */ select vc1_0.id,vc1_0.author_id,a1_0.name,(vc1_0.author_id=cast(0 as signed)),vc1_0.content,vc1_0.created_at,vc1_0.updated_at from t_vote_comments vc1_0 join t_member a1_0 on a1_0.id=vc1_0.author_id where vc1_0.vote_post_id=10 order by vc1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 18:08:59.614 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|
|id |author_id |name |(vc1_0.author_id=cast(1 as signed)) |content               |created_at                 |updated_at                 |
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|
|9  |1         |김민재  |true                                |zzzzzzzzzzzzz         |2025-04-23 21:39:46.336268 |2025-04-23 21:39:46.336268 |
|8  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzz    |2025-04-23 21:39:44.83791  |2025-04-23 21:39:44.83791  |
|7  |1         |김민재  |true                                |zzzzzzzzzzzzzzzz      |2025-04-23 21:39:43.137284 |2025-04-23 21:39:43.137284 |
|6  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzzz   |2025-04-23 21:39:41.484343 |2025-04-23 21:39:41.484343 |
|5  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzzzzz |2025-04-23 21:39:39.072863 |2025-04-23 21:39:39.072863 |
|4  |1         |김민재  |true                                |z                     |2025-04-23 21:39:35.363096 |2025-04-23 21:39:35.363096 |
|3  |1         |김민재  |true                                |z                     |2025-04-23 21:39:34.420945 |2025-04-23 21:39:34.420945 |
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|

2025-04-26 18:08:59.616 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(voteComments) 
    from
        VoteComments voteComments 
    where
        voteComments.votePost.id = ?1 */ select
            count(vc1_0.id) 
        from
            t_vote_comments vc1_0 
        where
            vc1_0.vote_post_id=?
2025-04-26 18:08:59.617 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select count(voteComments)
from VoteComments voteComments
where voteComments.votePost.id = 131 */ select count(vc1_0.id) from t_vote_comments vc1_0 where vc1_0.vote_post_id=?

2025-04-26 18:08:59.618 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* select count(voteComments)
from VoteComments voteComments
where voteComments.votePost.id = 131 */ select count(vc1_0.id) from t_vote_comments vc1_0 where vc1_0.vote_post_id=?
 {executed in 1 msec}
2025-04-26 18:08:59.618 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|----------------|
|count(vc1_0.id) |
|----------------|
|7               |
|----------------|

2025-04-26 18:08:59.621 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 18:08:59.621 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 18:08:59.622 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 1 msec}
2025-04-26 18:08:59.626 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:08:59.648 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        vp1_0.id,
        vp1_0.author_id,
        vp1_0.comment_count,
        vp1_0.created_at,
        vp1_0.created_by,
        vp1_0.question,
        vp1_0.share_count,
        vp1_0.updated_at,
        vp1_0.updated_by,
        vp1_0.view_count,
        vp1_0.vote_count,
        vo1_0.vote_post_id,
        vo1_0.id,
        vo1_0.created_at,
        vo1_0.created_by,
        vo1_0.option_name,
        vo1_0.updated_at,
        vo1_0.updated_by,
        vo1_0.vote_count 
    from
        t_vote_post vp1_0 
    left join
        t_vote_option vo1_0 
            on vp1_0.id=vo1_0.vote_post_id 
    where
        vp1_0.id=?
2025-04-26 18:08:59.648 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select vp1_0.id,vp1_0.author_id,vp1_0.comment_count,vp1_0.created_at,vp1_0.created_by,vp1_0.question,vp1_0.share_count,vp1_0.updated_at,vp1_0.updated_by,vp1_0.view_count,vp1_0.vote_count,vo1_0.vote_post_id,vo1_0.id,vo1_0.created_at,vo1_0.created_by,vo1_0.option_name,vo1_0.updated_at,vo1_0.updated_by,vo1_0.vote_count from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=13

2025-04-26 18:08:59.651 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select vp1_0.id,vp1_0.author_id,vp1_0.comment_count,vp1_0.created_at,vp1_0.created_by,vp1_0.question,vp1_0.share_count,vp1_0.updated_at,vp1_0.updated_by,vp1_0.view_count,vp1_0.vote_count,vo1_0.vote_post_id,vo1_0.id,vo1_0.created_at,vo1_0.created_by,vo1_0.option_name,vo1_0.updated_at,vo1_0.updated_by,vo1_0.vote_count from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=13
 {executed in 0 msec}
2025-04-26 18:08:59.672 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|
|id |author_id |comment_count |created_at            |created_by |question        |share_count |updated_at            |updated_by |view_count |vote_count |vote_post_id |id |created_at |created_by |option_name |updated_at |updated_by |vote_count |
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|
|13 |1         |9             |2025-04-26 12:44:23.0 |null       |연금 개혁은 옳은것인가?10 |0           |2025-04-26 12:44:23.0 |null       |0          |1          |13           |25 |null       |null       |찬성          |null       |null       |1          |
|13 |1         |9             |2025-04-26 12:44:23.0 |[null]     |연금 개혁은 옳은것인가?10 |0           |2025-04-26 12:44:23.0 |[null]     |0          |1          |13           |26 |null       |null       |반대          |null       |null       |0          |
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|

2025-04-26 18:08:59.677 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        vr1_0.id,
        vr1_0.author_id,
        vr1_0.created_at,
        vr1_0.created_by,
        vr1_0.updated_at,
        vr1_0.updated_by,
        vr1_0.vote_option_id,
        vr1_0.vote_post_id 
    from
        t_vote_record vr1_0 
    where
        vr1_0.author_id=? 
        and vr1_0.vote_post_id=?
2025-04-26 18:08:59.678 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select vr1_0.id,vr1_0.author_id,vr1_0.created_at,vr1_0.created_by,vr1_0.updated_at,vr1_0.updated_by,vr1_0.vote_option_id,vr1_0.vote_post_id from t_vote_record vr1_0 where vr1_0.author_id=1 and vr1_0.vote_post_id=13

2025-04-26 18:08:59.678 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select vr1_0.id,vr1_0.author_id,vr1_0.created_at,vr1_0.created_by,vr1_0.updated_at,vr1_0.updated_by,vr1_0.vote_option_id,vr1_0.vote_post_id from t_vote_record vr1_0 where vr1_0.author_id=1 and vr1_0.vote_post_id=13
 {executed in 0 msec}
2025-04-26 18:08:59.679 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|
|id |author_id |created_at                 |created_by |updated_at                 |updated_by |vote_option_id |vote_post_id |
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|
|4  |1         |2025-04-23 21:40:13.806071 |null       |2025-04-23 21:40:13.806071 |null       |25             |13           |
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|

2025-04-26 18:09:03.788 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:09:03.788 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:09:03.788 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:09:03.790 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:09:03.790 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:09:03.791 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:09:03.795 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:09:03.796 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:09:03.797 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 1 msec}
2025-04-26 18:09:03.798 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:09:03.802 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:09:03.803 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:09:03.805 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:09:03.808 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:09:03.811 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:09:03.812 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:09:03.813 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 1 msec}
2025-04-26 18:09:03.813 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:09:07.934 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:09:07.935 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 18:09:07.936 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:09:07.936 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:09:07.937 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:09:07.938 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:09:07.941 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:09:07.942 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:09:07.943 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:09:07.943 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:09:07.947 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:09:07.948 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:09:07.950 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 2 msec}
2025-04-26 18:09:07.953 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:09:07.955 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:09:07.956 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:09:07.956 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:09:07.957 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:13:36.859 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 21768 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 18:13:36.861 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 18:13:36.862 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 18:13:36.907 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 18:13:36.907 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 18:13:38.539 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 18:13:38.970 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 421 ms. Found 15 JPA repository interfaces.
2025-04-26 18:13:40.123 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 18:13:40.138 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 18:13:40.139 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 18:13:40.252 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 18:13:40.253 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3345 ms
2025-04-26 18:13:40.728 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 18:13:40.815 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 18:13:40.866 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 18:13:41.226 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 18:13:41.266 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 18:13:41.361 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 18:13:41.365 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 18:13:41.366 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@25cbde6b
2025-04-26 18:13:41.369 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 18:13:41.386 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 18:13:41.386 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 18:13:41.401 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 18:13:41.818 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:13:41.819 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:13:41.821 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:13:41.821 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:13:41.822 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 18:13:41.825 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:13:42.957 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 18:13:42.987 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:13:42.988 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:13:42.988 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 18:13:42.989 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 18:13:42.990 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 18:13:42.990 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 18:13:42.991 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 18:13:42.992 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 18:13:43.020 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:13:43.021 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:13:43.033 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 18:13:43.033 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:13:43.033 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:13:43.045 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:13:43.045 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 18:13:43.045 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 18:13:43.057 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 18:13:43.058 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 18:13:43.058 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 18:13:43.070 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 18:13:43.070 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 18:13:43.071 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 18:13:43.083 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 12 msec}
2025-04-26 18:13:43.084 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 18:13:43.084 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 18:13:43.097 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 18:13:43.097 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:13:43.097 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:13:43.108 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 18:13:43.109 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 18:13:43.109 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 18:13:43.121 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 18:13:43.142 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.143 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:13:43.146 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.148 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.149 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.149 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.151 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:13:43.152 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:13:43.152 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:13:43.153 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.153 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.154 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.155 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.156 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 18:13:43.156 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.157 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:13:43.159 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 2 msec}
2025-04-26 18:13:43.159 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:13:43.160 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:13:43.161 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.161 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:13:43.162 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.162 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.163 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.164 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 18:13:43.165 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:13:43.165 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 18:13:43.166 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.166 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.171 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.173 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.174 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.174 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.175 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.176 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.176 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.178 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.178 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.179 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.180 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:13:43.180 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.180 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:13:43.182 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.182 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.183 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.184 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 18:13:43.184 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.184 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 18:13:43.186 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.186 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.187 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.187 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:13:43.188 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 1 msec}
2025-04-26 18:13:43.188 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:13:43.189 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:13:43.189 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.189 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:13:43.191 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.191 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.191 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.193 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.193 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.193 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.194 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:13:43.195 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.195 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:13:43.197 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 18:13:43.197 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.198 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 18:13:43.198 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 18:13:43.198 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.198 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 18:13:43.199 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 18:13:43.200 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 18:13:43.200 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 18:13:43.202 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 18:13:43.618 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 18:13:44.751 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 18:13:44.751 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 18:13:45.538 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 18:13:46.330 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@faced6a. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:13:46.331 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 18:13:46.691 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 18:13:46.762 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 18:13:46.773 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.635 seconds (process running for 11.316)
2025-04-26 18:13:50.049 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 18:13:50.049 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 18:13:50.051 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 18:13:50.316 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:13:50.317 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:13:50.361 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:13:50.364 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:13:50.364 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:13:50.376 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:13:50.764 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:13:50.764 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:13:50.765 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:13:50.766 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:13:51.030 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:13:51.031 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:13:51.033 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:13:51.039 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |0          |true                                                                                                                                                                                                                                                   |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:13:51.064 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:13:51.065 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:13:51.066 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:13:51.067 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 18:13:52.067 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:13:52.069 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 18:13:52.070 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:13:52.070 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:13:52.071 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:13:52.072 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:13:52.072 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:13:52.073 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:13:52.073 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 18:13:52.074 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:13:52.095 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        voteComments.id as commentId,
        voteComments.author.id as authorId,
        voteComments.author.name as authorName,
        (voteComments.author.id = ?1) as isMine,
        voteComments.content,
        voteComments.createdAt,
        voteComments.updatedAt 
    from
        VoteComments voteComments 
    where
        voteComments.votePost.id = ?2 
    order by
        voteComments.createdAt desc */ select
            vc1_0.id,
            vc1_0.author_id,
            a1_0.name,
            (vc1_0.author_id=cast(? as signed)),
            vc1_0.content,
            vc1_0.created_at,
            vc1_0.updated_at 
        from
            t_vote_comments vc1_0 
        join
            t_member a1_0 
                on a1_0.id=vc1_0.author_id 
        where
            vc1_0.vote_post_id=? 
        order by
            vc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:13:52.096 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select voteComments.id as commentId, voteComments.author.id as authorId, voteComments.author.name as authorName, (voteComments.author.id = 11) as isMine, voteComments.content, voteComments.createdAt, voteComments.updatedAt
from VoteComments voteComments
where voteComments.votePost.id = 132
order by voteComments.createdAt desc */ select vc1_0.id,vc1_0.author_id,a1_0.name,(vc1_0.author_id=cast(0 as signed)),vc1_0.content,vc1_0.created_at,vc1_0.updated_at from t_vote_comments vc1_0 join t_member a1_0 on a1_0.id=vc1_0.author_id where vc1_0.vote_post_id=10 order by vc1_0.created_at desc limit ?,?

2025-04-26 18:13:52.097 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select voteComments.id as commentId, voteComments.author.id as authorId, voteComments.author.name as authorName, (voteComments.author.id = 11) as isMine, voteComments.content, voteComments.createdAt, voteComments.updatedAt
from VoteComments voteComments
where voteComments.votePost.id = 132
order by voteComments.createdAt desc */ select vc1_0.id,vc1_0.author_id,a1_0.name,(vc1_0.author_id=cast(0 as signed)),vc1_0.content,vc1_0.created_at,vc1_0.updated_at from t_vote_comments vc1_0 join t_member a1_0 on a1_0.id=vc1_0.author_id where vc1_0.vote_post_id=10 order by vc1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 18:13:52.099 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|
|id |author_id |name |(vc1_0.author_id=cast(1 as signed)) |content               |created_at                 |updated_at                 |
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|
|9  |1         |김민재  |true                                |zzzzzzzzzzzzz         |2025-04-23 21:39:46.336268 |2025-04-23 21:39:46.336268 |
|8  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzz    |2025-04-23 21:39:44.83791  |2025-04-23 21:39:44.83791  |
|7  |1         |김민재  |true                                |zzzzzzzzzzzzzzzz      |2025-04-23 21:39:43.137284 |2025-04-23 21:39:43.137284 |
|6  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzzz   |2025-04-23 21:39:41.484343 |2025-04-23 21:39:41.484343 |
|5  |1         |김민재  |true                                |zzzzzzzzzzzzzzzzzzzzz |2025-04-23 21:39:39.072863 |2025-04-23 21:39:39.072863 |
|4  |1         |김민재  |true                                |z                     |2025-04-23 21:39:35.363096 |2025-04-23 21:39:35.363096 |
|3  |1         |김민재  |true                                |z                     |2025-04-23 21:39:34.420945 |2025-04-23 21:39:34.420945 |
|---|----------|-----|------------------------------------|----------------------|---------------------------|---------------------------|

2025-04-26 18:13:52.102 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        count(voteComments) 
    from
        VoteComments voteComments 
    where
        voteComments.votePost.id = ?1 */ select
            count(vc1_0.id) 
        from
            t_vote_comments vc1_0 
        where
            vc1_0.vote_post_id=?
2025-04-26 18:13:52.102 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(voteComments)
from VoteComments voteComments
where voteComments.votePost.id = 131 */ select count(vc1_0.id) from t_vote_comments vc1_0 where vc1_0.vote_post_id=?

2025-04-26 18:13:52.104 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(voteComments)
from VoteComments voteComments
where voteComments.votePost.id = 131 */ select count(vc1_0.id) from t_vote_comments vc1_0 where vc1_0.vote_post_id=?
 {executed in 1 msec}
2025-04-26 18:13:52.104 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|----------------|
|count(vc1_0.id) |
|----------------|
|7               |
|----------------|

2025-04-26 18:13:52.115 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 18:13:52.116 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 18:13:52.116 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 18:13:52.119 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:13:52.137 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        vp1_0.id,
        vp1_0.author_id,
        vp1_0.comment_count,
        vp1_0.created_at,
        vp1_0.created_by,
        vp1_0.question,
        vp1_0.share_count,
        vp1_0.updated_at,
        vp1_0.updated_by,
        vp1_0.view_count,
        vp1_0.vote_count,
        vo1_0.vote_post_id,
        vo1_0.id,
        vo1_0.created_at,
        vo1_0.created_by,
        vo1_0.option_name,
        vo1_0.updated_at,
        vo1_0.updated_by,
        vo1_0.vote_count 
    from
        t_vote_post vp1_0 
    left join
        t_vote_option vo1_0 
            on vp1_0.id=vo1_0.vote_post_id 
    where
        vp1_0.id=?
2025-04-26 18:13:52.138 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select vp1_0.id,vp1_0.author_id,vp1_0.comment_count,vp1_0.created_at,vp1_0.created_by,vp1_0.question,vp1_0.share_count,vp1_0.updated_at,vp1_0.updated_by,vp1_0.view_count,vp1_0.vote_count,vo1_0.vote_post_id,vo1_0.id,vo1_0.created_at,vo1_0.created_by,vo1_0.option_name,vo1_0.updated_at,vo1_0.updated_by,vo1_0.vote_count from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=13

2025-04-26 18:13:52.139 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select vp1_0.id,vp1_0.author_id,vp1_0.comment_count,vp1_0.created_at,vp1_0.created_by,vp1_0.question,vp1_0.share_count,vp1_0.updated_at,vp1_0.updated_by,vp1_0.view_count,vp1_0.vote_count,vo1_0.vote_post_id,vo1_0.id,vo1_0.created_at,vo1_0.created_by,vo1_0.option_name,vo1_0.updated_at,vo1_0.updated_by,vo1_0.vote_count from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id=13
 {executed in 1 msec}
2025-04-26 18:13:52.154 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|
|id |author_id |comment_count |created_at            |created_by |question        |share_count |updated_at            |updated_by |view_count |vote_count |vote_post_id |id |created_at |created_by |option_name |updated_at |updated_by |vote_count |
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|
|13 |1         |9             |2025-04-26 12:44:23.0 |null       |연금 개혁은 옳은것인가?10 |0           |2025-04-26 12:44:23.0 |null       |0          |1          |13           |25 |null       |null       |찬성          |null       |null       |1          |
|13 |1         |9             |2025-04-26 12:44:23.0 |[null]     |연금 개혁은 옳은것인가?10 |0           |2025-04-26 12:44:23.0 |[null]     |0          |1          |13           |26 |null       |null       |반대          |null       |null       |0          |
|---|----------|--------------|----------------------|-----------|----------------|------------|----------------------|-----------|-----------|-----------|-------------|---|-----------|-----------|------------|-----------|-----------|-----------|

2025-04-26 18:13:52.179 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.vote.entity.VoteViewHistory */insert 
    into
        t_vote_post_view_history (created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at, vote_post_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 18:13:52.182 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.vote.entity.VoteViewHistory */insert into t_vote_post_view_history (created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at,vote_post_id) values ('04/26/2025 18:13:52.155',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 18:13:52.155',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 18:13:52.155',13) returning id

2025-04-26 18:13:52.183 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. /* insert for com.tomato.naraclub.application.vote.entity.VoteViewHistory */insert into t_vote_post_view_history (created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at,vote_post_id) values ('04/26/2025 18:13:52.155',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 18:13:52.155',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 18:13:52.155',13) returning id
 {executed in 0 msec}
2025-04-26 18:13:52.193 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|1  |
|---|

2025-04-26 18:13:52.212 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.vote.entity.VotePost */update t_vote_post 
    set
        author_id=?,
        comment_count=?,
        question=?,
        share_count=?,
        updated_at=?,
        updated_by=?,
        view_count=?,
        vote_count=? 
    where
        id=?
2025-04-26 18:13:52.213 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.vote.entity.VotePost */update t_vote_post set author_id=1,comment_count=9,question='연금 개혁은 옳은것인가?10',share_count=0,updated_at='04/26/2025 12:44:23.000',updated_by=NULL,view_count=1,vote_count=1 where id=13

2025-04-26 18:13:52.214 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update for com.tomato.naraclub.application.vote.entity.VotePost */update t_vote_post set author_id=1,comment_count=9,question='연금 개혁은 옳은것인가?10',share_count=0,updated_at='04/26/2025 12:44:23.000',updated_by=NULL,view_count=1,vote_count=1 where id=13
 {executed in 1 msec}
2025-04-26 18:13:52.219 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        vr1_0.id,
        vr1_0.author_id,
        vr1_0.created_at,
        vr1_0.created_by,
        vr1_0.updated_at,
        vr1_0.updated_by,
        vr1_0.vote_option_id,
        vr1_0.vote_post_id 
    from
        t_vote_record vr1_0 
    where
        vr1_0.author_id=? 
        and vr1_0.vote_post_id=?
2025-04-26 18:13:52.219 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select vr1_0.id,vr1_0.author_id,vr1_0.created_at,vr1_0.created_by,vr1_0.updated_at,vr1_0.updated_by,vr1_0.vote_option_id,vr1_0.vote_post_id from t_vote_record vr1_0 where vr1_0.author_id=1 and vr1_0.vote_post_id=13

2025-04-26 18:13:52.220 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select vr1_0.id,vr1_0.author_id,vr1_0.created_at,vr1_0.created_by,vr1_0.updated_at,vr1_0.updated_by,vr1_0.vote_option_id,vr1_0.vote_post_id from t_vote_record vr1_0 where vr1_0.author_id=1 and vr1_0.vote_post_id=13
 {executed in 1 msec}
2025-04-26 18:13:52.221 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|
|id |author_id |created_at                 |created_by |updated_at                 |updated_by |vote_option_id |vote_post_id |
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|
|4  |1         |2025-04-23 21:40:13.806071 |null       |2025-04-23 21:40:13.806071 |null       |25             |13           |
|---|----------|---------------------------|-----------|---------------------------|-----------|---------------|-------------|

2025-04-26 18:13:53.562 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 18:13:53.563 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 18:13:53.564 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 18:13:53.564 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 18:13:53.565 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 18:13:53.566 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 18:13:53.570 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 18:13:53.571 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10

2025-04-26 18:13:53.571 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,10
 {executed in 0 msec}
2025-04-26 18:13:53.572 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|9  |
|8  |
|7  |
|6  |
|5  |
|4  |
|---|

2025-04-26 18:13:53.575 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 18:13:53.576 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc

2025-04-26 18:13:53.577 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (9,8,7,6,5,4,?,?,?,?) order by vp1_0.created_at desc
 {executed in 1 msec}
2025-04-26 18:13:53.581 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |1          |false                                                                                                                                                                                                                                                  |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |1          |false                                                                                                                                                                                                                                                  |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |17 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|9  |1         |연금 개혁은 옳은것인가?6  |18 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:41.0 |2025-04-23 20:11:41.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |15 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|8  |1         |연금 개혁은 옳은것인가?5  |16 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:23.0 |2025-04-23 20:11:23.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |13 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|7  |1         |연금 개혁은 옳은것인가?4  |14 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:14.0 |2025-04-23 20:11:14.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |11 |찬성          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|6  |1         |연금 개혁은 옳은것인가?3  |12 |반대          |0          |null       |null       |0             |5          |false                                                                                                                                                                                                                                                  |2025-04-23 20:11:04.0 |2025-04-23 20:11:04.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |9  |찬성          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|5  |1         |연금 개혁은 옳은것인가?2  |10 |반대          |0          |null       |null       |0             |4          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:51.0 |2025-04-23 20:10:51.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |7  |찬성          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|4  |1         |연금 개혁은 옳은것인가?1  |8  |반대          |0          |null       |null       |0             |3          |false                                                                                                                                                                                                                                                  |2025-04-23 20:10:39.0 |2025-04-23 20:10:39.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 18:13:53.583 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 18:13:53.583 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 18:13:53.584 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 18:13:53.584 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 20:16:45.910 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 30472 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 20:16:45.912 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 20:16:45.913 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 20:16:45.962 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 20:16:45.962 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 20:16:47.651 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 20:16:48.092 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 432 ms. Found 15 JPA repository interfaces.
2025-04-26 20:16:49.378 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 20:16:49.397 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 20:16:49.397 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 20:16:49.524 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 20:16:49.524 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3561 ms
2025-04-26 20:16:50.028 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 20:16:50.134 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 20:16:50.196 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 20:16:50.586 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 20:16:50.625 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 20:16:50.726 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 20:16:50.731 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 5 msec}
2025-04-26 20:16:50.733 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@48c4727
2025-04-26 20:16:50.735 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 20:16:50.753 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 20:16:50.753 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 20:16:50.767 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 20:16:51.229 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 20:16:51.231 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 20:16:51.231 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 20:16:51.233 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 20:16:51.233 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 20:16:51.236 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 20:16:52.412 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 20:16:52.446 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:16:52.447 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:16:52.447 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 20:16:52.448 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 20:16:52.449 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 20:16:52.449 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 20:16:52.450 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 20:16:52.451 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 20:16:52.483 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 20:16:52.483 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 20:16:52.497 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 13 msec}
2025-04-26 20:16:52.498 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 20:16:52.498 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 20:16:52.510 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 20:16:52.510 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 20:16:52.511 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 20:16:52.523 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 12 msec}
2025-04-26 20:16:52.524 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 20:16:52.524 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 20:16:52.536 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 20:16:52.536 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 20:16:52.536 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 20:16:52.550 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 20:16:52.550 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 20:16:52.551 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 20:16:52.562 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 20:16:52.563 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 20:16:52.563 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 20:16:52.576 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 20:16:52.578 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_view_history 
       add column device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)'
2025-04-26 20:16:52.578 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)'

2025-04-26 20:16:52.592 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column device_type varchar(20) not null comment '디바이스 유형 (MOBILE, TABLET, DESKTOP 등)'
 {executed in 14 msec}
2025-04-26 20:16:52.593 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_view_history 
       add column ip_address varchar(45) not null comment '조회자 IP 주소'
2025-04-26 20:16:52.593 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column ip_address varchar(45) not null comment '조회자 IP 주소'

2025-04-26 20:16:52.611 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column ip_address varchar(45) not null comment '조회자 IP 주소'
 {executed in 18 msec}
2025-04-26 20:16:52.612 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_view_history 
       add column user_agent varchar(512) not null comment 'User-Agent 헤더 전체'
2025-04-26 20:16:52.612 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column user_agent varchar(512) not null comment 'User-Agent 헤더 전체'

2025-04-26 20:16:52.627 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column user_agent varchar(512) not null comment 'User-Agent 헤더 전체'
 {executed in 15 msec}
2025-04-26 20:16:52.627 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_view_history 
       add column reader_id bigint not null
2025-04-26 20:16:52.628 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column reader_id bigint not null

2025-04-26 20:16:52.643 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add column reader_id bigint not null
 {executed in 15 msec}
2025-04-26 20:16:52.643 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 20:16:52.644 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 20:16:52.657 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 20:16:52.690 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.690 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.693 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.697 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.698 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 20:16:52.699 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.701 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 20:16:52.702 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 20:16:52.702 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 20:16:52.703 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.703 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.704 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.706 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.707 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.707 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.709 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 20:16:52.710 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 20:16:52.710 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 20:16:52.713 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 20:16:52.714 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.714 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 20:16:52.715 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.715 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.716 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.718 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 20:16:52.719 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.719 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 20:16:52.720 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.721 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.721 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.723 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.724 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 20:16:52.724 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.726 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.726 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.727 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.729 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.729 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.730 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.731 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 20:16:52.731 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.731 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 20:16:52.733 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.735 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.735 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.736 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 20:16:52.737 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.737 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 20:16:52.738 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_view_history 
       add constraint FKsm0witk04625b4hkx6m3kodtg 
       foreign key (reader_id) 
       references t_member (id)
2025-04-26 20:16:52.738 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add constraint FKsm0witk04625b4hkx6m3kodtg 
       foreign key (reader_id) 
       references t_member (id)

2025-04-26 20:16:52.768 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_view_history 
       add constraint FKsm0witk04625b4hkx6m3kodtg 
       foreign key (reader_id) 
       references t_member (id)
 {executed in 29 msec}
2025-04-26 20:16:52.770 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.771 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.772 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.773 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 20:16:52.773 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.774 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 20:16:52.775 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 20:16:52.776 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.776 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 20:16:52.778 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.778 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.779 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.781 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.781 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.781 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.783 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 20:16:52.783 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.783 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 20:16:52.785 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 20:16:52.786 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 20:16:52.786 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 20:16:52.788 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 20:16:52.788 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.788 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 20:16:52.790 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 20:16:52.790 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 20:16:52.790 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 20:16:52.793 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 20:16:53.324 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 20:16:54.784 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 20:16:54.785 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 20:16:55.499 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 20:16:56.521 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@22aad27e. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 20:16:56.522 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 20:16:56.882 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 20:16:56.972 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 20:16:56.983 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 11.905 seconds (process running for 12.617)
2025-04-26 20:17:03.528 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 20:17:03.529 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 20:17:03.530 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 20:17:03.825 ERROR [http-nio-8080-exec-3] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 20:17:04.020 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* <criteria> */ select
        rt1_0.id,
        rt1_0.created_at,
        rt1_0.created_by,
        rt1_0.device_type,
        rt1_0.expiry_date,
        rt1_0.ip_address,
        rt1_0.last_used_at,
        rt1_0.member_id,
        rt1_0.refresh_token,
        rt1_0.updated_at,
        rt1_0.updated_by,
        rt1_0.user_agent 
    from
        t_refresh_token rt1_0 
    where
        rt1_0.refresh_token=?
2025-04-26 20:17:04.020 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:04.021 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:17:04.023 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'

2025-04-26 20:17:04.024 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'
 {executed in 1 msec}
2025-04-26 20:17:04.045 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|id |created_at |created_by |device_type |expiry_date           |ip_address      |last_used_at               |member_id |refresh_token                                                                                                                                                                     |updated_at |updated_by |user_agent                                                                                                                          |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|6  |null       |null       |null        |2025-05-10 16:00:25.0 |0:0:0:0:0:0:0:1 |2025-04-26 18:03:23.823446 |1         |eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk |null       |null       |Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36 |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:04.059 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:04.060 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:04.061 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 20:17:04.064 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:04.133 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token 
    set
        device_type=?,
        expiry_date=?,
        ip_address=?,
        last_used_at=?,
        member_id=?,
        refresh_token=?,
        updated_at=?,
        updated_by=?,
        user_agent=? 
    where
        id=?
2025-04-26 20:17:04.136 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 20:17:04.097',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6

2025-04-26 20:17:04.137 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 20:17:04.097',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6
 {executed in 1 msec}
2025-04-26 20:17:04.192 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:04.192 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:04.193 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 20:17:04.194 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:04.678 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    where
        video.type = ?4 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:04.679 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:04.683 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?
 {executed in 4 msec}
2025-04-26 20:17:04.684 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:04.705 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 20:17:04.706 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 20:17:04.708 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 1 msec}
2025-04-26 20:17:04.708 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 20:17:06.906 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:06.907 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:17:06.908 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:06.908 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:06.908 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 20:17:06.909 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:06.914 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    where
        video.type = ?4 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:06.915 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_SHORTS'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:06.916 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_SHORTS'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?
 {executed in 0 msec}
2025-04-26 20:17:06.916 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:06.916 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 20:17:06.916 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_SHORTS'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 20:17:06.917 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_SHORTS'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 0 msec}
2025-04-26 20:17:06.917 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 20:17:07.784 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:07.784 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:17:07.785 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:07.785 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:07.785 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 20:17:07.786 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:07.789 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    where
        video.type = ?4 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:07.790 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'NEWS_ARTICLE'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:07.791 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'NEWS_ARTICLE'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 20:17:07.791 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:07.793 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 20:17:07.793 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'NEWS_ARTICLE'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 20:17:07.794 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'NEWS_ARTICLE'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 0 msec}
2025-04-26 20:17:07.794 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 20:17:09.253 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:09.254 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:17:09.254 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:09.254 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:09.255 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 20:17:09.256 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:09.259 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    where
        video.type = ?4 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:09.260 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:09.261 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 20:17:09.261 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:09.263 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 20:17:09.263 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 20:17:09.263 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 0 msec}
2025-04-26 20:17:09.263 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 20:17:12.092 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:12.092 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 20:17:12.093 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:12.093 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:12.093 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 20:17:12.094 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:12.103 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:12.105 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(1 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:12.106 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(1 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id order by v1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 20:17:12.107 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:12.109 DEBUG [http-nio-8080-exec-10] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video */ select
            count(v1_0.id) 
        from
            t_video v1_0
2025-04-26 20:17:12.110 DEBUG [http-nio-8080-exec-10] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0

2025-04-26 20:17:12.111 DEBUG [http-nio-8080-exec-10] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video */ select count(v1_0.id) from t_video v1_0
 {executed in 0 msec}
2025-04-26 20:17:12.111 INFO  [http-nio-8080-exec-10] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 20:17:12.142 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:12.143 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:12.143 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 20:17:12.144 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:12.157 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:12.158 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 20:17:12.159 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(4 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 20:17:12.161 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |false  |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |false  |2025-04-23 20:32:34.019068 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 20:17:12.164 DEBUG [http-nio-8080-exec-4] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 20:17:12.164 DEBUG [http-nio-8080-exec-4] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 20:17:12.165 DEBUG [http-nio-8080-exec-4] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 0 msec}
2025-04-26 20:17:12.165 INFO  [http-nio-8080-exec-4] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 20:17:12.182 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:12.182 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:12.186 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 3 msec}
2025-04-26 20:17:12.188 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:12.201 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        votePost.id 
    from
        VotePost votePost 
    order by
        votePost.createdAt desc */ select
            vp1_0.id 
        from
            t_vote_post vp1_0 
        order by
            vp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:12.202 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4

2025-04-26 20:17:12.203 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id
from VotePost votePost
order by votePost.createdAt desc */ select vp1_0.id from t_vote_post vp1_0 order by vp1_0.created_at desc limit 0,4
 {executed in 1 msec}
2025-04-26 20:17:12.203 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|
|id |
|---|
|13 |
|12 |
|11 |
|10 |
|---|

2025-04-26 20:17:12.334 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        votePost.id,
        votePost.id as votePostId,
        votePost.author.id as authorId,
        votePost.question,
        voteOption.id as optionId,
        voteOption.optionName,
        voteOption.voteCount,
        voteOption.createdAt,
        voteOption.updatedAt,
        votePost.commentCount,
        votePost.viewCount,
        (votePost.createdAt >= ?1 
        and votePost.createdAt < ?2 
        and not exists (select
            1 
        from
            VoteViewHistory voteViewHistory 
        where
            voteViewHistory.reader.id = ?3 
            and voteViewHistory.votePost.id = votePost.id)) as new,
        votePost.createdAt,
        votePost.updatedAt 
    from
        VotePost votePost   
    left join
        votePost.voteOptions as voteOption 
    where
        votePost.id in ?4 
    order by
        votePost.createdAt desc */ select
            vp1_0.id,
            vp1_0.author_id,
            vp1_0.question,
            vo1_0.id,
            vo1_0.option_name,
            vo1_0.vote_count,
            vo1_0.created_at,
            vo1_0.updated_at,
            vp1_0.comment_count,
            vp1_0.view_count,
            (vp1_0.created_at>=cast(? as datetime(6)) 
            and vp1_0.created_at<cast(? as datetime(6)) 
            and not exists(select
                1 
            from
                t_vote_post_view_history vvh1_0 
            where
                vvh1_0.reader_id=? 
                and vvh1_0.vote_post_id=vp1_0.id)),
            vp1_0.created_at,
            vp1_0.updated_at 
        from
            t_vote_post vp1_0 
        left join
            t_vote_option vo1_0 
                on vp1_0.id=vo1_0.vote_post_id 
        where
            vp1_0.id in (?, ?, ?, ?) 
        order by
            vp1_0.created_at desc
2025-04-26 20:17:12.335 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (?,?,?,?) order by vp1_0.created_at desc

2025-04-26 20:17:12.337 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select votePost.id, votePost.id as votePostId, votePost.author.id as authorId, votePost.question, voteOption.id as optionId, voteOption.optionName, voteOption.voteCount, voteOption.createdAt, voteOption.updatedAt, votePost.commentCount, votePost.viewCount, (votePost.createdAt >= '04/26/2025 00:00:00.000'1 and votePost.createdAt < '04/27/2025 00:00:00.000'2 and not exists (select 1
from VoteViewHistory voteViewHistory
where voteViewHistory.reader.id = 13 and voteViewHistory.votePost.id = votePost.id)) as new, votePost.createdAt, votePost.updatedAt
from VotePost votePost
  left join votePost.voteOptions as voteOption
where votePost.id in 134
order by votePost.createdAt desc */ select vp1_0.id,vp1_0.author_id,vp1_0.question,vo1_0.id,vo1_0.option_name,vo1_0.vote_count,vo1_0.created_at,vo1_0.updated_at,vp1_0.comment_count,vp1_0.view_count,(vp1_0.created_at>=cast(12 as datetime(6)) and vp1_0.created_at<cast(11 as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=10 and vvh1_0.vote_post_id=vp1_0.id)),vp1_0.created_at,vp1_0.updated_at from t_vote_post vp1_0 left join t_vote_option vo1_0 on vp1_0.id=vo1_0.vote_post_id where vp1_0.id in (?,?,?,?) order by vp1_0.created_at desc
 {executed in 0 msec}
2025-04-26 20:17:12.338 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|id |author_id |question        |id |option_name |vote_count |created_at |updated_at |comment_count |view_count |(vp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and vp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and not exists(select 1 from t_vote_post_view_history vvh1_0 where vvh1_0.reader_id=1 and vvh1_0.vote_post_id=vp1_0.id)) |created_at            |updated_at            |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|
|13 |1         |연금 개혁은 옳은것인가?10 |25 |찬성          |1          |null       |null       |9             |1          |false                                                                                                                                                                                                                                                  |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|13 |1         |연금 개혁은 옳은것인가?10 |26 |반대          |0          |null       |null       |9             |1          |false                                                                                                                                                                                                                                                  |2025-04-26 12:44:23.0 |2025-04-26 12:44:23.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |23 |찬성          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|12 |1         |연금 개혁은 옳은것인가?9  |24 |반대          |0          |null       |null       |1             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:44:13.0 |2025-04-23 20:44:13.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |21 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|11 |1         |연금 개혁은 옳은것인가?8  |22 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:44.0 |2025-04-23 20:43:44.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |19 |찬성          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|10 |1         |연금 개혁은 옳은것인가?7  |20 |반대          |0          |null       |null       |0             |0          |false                                                                                                                                                                                                                                                  |2025-04-23 20:43:29.0 |2025-04-23 20:43:29.0 |
|---|----------|----------------|---|------------|-----------|-----------|-----------|--------------|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|----------------------|

2025-04-26 20:17:12.343 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* select
        count(votePost) 
    from
        VotePost votePost */ select
            count(vp1_0.id) 
        from
            t_vote_post vp1_0
2025-04-26 20:17:12.344 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0

2025-04-26 20:17:12.344 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(votePost)
from VotePost votePost */ select count(vp1_0.id) from t_vote_post vp1_0
 {executed in 0 msec}
2025-04-26 20:17:12.344 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|----------------|
|count(vp1_0.id) |
|----------------|
|11              |
|----------------|

2025-04-26 20:17:12.934 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 20:17:12.935 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 20:17:12.936 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 20:17:12.936 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 20:17:12.936 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 20:17:12.937 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 20:17:12.941 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        video.id as videoId,
        video.title,
        video.description,
        video.type,
        video.category,
        video.thumbnailUrl,
        video.videoUrl,
        video.durationSec,
        video.viewCount,
        video.isPublic as isPublic,
        video.publishedAt,
        video.isHot as isHot,
        (video.createdAt >= ?1 
        and video.createdAt < ?2 
        and videoViewHistory.id is null) as isNew 
    from
        Video video   
    left join
        VideoViewHistory videoViewHistory 
            on videoViewHistory.reader.id = ?3 
            and videoViewHistory.video.id = video.id 
    where
        video.type = ?4 
    order by
        video.createdAt desc */ select
            v1_0.id,
            v1_0.title,
            v1_0.description,
            v1_0.type,
            v1_0.category,
            v1_0.image_url,
            v1_0.video_url,
            v1_0.duration_sec,
            v1_0.view_count,
            v1_0.is_public,
            v1_0.published_at,
            v1_0.is_hot,
            (v1_0.created_at>=cast(? as datetime(6)) 
            and v1_0.created_at<cast(? as datetime(6)) 
            and vvh1_0.id is null) 
        from
            t_video v1_0 
        left join
            t_video_view_history vvh1_0 
                on vvh1_0.reader_id=? 
                and vvh1_0.video_id=v1_0.id 
        where
            v1_0.type=? 
        order by
            v1_0.created_at desc 
        limit
            ?, ?
2025-04-26 20:17:12.942 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?

2025-04-26 20:17:12.943 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select video.id as videoId, video.title, video.description, video.type, video.category, video.thumbnailUrl, video.videoUrl, video.durationSec, video.viewCount, video.isPublic as isPublic, video.publishedAt, video.isHot as isHot, (video.createdAt >= '04/26/2025 00:00:00.000'1 and video.createdAt < '04/27/2025 00:00:00.000'2 and videoViewHistory.id is null) as isNew
from Video video
  left join VideoViewHistory videoViewHistory on videoViewHistory.reader.id = 13 and videoViewHistory.video.id = video.id
where video.type = 'YOUTUBE_VIDEO'4
order by video.createdAt desc */ select v1_0.id,v1_0.title,v1_0.description,v1_0.type,v1_0.category,v1_0.image_url,v1_0.video_url,v1_0.duration_sec,v1_0.view_count,v1_0.is_public,v1_0.published_at,v1_0.is_hot,(v1_0.created_at>=cast(0 as datetime(6)) and v1_0.created_at<cast(4 as datetime(6)) and vvh1_0.id is null) from t_video v1_0 left join t_video_view_history vvh1_0 on vvh1_0.reader_id=? and vvh1_0.video_id=v1_0.id where v1_0.type=? order by v1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 20:17:12.943 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|id |title |description |type |category |image_url |video_url |duration_sec |view_count |is_public |published_at |is_hot |(v1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and v1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and vvh1_0.id is null) |
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|
|---|------|------------|-----|---------|----------|----------|-------------|-----------|----------|-------------|-------|---------------------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 20:17:12.944 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* select
        count(video) 
    from
        Video video 
    where
        video.type = ?1 */ select
            count(v1_0.id) 
        from
            t_video v1_0 
        where
            v1_0.type=?
2025-04-26 20:17:12.944 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?

2025-04-26 20:17:12.945 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(video)
from Video video
where video.type = 'YOUTUBE_VIDEO'1 */ select count(v1_0.id) from t_video v1_0 where v1_0.type=?
 {executed in 0 msec}
2025-04-26 20:17:12.945 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---------------|
|count(v1_0.id) |
|---------------|
|0              |
|---------------|

2025-04-26 21:05:24.715 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 15420 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 21:05:24.716 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 21:05:24.717 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 21:05:24.765 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 21:05:24.765 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 21:05:26.360 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 21:05:26.774 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 405 ms. Found 15 JPA repository interfaces.
2025-04-26 21:05:27.908 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 21:05:27.922 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 21:05:27.923 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 21:05:28.039 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 21:05:28.039 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3273 ms
2025-04-26 21:05:28.569 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 21:05:28.649 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 21:05:28.694 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 21:05:29.073 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 21:05:29.114 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 21:05:29.215 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 21:05:29.218 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 21:05:29.219 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@52d718db
2025-04-26 21:05:29.221 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 21:05:29.239 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 21:05:29.240 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 1 msec}
2025-04-26 21:05:29.255 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 21:05:29.726 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:05:29.729 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 21:05:29.729 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:05:29.730 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:05:29.731 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 21:05:29.733 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:05:30.913 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 21:05:30.940 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:05:30.940 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:05:30.941 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:05:30.942 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 21:05:30.942 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:05:30.942 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:05:30.943 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 21:05:30.944 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:05:30.970 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:05:30.971 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:05:30.983 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:05:30.984 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:05:30.984 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:05:30.997 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 21:05:30.997 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 21:05:30.997 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 21:05:31.010 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 12 msec}
2025-04-26 21:05:31.010 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 21:05:31.011 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 21:05:31.022 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 21:05:31.022 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 21:05:31.022 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 21:05:31.035 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 21:05:31.035 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:05:31.035 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:05:31.047 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:05:31.047 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:05:31.047 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:05:31.060 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 13 msec}
2025-04-26 21:05:31.060 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:05:31.060 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:05:31.071 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:05:31.098 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.098 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.101 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.104 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.104 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.105 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.107 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:05:31.107 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.108 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:05:31.109 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.109 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.110 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.111 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.112 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:05:31.112 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.114 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:05:31.114 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.114 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:05:31.116 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:05:31.116 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.117 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:05:31.118 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.118 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.118 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.120 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:05:31.120 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.120 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:05:31.121 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.122 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.122 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.123 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.124 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:05:31.124 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.125 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.126 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.126 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.127 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.127 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.127 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.129 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:05:31.130 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.130 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:05:31.132 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.132 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.133 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.134 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.134 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.134 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.135 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:05:31.135 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.136 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:05:31.137 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.137 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.138 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.138 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:05:31.139 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.139 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:05:31.140 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:05:31.140 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.140 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:05:31.142 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.142 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.142 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.144 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.144 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.144 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.145 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:05:31.145 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.146 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:05:31.147 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:05:31.147 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.149 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:05:31.149 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 21:05:31.150 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 1 msec}
2025-04-26 21:05:31.150 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 21:05:31.151 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:05:31.151 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:05:31.151 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:05:31.153 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:05:31.597 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 21:05:32.045 INFO  [restartedMain] o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-26 21:05:32.589 WARN  [restartedMain] o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\controller\BoardPostController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
2025-04-26 21:05:32.590 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:05:32.593 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 21:05:32.597 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 21:05:32.600 INFO  [restartedMain] o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-26 21:05:32.618 INFO  [restartedMain] o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-26 21:05:32.654 ERROR [restartedMain] o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\controller\BoardPostController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:755)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1364)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1353)
	at com.tomato.naraclub.NaraclubApplication.main(NaraclubApplication.java:12)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 22 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 36 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:119)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:103)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:92)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:92)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:290)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:296)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAt(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:107)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:124)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:258)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	... 59 common frames omitted
Caused by: org.springframework.data.mapping.PropertyReferenceException: No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:94)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:455)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:431)
	at org.springframework.data.mapping.PropertyPath.lambda$from$0(PropertyPath.java:384)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:366)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:344)
	at org.springframework.data.repository.query.parser.OrderBySource.lambda$createOrder$2(OrderBySource.java:112)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.query.parser.OrderBySource.createOrder(OrderBySource.java:110)
	at org.springframework.data.repository.query.parser.OrderBySource.<init>(OrderBySource.java:94)
	at org.springframework.data.repository.query.parser.PartTree$Predicate.<init>(PartTree.java:392)
	at org.springframework.data.repository.query.parser.PartTree.<init>(PartTree.java:103)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:101)
	... 63 common frames omitted
2025-04-26 21:06:42.373 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 21308 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 21:06:42.374 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 21:06:42.375 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 21:06:42.425 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 21:06:42.426 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 21:06:44.033 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 21:06:44.458 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 416 ms. Found 15 JPA repository interfaces.
2025-04-26 21:06:45.635 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 21:06:45.651 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 21:06:45.651 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 21:06:45.764 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 21:06:45.765 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3339 ms
2025-04-26 21:06:46.262 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 21:06:46.346 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 21:06:46.394 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 21:06:46.779 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 21:06:46.817 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 21:06:46.915 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 21:06:46.920 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 2 msec}
2025-04-26 21:06:46.921 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@71b6ba39
2025-04-26 21:06:46.923 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 21:06:46.939 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 21:06:46.940 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 1 msec}
2025-04-26 21:06:46.953 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 21:06:47.379 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:06:47.381 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 21:06:47.382 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:06:47.383 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:06:47.383 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:06:47.386 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:06:48.505 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 21:06:48.530 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:06:48.530 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:06:48.531 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:06:48.532 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 21:06:48.532 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:06:48.533 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:06:48.533 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:06:48.535 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:06:48.560 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:06:48.560 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:06:48.572 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:06:48.573 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:06:48.573 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:06:48.585 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:06:48.585 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 21:06:48.586 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 21:06:48.598 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 21:06:48.598 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 21:06:48.599 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 21:06:48.611 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 21:06:48.611 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 21:06:48.612 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 21:06:48.625 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 21:06:48.625 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:06:48.626 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:06:48.637 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 21:06:48.638 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:06:48.638 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:06:48.651 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 21:06:48.651 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:06:48.651 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:06:48.663 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:06:48.686 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.687 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.690 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.693 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.693 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.694 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.696 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:06:48.696 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.697 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:06:48.697 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.697 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.698 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.700 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.700 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.701 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.702 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:06:48.703 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 21:06:48.703 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:06:48.705 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:06:48.705 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.706 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:06:48.706 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.707 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:06:48.707 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.709 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:06:48.710 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.710 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:06:48.711 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.712 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.712 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.714 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.714 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.715 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.716 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.717 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.717 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.718 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.719 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.719 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.720 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:06:48.721 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.721 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:06:48.723 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.723 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.724 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.725 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.725 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.726 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.726 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:06:48.727 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 1 msec}
2025-04-26 21:06:48.727 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:06:48.729 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.730 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.730 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.731 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:06:48.732 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.732 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:06:48.733 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:06:48.734 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.734 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:06:48.735 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.736 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.736 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.737 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.737 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.738 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.739 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:06:48.739 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.739 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:06:48.741 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:06:48.742 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.742 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:06:48.743 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 21:06:48.743 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.743 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 21:06:48.744 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:06:48.745 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:06:48.745 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:06:48.747 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:06:49.260 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 21:06:49.748 INFO  [restartedMain] o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-26 21:06:50.236 WARN  [restartedMain] o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\controller\BoardPostController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
2025-04-26 21:06:50.236 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:06:50.239 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 21:06:50.241 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 21:06:50.244 INFO  [restartedMain] o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-26 21:06:50.260 INFO  [restartedMain] o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-26 21:06:50.292 ERROR [restartedMain] o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\controller\BoardPostController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:755)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1364)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1353)
	at com.tomato.naraclub.NaraclubApplication.main(NaraclubApplication.java:12)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'boardPostServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\board\service\BoardPostServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 22 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'boardPostRepository' defined in com.tomato.naraclub.application.board.repository.BoardPostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 36 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); Reason: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:119)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:103)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:92)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:92)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:290)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:296)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.tomato.naraclub.application.board.repository.BoardPostRepository.findTop10ByOrderByViewsDescAndCreatedAtDesc(); No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:107)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:124)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:258)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	... 59 common frames omitted
Caused by: org.springframework.data.mapping.PropertyReferenceException: No property 'andCreatedAt' found for type 'BoardPost'
	at org.springframework.data.mapping.PropertyPath.<init>(PropertyPath.java:94)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:455)
	at org.springframework.data.mapping.PropertyPath.create(PropertyPath.java:431)
	at org.springframework.data.mapping.PropertyPath.lambda$from$0(PropertyPath.java:384)
	at java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:366)
	at org.springframework.data.mapping.PropertyPath.from(PropertyPath.java:344)
	at org.springframework.data.repository.query.parser.OrderBySource.lambda$createOrder$2(OrderBySource.java:112)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.query.parser.OrderBySource.createOrder(OrderBySource.java:110)
	at org.springframework.data.repository.query.parser.OrderBySource.<init>(OrderBySource.java:94)
	at org.springframework.data.repository.query.parser.PartTree$Predicate.<init>(PartTree.java:392)
	at org.springframework.data.repository.query.parser.PartTree.<init>(PartTree.java:103)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.<init>(PartTreeJpaQuery.java:101)
	... 63 common frames omitted
2025-04-26 21:11:14.785 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 28164 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 21:11:14.787 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 21:11:14.788 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 21:11:14.840 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 21:11:14.841 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 21:11:16.416 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 21:11:16.820 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 394 ms. Found 15 JPA repository interfaces.
2025-04-26 21:11:17.999 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 21:11:18.016 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 21:11:18.016 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 21:11:18.127 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 21:11:18.128 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3287 ms
2025-04-26 21:11:18.603 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 21:11:18.688 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 21:11:18.732 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 21:11:19.097 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 21:11:19.135 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 21:11:19.227 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 21:11:19.230 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 21:11:19.231 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@52022d6f
2025-04-26 21:11:19.233 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 21:11:19.249 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 21:11:19.250 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 21:11:19.264 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 21:11:19.677 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:11:19.679 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 21:11:19.680 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:11:19.681 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:11:19.681 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:11:19.684 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:11:20.778 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 21:11:20.803 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:11:20.803 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:11:20.803 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:11:20.804 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 21:11:20.806 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:11:20.806 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:11:20.806 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:11:20.807 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:11:20.834 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:11:20.835 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:11:20.849 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 13 msec}
2025-04-26 21:11:20.849 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:11:20.849 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:11:20.861 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 21:11:20.861 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 21:11:20.861 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 21:11:20.874 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 13 msec}
2025-04-26 21:11:20.874 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 21:11:20.876 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 21:11:20.887 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 21:11:20.888 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 21:11:20.888 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 21:11:20.901 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 21:11:20.901 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:11:20.902 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:11:20.914 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:11:20.916 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:11:20.916 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:11:20.927 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:11:20.928 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:11:20.928 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:11:20.939 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:11:20.961 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.961 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.963 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.966 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.966 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.967 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.969 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:11:20.969 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.970 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:11:20.971 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.971 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.971 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.973 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.973 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.974 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.974 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:11:20.976 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.976 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:11:20.977 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:11:20.978 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 1 msec}
2025-04-26 21:11:20.978 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:11:20.979 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.979 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.979 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.981 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:11:20.981 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.981 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:11:20.983 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.983 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.983 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.985 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.986 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.986 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.987 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.988 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:11:20.988 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.990 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.990 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.990 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.991 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:11:20.992 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 1 msec}
2025-04-26 21:11:20.992 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:11:20.994 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.994 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.995 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.996 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:20.997 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.997 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:20.998 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:11:20.998 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:20.998 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:11:21.000 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:21.000 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.000 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:21.001 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:11:21.002 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.002 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:11:21.003 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:11:21.004 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.004 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:11:21.005 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:21.006 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:11:21.006 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:21.008 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:21.008 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.009 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:21.010 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:11:21.010 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.010 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:11:21.012 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:11:21.012 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.012 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:11:21.013 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 21:11:21.014 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.014 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 21:11:21.014 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:11:21.015 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:11:21.015 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:11:21.017 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:11:21.441 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 21:11:21.887 INFO  [restartedMain] o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-26 21:11:22.498 WARN  [restartedMain] o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'voteCommentController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\controller\VoteCommentController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'voteCommentServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\service\VoteCommentServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 1: Error creating bean with name 'votePostRepository' defined in com.tomato.naraclub.application.vote.repository.VotePostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags(); Reason: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
2025-04-26 21:11:22.499 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:11:22.503 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown initiated...
2025-04-26 21:11:22.506 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Shutdown completed.
2025-04-26 21:11:22.509 INFO  [restartedMain] o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-26 21:11:22.529 INFO  [restartedMain] o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-26 21:11:22.580 ERROR [restartedMain] o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'voteCommentController' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\controller\VoteCommentController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'voteCommentServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\service\VoteCommentServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 1: Error creating bean with name 'votePostRepository' defined in com.tomato.naraclub.application.vote.repository.VotePostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags(); Reason: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:755)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1364)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1353)
	at com.tomato.naraclub.NaraclubApplication.main(NaraclubApplication.java:12)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'voteCommentServiceImpl' defined in file [C:\8.springPractice\springPractice\naraclub\build\classes\java\main\com\tomato\naraclub\application\comment\service\VoteCommentServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 1: Error creating bean with name 'votePostRepository' defined in com.tomato.naraclub.application.vote.repository.VotePostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags(); Reason: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:795)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:237)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1212)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 22 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'votePostRepository' defined in com.tomato.naraclub.application.vote.repository.VotePostRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags(); Reason: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1358)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:904)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:782)
	... 36 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags(); Reason: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:119)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:103)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:92)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:92)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:290)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:296)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	... 47 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract void com.tomato.naraclub.application.vote.repository.VotePostRepository.resetAllHotFlags()
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	... 59 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.sqm.UnknownPathException: Could not resolve attribute 'isHot' of 'com.tomato.naraclub.application.vote.entity.VotePost' [update VotePost v set v.isHot = false]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:860)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:765)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:140)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy4/jdk.proxy4.$Proxy174.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 65 common frames omitted
Caused by: org.hibernate.query.sqm.UnknownPathException: Could not resolve attribute 'isHot' of 'com.tomato.naraclub.application.vote.entity.VotePost' [update VotePost v set v.isHot = false]
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:88)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:145)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:132)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:802)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:852)
	... 72 common frames omitted
Caused by: org.hibernate.query.sqm.PathElementException: Could not resolve attribute 'isHot' of 'com.tomato.naraclub.application.vote.entity.VotePost'
	at org.hibernate.query.sqm.SqmPathSource.getSubPathSource(SqmPathSource.java:95)
	at org.hibernate.query.sqm.tree.domain.AbstractSqmPath.get(AbstractSqmPath.java:196)
	at org.hibernate.query.sqm.tree.domain.AbstractSqmFrom.resolvePathPart(AbstractSqmFrom.java:198)
	at org.hibernate.query.hql.internal.DomainPathPart.resolvePathPart(DomainPathPart.java:42)
	at org.hibernate.query.hql.internal.BasicDotIdentifierConsumer.consumeIdentifier(BasicDotIdentifierConsumer.java:92)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimplePath(SemanticQueryBuilder.java:5269)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimplePath(SemanticQueryBuilder.java:275)
	at org.hibernate.grammars.hql.HqlParser$SimplePathContext.accept(HqlParser.java:4398)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.consumeDomainPath(SemanticQueryBuilder.java:5516)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAssignment(SemanticQueryBuilder.java:695)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitUpdateStatement(SemanticQueryBuilder.java:676)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitStatement(SemanticQueryBuilder.java:457)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.buildSemanticModel(SemanticQueryBuilder.java:322)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:71)
	... 76 common frames omitted
2025-04-26 21:12:44.368 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 30300 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 21:12:44.370 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 21:12:44.371 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 21:12:44.421 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 21:12:44.421 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 21:12:46.083 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 21:12:46.507 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 415 ms. Found 15 JPA repository interfaces.
2025-04-26 21:12:47.689 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 21:12:47.706 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 21:12:47.707 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 21:12:47.826 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 21:12:47.826 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3405 ms
2025-04-26 21:12:48.367 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 21:12:48.443 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 21:12:48.497 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 21:12:48.870 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 21:12:48.908 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 21:12:49.003 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 21:12:49.006 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 2 msec}
2025-04-26 21:12:49.007 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@79348643
2025-04-26 21:12:49.009 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 21:12:49.025 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 21:12:49.026 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 21:12:49.040 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 21:12:49.467 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:12:49.469 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 2 msec}
2025-04-26 21:12:49.470 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:12:49.471 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:12:49.471 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:12:49.474 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:12:50.583 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 21:12:50.607 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:12:50.607 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:12:50.607 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:12:50.608 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 21:12:50.609 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:12:50.609 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:12:50.610 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 21:12:50.611 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:12:50.636 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:12:50.637 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:12:50.649 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:12:50.650 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:12:50.650 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:12:50.662 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:12:50.662 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 21:12:50.662 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 21:12:50.673 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 21:12:50.675 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 21:12:50.675 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 21:12:50.687 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 11 msec}
2025-04-26 21:12:50.687 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 21:12:50.687 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 21:12:50.702 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 15 msec}
2025-04-26 21:12:50.702 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:12:50.703 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:12:50.715 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 12 msec}
2025-04-26 21:12:50.715 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:12:50.715 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:12:50.727 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 10 msec}
2025-04-26 21:12:50.728 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:12:50.728 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:12:50.740 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:12:50.760 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.761 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:12:50.764 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.767 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.768 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:12:50.768 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.770 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:12:50.771 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.775 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:12:50.776 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.776 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.777 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.778 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.779 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.779 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.781 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:12:50.781 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.781 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:12:50.783 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:12:50.783 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.784 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:12:50.784 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.785 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.786 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.788 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:12:50.788 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.789 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:12:50.790 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.790 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.791 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.792 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.793 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:12:50.793 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.794 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.794 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.794 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.796 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.796 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.797 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.797 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:12:50.798 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 1 msec}
2025-04-26 21:12:50.798 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:12:50.800 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.800 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.800 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.801 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.802 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:12:50.802 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.803 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:12:50.803 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.804 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:12:50.806 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.806 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.806 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.807 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:12:50.807 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.808 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:12:50.809 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:12:50.809 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.810 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:12:50.811 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.811 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.811 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.813 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.813 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.813 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.814 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:12:50.814 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.814 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:12:50.816 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:12:50.816 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.817 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:12:50.818 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 21:12:50.818 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.818 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 21:12:50.819 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:12:50.819 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:12:50.820 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:12:50.822 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:12:51.286 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 21:12:51.730 INFO  [restartedMain] o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-26 21:12:52.943 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 21:12:52.943 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 21:12:53.488 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 21:12:54.175 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@537328d3. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 21:12:54.175 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 21:12:54.523 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 21:12:54.596 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 21:12:54.610 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 10.955 seconds (process running for 11.646)
2025-04-26 21:13:00.026 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:13:00.027 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:13:00.064 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:13:00.064 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:13:00.065 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:13:00.119 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:13:00.121 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:13:00.122 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:13:00.122 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:13:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:13:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:13:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:13:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:13:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:13:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:13:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:13:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:13:30.031 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:13:30.053 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:13:30.053 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:13:30.054 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:14:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:14:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:14:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:14:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:14:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:14:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:14:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:14:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:14:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:14:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:14:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:14:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:14:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:14:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:14:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:14:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:14:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:14:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:14:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:14:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:14:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:15:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:15:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:15:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:15:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:15:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:15:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:15:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:15:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:15:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:22:48.765 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Starting NaraclubApplication using Java 21.0.6 with PID 1848 (C:\8.springPractice\springPractice\naraclub\build\classes\java\main started by heywb in C:\8.springPractice\springPractice\naraclub)
2025-04-26 21:22:48.767 DEBUG [restartedMain] c.t.naraclub.NaraclubApplication - Running with Spring Boot v3.3.11-SNAPSHOT, Spring v6.1.19
2025-04-26 21:22:48.768 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - The following 1 profile is active: "local"
2025-04-26 21:22:48.818 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-04-26 21:22:48.819 INFO  [restartedMain] o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-04-26 21:22:50.481 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-26 21:22:50.898 INFO  [restartedMain] o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 408 ms. Found 15 JPA repository interfaces.
2025-04-26 21:22:52.066 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-26 21:22:52.082 INFO  [restartedMain] o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-26 21:22:52.082 INFO  [restartedMain] o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.40]
2025-04-26 21:22:52.251 INFO  [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-26 21:22:52.252 INFO  [restartedMain] o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3433 ms
2025-04-26 21:22:52.704 INFO  [restartedMain] o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-26 21:22:52.790 INFO  [restartedMain] org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.3.Final
2025-04-26 21:22:52.839 INFO  [restartedMain] o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-26 21:22:53.207 INFO  [restartedMain] o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-26 21:22:53.245 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Starting...
2025-04-26 21:22:53.336 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1

2025-04-26 21:22:53.339 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:579)
1. SELECT 1
 {executed in 3 msec}
2025-04-26 21:22:53.341 INFO  [restartedMain] com.zaxxer.hikari.pool.HikariPool - narasarang-pool - Added connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@79348643
2025-04-26 21:22:53.343 INFO  [restartedMain] com.zaxxer.hikari.HikariDataSource - narasarang-pool - Start completed.
2025-04-26 21:22:53.360 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode

2025-04-26 21:22:53.361 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110)
1. SELECT @@character_set_database, @@sql_mode
 {executed in 0 msec}
2025-04-26 21:22:53.377 WARN  [restartedMain] org.hibernate.orm.deprecation - HHH90000025: MariaDBDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-04-26 21:22:53.805 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:22:53.808 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 1 msec}
2025-04-26 21:22:53.809 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:22:53.809 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:22:53.809 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 0 msec}
2025-04-26 21:22:53.812 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:22:54.922 INFO  [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-26 21:22:54.946 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:22:54.946 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:22:54.947 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'

2025-04-26 21:22:54.948 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select table_name from information_schema.TABLES where table_schema=database() and table_type='SEQUENCE'
 {executed in 0 msec}
2025-04-26 21:22:54.948 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|
|table_name        |
|------------------|
|news_article_seq  |
|point_history_seq |
|share_history_seq |
|view_history_seq  |
|vote_post_seq     |
|vote_record_seq   |
|------------------|

2025-04-26 21:22:54.948 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq

2025-04-26 21:22:54.949 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. SELECT 'news_article_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM news_article_seq UNION ALL SELECT 'point_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM point_history_seq UNION ALL SELECT 'share_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM share_history_seq UNION ALL SELECT 'view_history_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM view_history_seq UNION ALL SELECT 'vote_post_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_post_seq UNION ALL SELECT 'vote_record_seq' as sequence_name, minimum_value, maximum_value, start_value, increment, cache_size FROM vote_record_seq
 {executed in 1 msec}
2025-04-26 21:22:54.949 INFO  [restartedMain] jdbc.resultsettable - 
|------------------|--------------|--------------------|------------|----------|-----------|
|sequence_name     |minimum_value |maximum_value       |start_value |increment |cache_size |
|------------------|--------------|--------------------|------------|----------|-----------|
|news_article_seq  |1             |9223372036854775806 |1           |50        |0          |
|point_history_seq |1             |9223372036854775806 |1           |50        |0          |
|share_history_seq |1             |9223372036854775806 |1           |50        |0          |
|view_history_seq  |1             |9223372036854775806 |1           |50        |0          |
|vote_post_seq     |1             |9223372036854775806 |1           |50        |0          |
|vote_record_seq   |1             |9223372036854775806 |1           |50        |0          |
|------------------|--------------|--------------------|------------|----------|-----------|

2025-04-26 21:22:54.977 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:22:54.977 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:22:54.989 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_article 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 21:22:54.990 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:22:54.990 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:22:55.002 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 21:22:55.003 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
2025-04-26 21:22:55.003 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'

2025-04-26 21:22:55.014 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_board_post 
       modify column content TEXT not null comment '상세 내용'
 {executed in 11 msec}
2025-04-26 21:22:55.015 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
2025-04-26 21:22:55.015 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'

2025-04-26 21:22:55.027 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column role enum ('ADMIN','USER_ACTIVE','USER_INACTIVE') not null comment '유저 롤'
 {executed in 12 msec}
2025-04-26 21:22:55.027 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
2025-04-26 21:22:55.027 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'

2025-04-26 21:22:55.041 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_member 
       modify column status enum ('ACTIVE','BLOCKED','DELETED','TEMPORARY_INVITE','TEMPORARY_PASS') not null comment '유저 상태'
 {executed in 13 msec}
2025-04-26 21:22:55.041 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
2025-04-26 21:22:55.041 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'

2025-04-26 21:22:55.052 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video 
       modify column type enum ('NEWS_ARTICLE','YOUTUBE_SHORTS','YOUTUBE_VIDEO') not null comment '토마토 오리지날 타입'
 {executed in 11 msec}
2025-04-26 21:22:55.052 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:22:55.052 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:22:55.065 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_video_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 12 msec}
2025-04-26 21:22:55.065 DEBUG [restartedMain] org.hibernate.SQL - 
    alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
2025-04-26 21:22:55.065 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'

2025-04-26 21:22:55.076 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
1. alter table if exists t_vote_comments 
       modify column content TEXT not null comment '댓글 내용'
 {executed in 11 msec}
2025-04-26 21:22:55.099 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.100 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.102 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.105 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.106 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.107 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.109 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:22:55.110 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.110 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:22:55.111 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.111 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.112 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.113 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.114 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.114 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.116 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:22:55.116 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.116 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:22:55.118 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:22:55.118 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.118 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:22:55.119 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.120 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:22:55.120 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.122 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0

2025-04-26 21:22:55.122 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_board_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.122 INFO  [restartedMain] jdbc.resultsettable - 
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|is_hot |is_new |likes |share_count |views |author_id |comment_count |created_at |id |updated_at |created_by |updated_by |content |title |
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|
|-------|-------|------|------------|------|----------|--------------|-----------|---|-----------|-----------|-----------|--------|------|

2025-04-26 21:22:55.123 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.124 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:22:55.124 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.126 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.126 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.126 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.128 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.128 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.128 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.130 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.131 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:22:55.131 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.132 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:22:55.132 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.133 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:22:55.135 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.135 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.135 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.136 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.137 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 1 msec}
2025-04-26 21:22:55.137 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.138 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0

2025-04-26 21:22:55.139 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_video` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.139 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|id |created_at |created_by |updated_at |updated_by |category |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |video_url |view_count |youtube_id |comment_count |author_name |
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|
|---|-----------|-----------|-----------|-----------|---------|------------|-------------|-------|----------|-------------|----------|------|-----|----------|-----------|-----------|--------------|------------|

2025-04-26 21:22:55.140 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.141 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.141 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.142 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:22:55.142 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.143 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:22:55.144 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:22:55.144 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.145 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:22:55.146 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.147 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.147 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.148 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.148 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.150 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.150 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:22:55.151 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.151 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:22:55.153 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0

2025-04-26 21:22:55.154 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_member` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.154 INFO  [restartedMain] jdbc.resultsettable - 
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|verified |created_at |id |inviter_id |last_access_at |updated_at |invite_code |phone_number |name |created_by |email |password |updated_by |user_key |profile_img |role |status |
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|
|---------|-----------|---|-----------|---------------|-----------|------------|-------------|-----|-----------|------|---------|-----------|---------|------------|-----|-------|

2025-04-26 21:22:55.155 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0

2025-04-26 21:22:55.155 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_option` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.155 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|id |created_at |created_by |updated_at |updated_by |option_name |vote_count |vote_post_id |
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|
|---|-----------|-----------|-----------|-----------|------------|-----------|-------------|

2025-04-26 21:22:55.156 DEBUG [restartedMain] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0

2025-04-26 21:22:55.157 DEBUG [restartedMain] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from `narasarang`.`t_vote_post` where 1=0
 {executed in 0 msec}
2025-04-26 21:22:55.157 INFO  [restartedMain] jdbc.resultsettable - 
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|id |created_at |created_by |updated_at |updated_by |comment_count |is_new |question |share_count |view_count |vote_count |author_id |
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|
|---|-----------|-----------|-----------|-----------|--------------|-------|---------|------------|-----------|-----------|----------|

2025-04-26 21:22:55.159 INFO  [restartedMain] o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 21:22:55.593 DEBUG [restartedMain] c.t.n.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-04-26 21:22:56.053 INFO  [restartedMain] o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-26 21:22:57.290 INFO  [restartedMain] o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name daoAuthenticationProvider
2025-04-26 21:22:57.291 WARN  [restartedMain] o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used for username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider.
2025-04-26 21:22:57.933 INFO  [restartedMain] o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-04-26 21:22:58.638 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore org.springframework.boot.autoconfigure.security.servlet.StaticResourceRequest$StaticResourceRequestMatcher@772a121a. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 21:22:58.639 WARN  [restartedMain] o.s.s.c.a.web.builders.WebSecurity - You are asking Spring Security to ignore Deferred [Mvc [pattern='/uploads/**'], Ant [pattern='/uploads/**']]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.
2025-04-26 21:22:58.993 INFO  [restartedMain] o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2025-04-26 21:22:59.068 INFO  [restartedMain] o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-04-26 21:22:59.082 INFO  [restartedMain] c.t.naraclub.NaraclubApplication - Started NaraclubApplication in 11.038 seconds (process running for 11.744)
2025-04-26 21:23:00.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:23:00.020 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:23:00.059 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:23:00.059 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:23:00.060 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:23:00.116 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:23:00.118 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:23:00.119 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:23:00.119 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:23:22.226 INFO  [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-26 21:23:22.227 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-26 21:23:22.228 INFO  [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-26 21:23:22.502 ERROR [http-nio-8080-exec-3] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 21:23:22.576 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* <criteria> */ select
        rt1_0.id,
        rt1_0.created_at,
        rt1_0.created_by,
        rt1_0.device_type,
        rt1_0.expiry_date,
        rt1_0.ip_address,
        rt1_0.last_used_at,
        rt1_0.member_id,
        rt1_0.refresh_token,
        rt1_0.updated_at,
        rt1_0.updated_by,
        rt1_0.user_agent 
    from
        t_refresh_token rt1_0 
    where
        rt1_0.refresh_token=?
2025-04-26 21:23:22.576 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:23:22.577 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:23:22.577 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'

2025-04-26 21:23:22.578 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'
 {executed in 0 msec}
2025-04-26 21:23:22.596 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|-----------|-----------|------------|----------------------|----------------|--------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|id |created_at |created_by |device_type |expiry_date           |ip_address      |last_used_at              |member_id |refresh_token                                                                                                                                                                     |updated_at |updated_by |user_agent                                                                                                                          |
|---|-----------|-----------|------------|----------------------|----------------|--------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|6  |null       |null       |null        |2025-05-10 16:00:25.0 |0:0:0:0:0:0:0:1 |2025-04-26 20:17:04.09775 |1         |eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk |null       |null       |Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36 |
|---|-----------|-----------|------------|----------------------|----------------|--------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 21:23:22.605 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 21:23:22.606 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 21:23:22.607 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 21:23:22.610 INFO  [http-nio-8080-exec-8] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 21:23:22.675 DEBUG [http-nio-8080-exec-8] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token 
    set
        device_type=?,
        expiry_date=?,
        ip_address=?,
        last_used_at=?,
        member_id=?,
        refresh_token=?,
        updated_at=?,
        updated_by=?,
        user_agent=? 
    where
        id=?
2025-04-26 21:23:22.678 DEBUG [http-nio-8080-exec-8] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 21:23:22.646',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6

2025-04-26 21:23:22.679 DEBUG [http-nio-8080-exec-8] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 21:23:22.646',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6
 {executed in 1 msec}
2025-04-26 21:23:22.730 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 21:23:22.730 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 21:23:22.730 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 21:23:22.731 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 21:23:22.889 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        boardPost.id as boardId,
        boardPost.author.id as authorId,
        boardPost.title,
        boardPost.content,
        boardPost.commentCount,
        boardPost.views,
        boardPost.shareCount as sharesCount,
        (boardPost.createdAt >= ?1 
        and boardPost.createdAt < ?2 
        and boardPostViewHistory.id is null) as isNew,
        boardPost.isHot,
        boardPost.createdAt 
    from
        BoardPost boardPost   
    left join
        BoardPostViewHistory boardPostViewHistory 
            on boardPostViewHistory.reader.id = ?3 
            and boardPostViewHistory.boardPost.id = boardPost.id 
    order by
        boardPost.createdAt desc */ select
            bp1_0.id,
            bp1_0.author_id,
            bp1_0.title,
            bp1_0.content,
            bp1_0.comment_count,
            bp1_0.views,
            bp1_0.share_count,
            (bp1_0.created_at>=cast(? as datetime(6)) 
            and bp1_0.created_at<cast(? as datetime(6)) 
            and bpvh1_0.id is null),
            bp1_0.is_hot,
            bp1_0.created_at 
        from
            t_board_post bp1_0 
        left join
            t_board_post_view_history bpvh1_0 
                on bpvh1_0.reader_id=? 
                and bpvh1_0.board_post_id=bp1_0.id 
        order by
            bp1_0.created_at desc 
        limit
            ?, ?
2025-04-26 21:23:22.889 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?

2025-04-26 21:23:22.891 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select boardPost.id as boardId, boardPost.author.id as authorId, boardPost.title, boardPost.content, boardPost.commentCount, boardPost.views, boardPost.shareCount as sharesCount, (boardPost.createdAt >= '04/26/2025 00:00:00.000'1 and boardPost.createdAt < '04/27/2025 00:00:00.000'2 and boardPostViewHistory.id is null) as isNew, boardPost.isHot, boardPost.createdAt
from BoardPost boardPost
  left join BoardPostViewHistory boardPostViewHistory on boardPostViewHistory.reader.id = 13 and boardPostViewHistory.boardPost.id = boardPost.id
order by boardPost.createdAt desc */ select bp1_0.id,bp1_0.author_id,bp1_0.title,bp1_0.content,bp1_0.comment_count,bp1_0.views,bp1_0.share_count,(bp1_0.created_at>=cast(0 as datetime(6)) and bp1_0.created_at<cast(10 as datetime(6)) and bpvh1_0.id is null),bp1_0.is_hot,bp1_0.created_at from t_board_post bp1_0 left join t_board_post_view_history bpvh1_0 on bpvh1_0.reader_id=? and bpvh1_0.board_post_id=bp1_0.id order by bp1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 21:23:22.892 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|id |author_id |title     |content |comment_count |views |share_count |(bp1_0.created_at>=cast('2025-04-26 00:00:00' as datetime(6)) and bp1_0.created_at<cast('2025-04-27 00:00:00' as datetime(6)) and bpvh1_0.id is null) |is_hot |created_at                 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|
|1  |1         |test      |test    |0             |2     |0           |false                                                                                                                                                 |true   |2025-04-26 12:34:07.601    |
|7  |1         |ㅋㅁㄴㅇㅁㄴㅇ   |ㅋㅋㅇㅁㄴㅇ  |0             |2     |0           |false                                                                                                                                                 |true   |2025-04-23 22:59:44.264704 |
|5  |1         |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |ㅋㅋㅋㅋㅋ   |7             |4     |0           |false                                                                                                                                                 |true   |2025-04-23 20:32:44.22486  |
|4  |1         |ㅋㅋ        |ㅋㅋㅋㅋ    |0             |1     |0           |false                                                                                                                                                 |true   |2025-04-23 20:32:34.019068 |
|3  |1         |zz2       |zzz     |1             |19    |0           |false                                                                                                                                                 |true   |2025-04-22 22:36:02.804431 |
|2  |1         |zz        |zzz     |0             |2     |0           |false                                                                                                                                                 |true   |2025-04-22 22:35:27.285519 |
|---|----------|----------|--------|--------------|------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------|-------|---------------------------|

2025-04-26 21:23:22.911 DEBUG [http-nio-8080-exec-9] org.hibernate.SQL - 
    /* select
        count(boardPost) 
    from
        BoardPost boardPost */ select
            count(bp1_0.id) 
        from
            t_board_post bp1_0
2025-04-26 21:23:22.912 DEBUG [http-nio-8080-exec-9] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0

2025-04-26 21:23:22.913 DEBUG [http-nio-8080-exec-9] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* select count(boardPost)
from BoardPost boardPost */ select count(bp1_0.id) from t_board_post bp1_0
 {executed in 1 msec}
2025-04-26 21:23:22.913 INFO  [http-nio-8080-exec-9] jdbc.resultsettable - 
|----------------|
|count(bp1_0.id) |
|----------------|
|6               |
|----------------|

2025-04-26 21:23:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:23:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:23:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:23:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:23:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:23:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:23:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:23:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:23:30.026 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:23:30.035 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:23:30.035 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:23:30.036 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:24:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:24:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:24:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:24:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:24:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:24:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:24:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:24:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:24:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:24:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:24:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:24:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:24:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:24:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:24:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:24:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:24:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:24:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:24:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:24:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:24:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:25:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:25:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:25:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:25:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:25:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:25:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:25:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:25:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:25:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:25:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:25:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:25:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:25:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:25:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:25:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:25:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:25:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:25:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:25:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:25:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:25:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:26:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:26:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:26:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:26:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:26:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:26:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:26:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:26:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:26:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:26:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:26:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:26:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:26:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:26:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:26:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:26:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:26:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:26:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:26:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:26:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:26:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:27:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:27:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:27:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:27:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:27:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:27:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:27:00.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:27:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:27:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:27:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:27:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:27:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:27:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:27:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:27:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:27:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:27:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:27:30.020 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:27:30.021 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:27:30.021 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:27:30.022 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:28:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:28:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:28:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:28:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:28:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:28:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:28:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:28:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:28:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:28:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:28:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:28:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:28:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:28:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:28:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:28:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:28:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:28:30.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:28:30.021 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:28:30.021 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:28:30.022 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:29:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:29:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:29:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:29:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:29:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:29:00.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:29:00.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:29:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:29:00.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:29:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:29:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:29:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:29:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:29:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:29:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:29:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:29:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:29:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:29:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:29:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:29:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:30:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:30:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:30:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:30:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:30:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:30:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:30:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:30:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:30:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:30:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:30:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:30:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:30:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:30:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:30:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:30:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:30:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:30:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:30:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:30:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:30:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:31:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:31:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:31:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:31:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:31:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:31:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:31:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:31:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:31:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:31:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:31:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:31:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:31:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:31:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:31:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:31:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:31:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:31:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:31:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:31:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:31:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:32:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:32:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:32:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:32:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:32:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:32:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:32:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:32:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:32:00.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:32:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:32:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:32:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:32:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:32:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:32:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:32:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:32:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:32:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:32:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:32:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:32:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:33:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:33:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:33:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:33:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:33:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:33:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:33:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:33:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:33:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:33:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:33:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:33:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:33:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:33:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:33:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:33:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:33:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:33:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:33:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:33:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:33:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:34:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:34:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:34:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:34:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:34:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:34:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:34:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:34:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:34:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:34:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:34:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:34:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:34:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:34:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 2 msec}
2025-04-26 21:34:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:34:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:34:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:34:30.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:34:30.020 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:34:30.020 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:34:30.020 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:35:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:35:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:35:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:35:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:35:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:35:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:35:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:35:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:35:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:35:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:35:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:35:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:35:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:35:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 2 msec}
2025-04-26 21:35:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:35:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:35:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:35:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:35:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:35:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:35:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:36:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:36:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:36:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:36:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:36:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:36:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:36:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:36:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:36:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:36:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:36:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:36:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:36:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:36:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:36:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:36:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:36:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:36:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:36:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:36:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:36:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:37:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:37:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:37:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:37:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:37:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:37:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:37:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:37:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:37:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:37:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:37:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:37:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:37:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:37:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:37:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:37:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:37:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:37:30.020 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:37:30.021 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:37:30.021 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:37:30.021 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:38:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:38:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:38:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:38:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:38:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:38:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:38:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:38:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:38:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:38:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:38:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:38:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:38:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:38:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:38:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:38:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:38:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:38:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:38:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:38:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:38:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:39:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:39:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:39:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:39:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:39:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:39:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:39:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:39:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:39:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:39:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:39:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:39:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:39:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:39:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:39:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:39:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:39:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:39:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:39:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:39:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:39:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:40:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:40:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:40:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:40:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:40:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:40:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:40:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:40:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:40:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:40:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:40:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:40:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:40:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:40:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:40:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:40:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:40:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:40:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:40:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:40:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:40:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:41:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:41:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:41:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:41:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:41:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:41:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:41:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:41:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:41:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:41:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:41:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:41:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:41:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:41:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:41:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:41:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:41:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:41:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:41:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:41:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:41:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:42:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:42:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:42:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:42:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:42:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:42:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:42:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:42:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:42:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:42:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:42:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:42:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:42:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:42:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:42:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:42:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:42:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:42:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:42:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:42:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:42:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:43:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:43:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:43:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:43:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:43:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:43:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:43:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:43:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:43:00.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:43:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:43:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:43:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:43:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:43:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:43:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:43:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:43:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:43:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:43:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:43:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:43:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:44:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:44:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:44:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:44:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:44:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:44:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:44:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:44:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:44:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:44:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:44:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:44:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:44:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:44:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:44:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:44:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:44:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:44:30.020 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:44:30.021 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:44:30.021 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:44:30.021 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:45:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:45:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:45:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:45:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:45:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:45:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:45:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:45:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:45:00.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:45:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:45:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:45:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:45:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:45:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:45:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:45:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:45:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:45:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:45:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:45:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:45:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:46:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:46:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:46:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:46:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:46:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:46:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:46:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:46:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:46:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:46:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:46:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:46:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:46:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:46:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:46:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:46:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:46:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:46:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:46:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:46:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:46:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:47:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:47:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:47:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:47:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:47:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:47:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:47:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:47:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:47:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:47:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:47:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:47:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:47:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:47:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:47:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:47:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:47:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:47:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:47:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:47:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:47:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:48:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:48:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:48:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:48:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:48:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:48:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:48:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:48:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:48:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:48:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:48:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:48:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:48:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:48:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:48:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:48:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:48:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:48:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:48:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:48:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:48:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:49:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:49:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:49:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:49:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:49:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:49:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:49:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:49:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:49:00.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:49:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:49:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:49:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:49:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:49:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:49:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:49:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:49:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:49:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:49:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:49:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:49:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:50:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:50:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:50:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:50:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:50:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:50:00.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:50:00.020 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:50:00.020 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:50:00.020 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:50:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:50:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:50:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:50:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:50:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:50:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:50:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:50:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:50:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:50:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:50:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:50:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:51:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:51:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:51:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:51:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:51:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:51:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:51:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:51:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:51:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:51:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:51:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:51:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:51:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:51:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:51:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:51:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:51:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:51:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:51:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:51:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:51:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:52:16.842 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:52:16.843 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 1 msec}
2025-04-26 21:52:16.844 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:52:16.844 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:52:16.844 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:52:16.845 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:52:16.845 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:52:16.845 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:52:16.846 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:52:46.847 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1

2025-04-26 21:52:46.847 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
1. SELECT 1
 {executed in 0 msec}
2025-04-26 21:52:46.848 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:52:46.849 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:52:46.849 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:52:46.850 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:52:46.850 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:52:46.850 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:52:46.851 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:52:46.852 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:52:46.852 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:52:46.853 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:53:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:53:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 21:53:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:53:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:53:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:53:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:53:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:53:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:53:00.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:53:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:53:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:53:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:53:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:53:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:53:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:53:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:53:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:53:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:53:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:53:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:53:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:54:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:54:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 21:54:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:54:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:54:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:54:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:54:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:54:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:54:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:54:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:54:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:54:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:54:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:54:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:54:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:54:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:54:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:54:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:54:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:54:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:54:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:55:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:55:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:55:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:55:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:55:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:55:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:55:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:55:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:55:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:55:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:55:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:55:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:55:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:55:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:55:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:55:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:55:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:55:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:55:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:55:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:55:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 21:56:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:56:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:56:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:56:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:56:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:56:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:56:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:56:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:56:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:56:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:56:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:56:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:56:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:56:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:56:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:56:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:56:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:56:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:56:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:56:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:56:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:57:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:57:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:57:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:57:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:57:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:57:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:57:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:57:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:57:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:57:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:57:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:57:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:57:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:57:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:57:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:57:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:57:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:57:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:57:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:57:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:57:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:58:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:58:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 21:58:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:58:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:58:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:58:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:58:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:58:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 21:58:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:58:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:58:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:58:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:58:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:58:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:58:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:58:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:58:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:58:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:58:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:58:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:58:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 21:59:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:59:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 21:59:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 21:59:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 21:59:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 21:59:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 21:59:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 21:59:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:59:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 21:59:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 21:59:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 21:59:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 21:59:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 21:59:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 21:59:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 21:59:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 21:59:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 21:59:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 21:59:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 21:59:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 21:59:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:00:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:00:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:00:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:00:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:00:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:00:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:00:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:00:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:00:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:00:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:00:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:00:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:00:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:00:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:00:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:00:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:00:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:00:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:00:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:00:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:00:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:01:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:01:00.000 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:01:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:01:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:01:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:01:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:01:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:01:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:01:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:01:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:01:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:01:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:01:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:01:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:01:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:01:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:01:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:01:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:01:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:01:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:01:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:02:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:02:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:02:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:02:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:02:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:02:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:02:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:02:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:02:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:02:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:02:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:02:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:02:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:02:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:02:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:02:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:02:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:02:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:02:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:02:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:02:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:03:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:03:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:03:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:03:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:03:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:03:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:03:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:03:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:03:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:03:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:03:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:03:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:03:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:03:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:03:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:03:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:03:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:03:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:03:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:03:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:03:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:04:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:04:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:04:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:04:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:04:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:04:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:04:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:04:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:04:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:04:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:04:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:04:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:04:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:04:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:04:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:04:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:04:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:04:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:04:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:04:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:04:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:05:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:05:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:05:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:05:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:05:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:05:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:05:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:05:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:05:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:05:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:05:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:05:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:05:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:05:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:05:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:05:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:05:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:05:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:05:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:05:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:05:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:06:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:06:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:06:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:06:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:06:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:06:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:06:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:06:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:06:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:06:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:06:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:06:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:06:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:06:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:06:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:06:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:06:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:06:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:06:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:06:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:06:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:07:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:07:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:07:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:07:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:07:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:07:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:07:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:07:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:07:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:07:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:07:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:07:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:07:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:07:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:07:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:07:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:07:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:07:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:07:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:07:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:07:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:08:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:08:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:08:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:08:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:08:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:08:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:08:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:08:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:08:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:08:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:08:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:08:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:08:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:08:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:08:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:08:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:08:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:08:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:08:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:08:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:08:30.020 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:09:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:09:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:09:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:09:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:09:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:09:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:09:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:09:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:09:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:09:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:09:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:09:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:09:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:09:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:09:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:09:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:09:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:09:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:09:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:09:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:09:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:10:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:10:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:10:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:10:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:10:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:10:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:10:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:10:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:10:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:10:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:10:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:10:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:10:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:10:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:10:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:10:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:10:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:10:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:10:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:10:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:10:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:11:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:11:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:11:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:11:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:11:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:11:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:11:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:11:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:11:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:11:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:11:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:11:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:11:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:11:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:11:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:11:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:11:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:11:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:11:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:11:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:11:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:12:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:12:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:12:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:12:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:12:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:12:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:12:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:12:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:12:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:12:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:12:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:12:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:12:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:12:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:12:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:12:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:12:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:12:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:12:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:12:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:12:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:13:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:13:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:13:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:13:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:13:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:13:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:13:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:13:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:13:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:13:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:13:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:13:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:13:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:13:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:13:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:13:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:13:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:13:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:13:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:13:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:13:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:14:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:14:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:14:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:14:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:14:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:14:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:14:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:14:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:14:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:14:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:14:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:14:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:14:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:14:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:14:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:14:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:14:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:14:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:14:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:14:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:14:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:15:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:15:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:15:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:15:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:15:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:15:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:15:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:15:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:15:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:15:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:15:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:15:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:15:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:15:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:15:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:15:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:15:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:15:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:15:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:15:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:15:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:16:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:16:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:16:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:16:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:16:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:16:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:16:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:16:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:16:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:16:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:16:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:16:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:16:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:16:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:16:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:16:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:16:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:16:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:16:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:16:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:16:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:17:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:17:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:17:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:17:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:17:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:17:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:17:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:17:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:17:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:17:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:17:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:17:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:17:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:17:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:17:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:17:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:17:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:17:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:17:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:17:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:17:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:18:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:18:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:18:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:18:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:18:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:18:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:18:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:18:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:18:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:18:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:18:30.000 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:18:30.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:18:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:18:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:18:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:18:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:18:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:18:30.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:18:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:18:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:18:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:19:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:19:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:19:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:19:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:19:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:19:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:19:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:19:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:19:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:19:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:19:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:19:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:19:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:19:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:19:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:19:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:19:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:19:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:19:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:19:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:19:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:20:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:20:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:20:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:20:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:20:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:20:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:20:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:20:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:20:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:20:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:20:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:20:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:20:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:20:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:20:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:20:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:20:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:20:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:20:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:20:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:20:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:21:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:21:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:21:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:21:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:21:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:21:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:21:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:21:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:21:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:21:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:21:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 0 msec}
2025-04-26 22:21:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:21:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:21:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:21:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:21:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:21:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:21:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:21:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:21:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:21:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:22:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1

2025-04-26 22:22:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
2. SELECT 1
 {executed in 1 msec}
2025-04-26 22:22:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:22:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:22:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
2. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:22:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:22:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:22:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
2. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:22:00.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:22:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:22:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:22:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:22:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:22:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:22:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:22:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:22:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:22:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:22:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:22:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:22:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:23:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:23:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:23:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:23:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:23:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:23:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:23:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:23:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:23:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:23:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:23:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:23:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:23:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:23:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:23:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:23:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:23:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:23:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:23:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:23:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:23:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:24:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:24:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:24:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:24:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:24:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:24:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:24:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:24:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:24:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:24:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:24:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:24:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:24:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:24:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:24:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:24:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:24:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:24:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:24:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:24:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:24:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:25:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:25:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:25:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:25:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:25:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:25:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:25:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:25:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:25:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:25:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:25:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:25:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:25:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:25:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:25:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:25:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:25:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:25:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:25:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:25:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:25:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:26:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:26:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:26:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:26:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:26:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:26:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:26:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:26:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:26:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:26:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:26:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:26:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:26:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:26:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:26:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:26:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:26:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:26:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:26:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:26:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:26:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:27:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:27:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:27:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:27:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:27:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:27:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:27:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:27:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:27:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:27:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:27:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:27:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:27:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:27:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:27:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:27:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:27:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:27:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:27:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:27:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:27:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:28:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:28:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:28:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:28:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:28:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:28:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:28:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:28:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:28:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:28:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:28:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:28:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:28:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:28:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:28:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:28:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:28:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:28:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:28:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:28:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:28:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:29:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:29:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:29:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:29:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:29:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:29:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:29:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:29:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:29:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:29:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:29:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:29:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:29:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:29:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:29:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:29:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:29:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:29:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:29:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:29:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:29:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:30:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:30:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:30:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:30:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:30:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:30:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:30:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:30:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:30:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:30:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:30:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:30:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:30:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:30:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:30:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:30:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:30:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:30:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:30:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:30:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:30:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:31:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:31:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:31:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:31:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:31:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:31:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:31:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:31:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:31:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:31:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:31:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:31:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:31:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:31:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:31:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:31:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:31:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:31:30.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:31:30.020 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:31:30.020 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:31:30.021 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:32:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:32:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:32:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:32:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:32:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:32:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:32:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:32:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:32:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:32:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:32:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:32:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:32:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:32:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:32:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:32:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:32:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:32:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:32:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:32:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:32:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:33:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:33:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:33:00.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:33:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:33:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:33:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:33:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:33:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:33:00.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:33:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:33:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:33:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:33:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:33:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:33:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:33:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:33:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:33:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:33:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:33:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:33:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:34:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:34:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:34:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:34:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:34:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:34:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:34:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:34:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:34:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:34:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:34:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:34:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:34:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:34:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:34:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:34:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:34:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:34:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:34:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:34:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:34:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:35:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:35:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:35:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:35:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:35:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:35:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:35:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:35:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:35:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:35:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:35:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:35:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:35:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:35:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:35:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:35:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:35:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:35:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:35:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:35:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:35:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:36:00.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:36:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:36:00.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:36:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:36:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:36:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:36:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:36:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:36:00.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:36:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:36:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:36:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:36:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:36:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:36:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:36:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:36:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:36:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:36:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:36:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:36:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:37:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:37:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:37:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:37:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:37:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:37:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:37:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:37:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:37:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:37:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:37:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:37:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:37:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:37:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:37:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:37:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:37:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:37:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:37:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:37:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:37:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:38:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:38:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:38:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:38:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:38:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:38:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:38:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:38:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:38:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:38:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:38:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:38:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:38:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:38:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:38:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:38:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:38:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:38:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |2     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:38:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:38:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:38:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 1 msec}
2025-04-26 22:38:33.328 ERROR [http-nio-8080-exec-6] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 22:38:33.328 ERROR [http-nio-8080-exec-8] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.authentication.BadCredentialsException: Invalid token
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:60)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 22:38:33.352 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* <criteria> */ select
        rt1_0.id,
        rt1_0.created_at,
        rt1_0.created_by,
        rt1_0.device_type,
        rt1_0.expiry_date,
        rt1_0.ip_address,
        rt1_0.last_used_at,
        rt1_0.member_id,
        rt1_0.refresh_token,
        rt1_0.updated_at,
        rt1_0.updated_by,
        rt1_0.user_agent 
    from
        t_refresh_token rt1_0 
    where
        rt1_0.refresh_token=?
2025-04-26 22:38:33.352 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* <criteria> */ select
        rt1_0.id,
        rt1_0.created_at,
        rt1_0.created_by,
        rt1_0.device_type,
        rt1_0.expiry_date,
        rt1_0.ip_address,
        rt1_0.last_used_at,
        rt1_0.member_id,
        rt1_0.refresh_token,
        rt1_0.updated_at,
        rt1_0.updated_by,
        rt1_0.user_agent 
    from
        t_refresh_token rt1_0 
    where
        rt1_0.refresh_token=?
2025-04-26 22:38:33.354 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:38:33.355 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:38:33.356 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'

2025-04-26 22:38:33.357 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'
 {executed in 0 msec}
2025-04-26 22:38:33.358 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|id |created_at |created_by |device_type |expiry_date           |ip_address      |last_used_at               |member_id |refresh_token                                                                                                                                                                     |updated_at |updated_by |user_agent                                                                                                                          |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|6  |null       |null       |null        |2025-05-10 16:00:25.0 |0:0:0:0:0:0:0:1 |2025-04-26 21:23:22.646878 |1         |eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk |null       |null       |Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36 |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 22:38:33.359 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:38:33.360 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:38:33.360 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'

2025-04-26 22:38:33.362 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select rt1_0.id,rt1_0.created_at,rt1_0.created_by,rt1_0.device_type,rt1_0.expiry_date,rt1_0.ip_address,rt1_0.last_used_at,rt1_0.member_id,rt1_0.refresh_token,rt1_0.updated_at,rt1_0.updated_by,rt1_0.user_agent from t_refresh_token rt1_0 where rt1_0.refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk'
 {executed in 0 msec}
2025-04-26 22:38:33.362 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 0 msec}
2025-04-26 22:38:33.363 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|id |created_at |created_by |device_type |expiry_date           |ip_address      |last_used_at               |member_id |refresh_token                                                                                                                                                                     |updated_at |updated_by |user_agent                                                                                                                          |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|
|6  |null       |null       |null        |2025-05-10 16:00:25.0 |0:0:0:0:0:0:0:1 |2025-04-26 21:23:22.646878 |1         |eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk |null       |null       |Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36 |
|---|-----------|-----------|------------|----------------------|----------------|---------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------|------------------------------------------------------------------------------------------------------------------------------------|

2025-04-26 22:38:33.363 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:38:33.364 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:38:33.365 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:38:33.365 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 22:38:33.366 INFO  [http-nio-8080-exec-5] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:38:33.370 DEBUG [http-nio-8080-exec-5] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token 
    set
        device_type=?,
        expiry_date=?,
        ip_address=?,
        last_used_at=?,
        member_id=?,
        refresh_token=?,
        updated_at=?,
        updated_by=?,
        user_agent=? 
    where
        id=?
2025-04-26 22:38:33.370 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token 
    set
        device_type=?,
        expiry_date=?,
        ip_address=?,
        last_used_at=?,
        member_id=?,
        refresh_token=?,
        updated_at=?,
        updated_by=?,
        user_agent=? 
    where
        id=?
2025-04-26 22:38:33.372 DEBUG [http-nio-8080-exec-5] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 22:38:33.367',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6

2025-04-26 22:38:33.372 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 22:38:33.367',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6

2025-04-26 22:38:33.373 DEBUG [http-nio-8080-exec-5] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 22:38:33.367',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6
 {executed in 1 msec}
2025-04-26 22:38:33.375 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update for com.tomato.naraclub.application.auth.entity.RefreshToken */update t_refresh_token set device_type=NULL,expiry_date='05/10/2025 16:00:25.000',ip_address='0:0:0:0:0:0:0:1',last_used_at='04/26/2025 22:38:33.367',member_id=1,refresh_token='eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwicm9sZSI6IlVTRVJfQUNUSVZFIiwic3RhdHVzIjoiQUNUSVZFIiwiaWF0IjoxNzQ1NjUwODI1LCJleHAiOjE3NDY4NjA0MjV9.pchte5lxtscNbsw40LljTk8ph_RthDTrRIEcJTu7Srk',updated_at=NULL,updated_by=NULL,user_agent='Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36' where id=6
 {executed in 2 msec}
2025-04-26 22:38:33.388 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:38:33.388 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:38:33.389 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:38:33.389 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:38:33.391 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 22:38:33.391 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 2 msec}
2025-04-26 22:38:33.391 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:38:33.392 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:38:33.406 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 22:38:33.407 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 22:38:33.409 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 22:38:33.409 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:38:33.477 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        boardComments.id as commentId,
        boardComments.author.id as authorId,
        boardComments.author.name as authorName,
        (boardComments.author.id = ?1) as isMine,
        boardComments.content,
        boardComments.createdAt,
        boardComments.updatedAt 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?2 
    order by
        boardComments.createdAt desc */ select
            bc1_0.id,
            bc1_0.author_id,
            a1_0.name,
            (bc1_0.author_id=cast(? as signed)),
            bc1_0.content,
            bc1_0.created_at,
            bc1_0.updated_at 
        from
            t_board_comments bc1_0 
        join
            t_member a1_0 
                on a1_0.id=bc1_0.author_id 
        where
            bc1_0.board_post_id=? 
        order by
            bc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 22:38:33.479 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?

2025-04-26 22:38:33.480 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        i1_0.board_post_id,
        i1_0.id,
        i1_0.created_at,
        i1_0.created_by,
        i1_0.image_url,
        i1_0.updated_at,
        i1_0.updated_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    left join
        t_board_post_image i1_0 
            on bp1_0.id=i1_0.board_post_id 
    where
        bp1_0.id=?
2025-04-26 22:38:33.481 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 22:38:33.481 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|id |author_id |name |(bc1_0.author_id=cast(1 as signed)) |content |created_at |updated_at |
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|---|----------|-----|------------------------------------|--------|-----------|-----------|

2025-04-26 22:38:33.481 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1

2025-04-26 22:38:33.483 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1
 {executed in 1 msec}
2025-04-26 22:38:33.484 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* select
        count(boardComments) 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?1 */ select
            count(bc1_0.id) 
        from
            t_board_comments bc1_0 
        where
            bc1_0.board_post_id=?
2025-04-26 22:38:33.485 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?

2025-04-26 22:38:33.486 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?
 {executed in 0 msec}
2025-04-26 22:38:33.486 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|----------------|
|count(bc1_0.id) |
|----------------|
|0               |
|----------------|

2025-04-26 22:38:33.492 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at              |created_by |board_post_id |id |created_at                 |created_by |image_url                                           |updated_at                 |updated_by |is_hot |likes |share_count |title |updated_at                 |updated_by |views |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|1  |1         |0             |test    |2025-04-26 12:34:07.601 |null       |1             |1  |2025-04-22 22:34:07.629607 |null       |/uploads/1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png |2025-04-22 22:34:07.629607 |null       |true   |0     |0           |test  |2025-04-22 22:34:07.601494 |null       |2     |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|

2025-04-26 22:38:33.522 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert 
    into
        t_board_post_view_history (board_post_id, created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 22:38:33.525 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 22:38:33.495',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 22:38:33.495',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 22:38:33.495') returning id

2025-04-26 22:38:33.526 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 22:38:33.495',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 22:38:33.495',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 22:38:33.495') returning id
 {executed in 0 msec}
2025-04-26 22:38:33.557 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|
|id |
|---|
|4  |
|---|

2025-04-26 22:38:33.576 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bpl1_0.id,
        bpl1_0.board_post_id,
        bpl1_0.created_at,
        bpl1_0.created_by,
        bpl1_0.member_id,
        bpl1_0.updated_at,
        bpl1_0.updated_by 
    from
        t_board_post_like bpl1_0 
    where
        bpl1_0.member_id=? 
        and bpl1_0.board_post_id=?
2025-04-26 22:38:33.576 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1

2025-04-26 22:38:33.578 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1
 {executed in 0 msec}
2025-04-26 22:38:33.578 INFO  [http-nio-8080-exec-1] jdbc.resultsettable - 
|---|--------------|-----------|-----------|----------|-----------|-----------|
|id |board_post_id |created_at |created_by |member_id |updated_at |updated_by |
|---|--------------|-----------|-----------|----------|-----------|-----------|
|---|--------------|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:38:33.580 DEBUG [http-nio-8080-exec-1] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post 
    set
        author_id=?,
        comment_count=?,
        content=?,
        is_hot=?,
        likes=?,
        share_count=?,
        title=?,
        updated_at=?,
        updated_by=?,
        views=? 
    where
        id=?
2025-04-26 22:38:33.581 DEBUG [http-nio-8080-exec-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=1,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=3 where id=1

2025-04-26 22:38:33.582 DEBUG [http-nio-8080-exec-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=1,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=3 where id=1
 {executed in 1 msec}
2025-04-26 22:38:33.605 ERROR [http-nio-8080-exec-8] c.t.n.c.e.GlobalExceptionAdvice - [Exception: NoResourceFoundException]
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapUnsecured$1(ObservationFilterChainDecorator.java:90)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:219)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 22:38:33.613 WARN  [http-nio-8080-exec-8] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.]
2025-04-26 22:39:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:39:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:39:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:39:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:39:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:39:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:39:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:39:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:39:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:39:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:39:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:39:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:39:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:39:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:39:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:39:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:39:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:39:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |3     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:39:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:39:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)

2025-04-26 22:39:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,5,1,7,2,4)
 {executed in 0 msec}
2025-04-26 22:39:52.486 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:39:52.486 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
4. SELECT 1

2025-04-26 22:39:52.487 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:39:52.487 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
4. SELECT 1
 {executed in 1 msec}
2025-04-26 22:39:52.488 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:39:52.488 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=?
2025-04-26 22:39:52.488 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:39:52.488 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1

2025-04-26 22:39:52.489 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 22:39:52.489 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1
 {executed in 1 msec}
2025-04-26 22:39:52.490 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:39:52.490 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:39:52.494 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        m1_0.id,
        m1_0.created_at,
        m1_0.created_by,
        m1_0.email,
        m1_0.invite_code,
        m1_0.inviter_id,
        m1_0.last_access_at,
        m1_0.name,
        m1_0.password,
        m1_0.phone_number,
        m1_0.profile_img,
        m1_0.role,
        m1_0.status,
        m1_0.updated_at,
        m1_0.updated_by,
        m1_0.user_key,
        m1_0.verified 
    from
        t_member m1_0 
    where
        m1_0.id=? 
        and m1_0.status=?
2025-04-26 22:39:52.495 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'

2025-04-26 22:39:52.496 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select m1_0.id,m1_0.created_at,m1_0.created_by,m1_0.email,m1_0.invite_code,m1_0.inviter_id,m1_0.last_access_at,m1_0.name,m1_0.password,m1_0.phone_number,m1_0.profile_img,m1_0.role,m1_0.status,m1_0.updated_at,m1_0.updated_by,m1_0.user_key,m1_0.verified from t_member m1_0 where m1_0.id=1 and m1_0.status='ACTIVE'
 {executed in 0 msec}
2025-04-26 22:39:52.496 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        boardComments.id as commentId,
        boardComments.author.id as authorId,
        boardComments.author.name as authorName,
        (boardComments.author.id = ?1) as isMine,
        boardComments.content,
        boardComments.createdAt,
        boardComments.updatedAt 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?2 
    order by
        boardComments.createdAt desc */ select
            bc1_0.id,
            bc1_0.author_id,
            a1_0.name,
            (bc1_0.author_id=cast(? as signed)),
            bc1_0.content,
            bc1_0.created_at,
            bc1_0.updated_at 
        from
            t_board_comments bc1_0 
        join
            t_member a1_0 
                on a1_0.id=bc1_0.author_id 
        where
            bc1_0.board_post_id=? 
        order by
            bc1_0.created_at desc 
        limit
            ?, ?
2025-04-26 22:39:52.496 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|id |created_at                |created_by |email |invite_code |inviter_id |last_access_at |name |password                                                     |phone_number |profile_img |role        |status |updated_at                |updated_by |user_key                                            |verified |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|
|1  |2025-04-22 22:32:37.39554 |null       |null  |1QLM2LV     |[null]     |null           |김민재  |$2a$10$jTwE09cg75NSxJfE5AMhLeRxLERAiyUa9cepWtOE/Kz9yws7DDWre |01089754896  |            |USER_ACTIVE |ACTIVE |2025-04-22 22:32:37.39554 |null       |1706749733!usr-8e1d9ab1-faee-4692-a014-691b2e864975 |false    |
|---|--------------------------|-----------|------|------------|-----------|---------------|-----|-------------------------------------------------------------|-------------|------------|------------|-------|--------------------------|-----------|----------------------------------------------------|---------|

2025-04-26 22:39:52.497 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?

2025-04-26 22:39:52.498 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        i1_0.board_post_id,
        i1_0.id,
        i1_0.created_at,
        i1_0.created_by,
        i1_0.image_url,
        i1_0.updated_at,
        i1_0.updated_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    left join
        t_board_post_image i1_0 
            on bp1_0.id=i1_0.board_post_id 
    where
        bp1_0.id=?
2025-04-26 22:39:52.499 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select boardComments.id as commentId, boardComments.author.id as authorId, boardComments.author.name as authorName, (boardComments.author.id = 11) as isMine, boardComments.content, boardComments.createdAt, boardComments.updatedAt
from BoardComments boardComments
where boardComments.boardPost.id = 12
order by boardComments.createdAt desc */ select bc1_0.id,bc1_0.author_id,a1_0.name,(bc1_0.author_id=cast(0 as signed)),bc1_0.content,bc1_0.created_at,bc1_0.updated_at from t_board_comments bc1_0 join t_member a1_0 on a1_0.id=bc1_0.author_id where bc1_0.board_post_id=10 order by bc1_0.created_at desc limit ?,?
 {executed in 1 msec}
2025-04-26 22:39:52.499 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|id |author_id |name |(bc1_0.author_id=cast(1 as signed)) |content |created_at |updated_at |
|---|----------|-----|------------------------------------|--------|-----------|-----------|
|---|----------|-----|------------------------------------|--------|-----------|-----------|

2025-04-26 22:39:52.499 DEBUG [http-nio-8080-exec-2] org.hibernate.SQL - 
    /* select
        count(boardComments) 
    from
        BoardComments boardComments 
    where
        boardComments.boardPost.id = ?1 */ select
            count(bc1_0.id) 
        from
            t_board_comments bc1_0 
        where
            bc1_0.board_post_id=?
2025-04-26 22:39:52.499 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1

2025-04-26 22:39:52.500 DEBUG [http-nio-8080-exec-2] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?

2025-04-26 22:39:52.500 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,i1_0.board_post_id,i1_0.id,i1_0.created_at,i1_0.created_by,i1_0.image_url,i1_0.updated_at,i1_0.updated_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 left join t_board_post_image i1_0 on bp1_0.id=i1_0.board_post_id where bp1_0.id=1
 {executed in 0 msec}
2025-04-26 22:39:52.501 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at              |created_by |board_post_id |id |created_at                 |created_by |image_url                                           |updated_at                 |updated_by |is_hot |likes |share_count |title |updated_at                 |updated_by |views |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|
|1  |1         |0             |test    |2025-04-26 12:34:07.601 |null       |1             |1  |2025-04-22 22:34:07.629607 |null       |/uploads/1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png |2025-04-22 22:34:07.629607 |null       |true   |0     |0           |test  |2025-04-22 22:34:07.601494 |null       |3     |
|---|----------|--------------|--------|------------------------|-----------|--------------|---|---------------------------|-----------|----------------------------------------------------|---------------------------|-----------|-------|------|------------|------|---------------------------|-----------|------|

2025-04-26 22:39:52.501 DEBUG [http-nio-8080-exec-2] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* select count(boardComments)
from BoardComments boardComments
where boardComments.boardPost.id = 11 */ select count(bc1_0.id) from t_board_comments bc1_0 where bc1_0.board_post_id=?
 {executed in 1 msec}
2025-04-26 22:39:52.501 INFO  [http-nio-8080-exec-2] jdbc.resultsettable - 
|----------------|
|count(bc1_0.id) |
|----------------|
|0               |
|----------------|

2025-04-26 22:39:52.502 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* insert for
        com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert 
    into
        t_board_post_view_history (board_post_id, created_at, created_by, device_type, ip_address, reader_id, updated_at, updated_by, user_agent, viewed_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
    returning id
2025-04-26 22:39:52.503 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 22:39:52.501',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 22:39:52.501',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 22:39:52.501') returning id

2025-04-26 22:39:52.505 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. /* insert for com.tomato.naraclub.application.board.entity.BoardPostViewHistory */insert into t_board_post_view_history (board_post_id,created_at,created_by,device_type,ip_address,reader_id,updated_at,updated_by,user_agent,viewed_at) values (1,'04/26/2025 22:39:52.501',NULL,'MOBILE','0:0:0:0:0:0:0:1',1,'04/26/2025 22:39:52.501',NULL,'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36','04/26/2025 22:39:52.501') returning id
 {executed in 1 msec}
2025-04-26 22:39:52.505 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|
|id |
|---|
|5  |
|---|

2025-04-26 22:39:52.507 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* <criteria> */ select
        bpl1_0.id,
        bpl1_0.board_post_id,
        bpl1_0.created_at,
        bpl1_0.created_by,
        bpl1_0.member_id,
        bpl1_0.updated_at,
        bpl1_0.updated_by 
    from
        t_board_post_like bpl1_0 
    where
        bpl1_0.member_id=? 
        and bpl1_0.board_post_id=?
2025-04-26 22:39:52.508 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1

2025-04-26 22:39:52.508 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
4. /* <criteria> */ select bpl1_0.id,bpl1_0.board_post_id,bpl1_0.created_at,bpl1_0.created_by,bpl1_0.member_id,bpl1_0.updated_at,bpl1_0.updated_by from t_board_post_like bpl1_0 where bpl1_0.member_id=1 and bpl1_0.board_post_id=1
 {executed in 0 msec}
2025-04-26 22:39:52.509 INFO  [http-nio-8080-exec-6] jdbc.resultsettable - 
|---|--------------|-----------|-----------|----------|-----------|-----------|
|id |board_post_id |created_at |created_by |member_id |updated_at |updated_by |
|---|--------------|-----------|-----------|----------|-----------|-----------|
|---|--------------|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:39:52.510 DEBUG [http-nio-8080-exec-6] org.hibernate.SQL - 
    /* update
        for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post 
    set
        author_id=?,
        comment_count=?,
        content=?,
        is_hot=?,
        likes=?,
        share_count=?,
        title=?,
        updated_at=?,
        updated_by=?,
        views=? 
    where
        id=?
2025-04-26 22:39:52.511 DEBUG [http-nio-8080-exec-6] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=1,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=4 where id=1

2025-04-26 22:39:52.512 DEBUG [http-nio-8080-exec-6] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
4. /* update for com.tomato.naraclub.application.board.entity.BoardPost */update t_board_post set author_id=1,comment_count=0,content='test',is_hot=1,likes=0,share_count=0,title='test',updated_at='04/22/2025 22:34:07.601',updated_by=NULL,views=4 where id=1
 {executed in 0 msec}
2025-04-26 22:39:52.521 ERROR [http-nio-8080-exec-4] c.t.n.c.e.GlobalExceptionAdvice - [Exception: NoResourceFoundException]
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at com.tomato.naraclub.application.security.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:63)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapUnsecured$1(ObservationFilterChainDecorator.java:90)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:219)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:113)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-04-26 22:39:52.523 WARN  [http-nio-8080-exec-4] o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource 1/9c565bb7-b89a-4a2e-86ea-4a3a687c19ba.png.]
2025-04-26 22:40:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:40:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:40:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:40:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:40:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:40:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:40:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:40:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:40:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:40:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:40:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:40:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:40:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:40:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:40:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:40:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:40:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:40:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:40:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:40:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:40:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:41:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:41:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:41:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:41:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:41:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:41:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:41:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:41:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:41:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:41:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:41:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:41:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:41:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:41:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:41:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:41:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:41:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:41:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:41:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:41:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:41:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:42:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:42:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:42:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:42:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:42:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:42:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:42:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:42:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:42:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:42:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:42:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:42:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:42:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:42:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:42:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:42:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:42:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:42:30.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:42:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:42:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:42:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:43:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:43:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:43:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:43:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:43:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:43:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:43:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:43:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:43:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:43:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:43:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:43:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:43:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:43:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:43:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:43:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:43:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:43:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:43:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:43:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:43:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:44:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:44:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:44:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:44:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:44:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:44:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:44:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:44:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:44:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:44:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:44:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:44:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:44:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:44:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:44:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:44:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:44:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:44:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:44:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:44:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:44:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:45:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:45:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:45:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:45:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:45:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:45:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:45:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:45:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:45:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:45:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:45:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:45:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:45:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:45:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:45:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:45:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:45:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:45:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:45:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:45:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:45:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:46:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:46:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:46:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:46:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:46:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:46:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:46:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:46:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:46:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:46:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:46:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:46:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:46:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:46:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:46:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:46:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:46:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:46:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:46:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:46:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:46:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:47:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:47:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:47:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:47:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:47:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:47:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:47:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:47:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:47:00.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:47:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:47:30.000 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:47:30.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:47:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:47:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:47:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:47:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:47:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:47:30.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:47:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:47:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:47:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 22:48:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:48:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:48:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:48:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:48:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:48:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:48:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:48:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:48:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:48:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:48:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:48:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:48:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:48:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:48:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:48:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:48:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:48:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:48:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:48:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:48:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:49:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:49:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:49:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:49:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:49:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:49:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:49:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:49:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:49:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:49:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:49:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:49:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:49:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:49:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:49:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:49:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:49:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:49:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:49:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:49:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:49:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:50:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:50:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:50:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:50:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:50:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:50:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:50:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:50:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:50:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:50:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:50:30.000 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:50:30.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:50:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:50:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:50:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:50:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:50:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:50:30.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:50:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:50:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:50:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:51:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:51:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 0 msec}
2025-04-26 22:51:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:51:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:51:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:51:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:51:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:51:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:51:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:51:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1

2025-04-26 22:51:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
3. SELECT 1
 {executed in 1 msec}
2025-04-26 22:51:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:51:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:51:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:51:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:51:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:51:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:51:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:51:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:51:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:51:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
3. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:52:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:52:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:52:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:52:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:52:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:52:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:52:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:52:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:52:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:52:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:52:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:52:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:52:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:52:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:52:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:52:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:52:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:52:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:52:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:52:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:52:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:53:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:53:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 22:53:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:53:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:53:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:53:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:53:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:53:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:53:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:53:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:53:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:53:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:53:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:53:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:53:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:53:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:53:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:53:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:53:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:53:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:53:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:54:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:54:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 22:54:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:54:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:54:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:54:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:54:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:54:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:54:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:54:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:54:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:54:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:54:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:54:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:54:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:54:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:54:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:54:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:54:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:54:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:54:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 22:55:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:55:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 22:55:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:55:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:55:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:55:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:55:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:55:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:55:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:55:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:55:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:55:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:55:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:55:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:55:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:55:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:55:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:55:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:55:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:55:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:55:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:56:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:56:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:56:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:56:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:56:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:56:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:56:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:56:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:56:00.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:56:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:56:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:56:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:56:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:56:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:56:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:56:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:56:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:56:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:56:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:56:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:56:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:57:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:57:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 22:57:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:57:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:57:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:57:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:57:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:57:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:57:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:57:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:57:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 22:57:30.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:57:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:57:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:57:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:57:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:57:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:57:30.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:57:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:57:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:57:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:58:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:58:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:58:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:58:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:58:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 22:58:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:58:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:58:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:58:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:58:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:58:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:58:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:58:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:58:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:58:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:58:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:58:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 22:58:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:58:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:58:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:58:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 22:59:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:59:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:59:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 22:59:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 22:59:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:59:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 22:59:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 22:59:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:59:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 22:59:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 22:59:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 22:59:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 22:59:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 22:59:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 22:59:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 22:59:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 22:59:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 22:59:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 22:59:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 22:59:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 22:59:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:00:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:00:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:00:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:00:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:00:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:00:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:00:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:00:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:00:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:00:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:00:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:00:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:00:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:00:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:00:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:00:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:00:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:00:30.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:00:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:00:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:00:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:01:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:01:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:01:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:01:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:01:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:01:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:01:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:01:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:01:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:01:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:01:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:01:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:01:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:01:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:01:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:01:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:01:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:01:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:01:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:01:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:01:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:02:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:02:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:02:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:02:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:02:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:02:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:02:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:02:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:02:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:02:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:02:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:02:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:02:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:02:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:02:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:02:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:02:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:02:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:02:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:02:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:02:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:03:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:03:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:03:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:03:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:03:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:03:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:03:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:03:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:03:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:03:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:03:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:03:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:03:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:03:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:03:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:03:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:03:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:03:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:03:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:03:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:03:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:04:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:04:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:04:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:04:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:04:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:04:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:04:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:04:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:04:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:04:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:04:30.000 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:04:30.001 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:04:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:04:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:04:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:04:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:04:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:04:30.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:04:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:04:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:04:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:05:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:05:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 23:05:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:05:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:05:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:05:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:05:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:05:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:05:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:05:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:05:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:05:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:05:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:05:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:05:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:05:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:05:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:05:30.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:05:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:05:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:05:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:06:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:06:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:06:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:06:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:06:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:06:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:06:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:06:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:06:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:06:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:06:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:06:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:06:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:06:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:06:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:06:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:06:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:06:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:06:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:06:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:06:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:07:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:07:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:07:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:07:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:07:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:07:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:07:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:07:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:07:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:07:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:07:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:07:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:07:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:07:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:07:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:07:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:07:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:07:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:07:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:07:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:07:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:08:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:08:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:08:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:08:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:08:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:08:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:08:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:08:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:08:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:08:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:08:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:08:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:08:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:08:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:08:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:08:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:08:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:08:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:08:30.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:08:30.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:08:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:09:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:09:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:09:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:09:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:09:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:09:00.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:09:00.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:09:00.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:09:00.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:09:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:09:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:09:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:09:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:09:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:09:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:09:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:09:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:09:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:09:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:09:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:09:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:10:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:10:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:10:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:10:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:10:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:10:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:10:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:10:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:10:00.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:10:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:10:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:10:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:10:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:10:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:10:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:10:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:10:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:10:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:10:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:10:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:10:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:11:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:11:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:11:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:11:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:11:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:11:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:11:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:11:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:11:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:11:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:11:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:11:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:11:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:11:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:11:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:11:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:11:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:11:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:11:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:11:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:11:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:12:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:12:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:12:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:12:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:12:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:12:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:12:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:12:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:12:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:12:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:12:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:12:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:12:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:12:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:12:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:12:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:12:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:12:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:12:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:12:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:12:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:13:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:13:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:13:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:13:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:13:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:13:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:13:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:13:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:13:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:13:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:13:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:13:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:13:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:13:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:13:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:13:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:13:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:13:30.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:13:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:13:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:13:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:14:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:14:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:14:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:14:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:14:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:14:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:14:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:14:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:14:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:14:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:14:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:14:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:14:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:14:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:14:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:14:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:14:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 2 msec}
2025-04-26 23:14:30.020 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:14:30.020 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:14:30.021 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:14:30.021 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:15:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:15:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:15:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:15:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:15:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:15:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:15:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:15:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:15:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:15:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:15:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:15:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:15:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:15:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:15:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:15:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:15:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:15:30.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:15:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:15:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:15:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:16:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:16:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:16:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:16:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:16:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:16:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:16:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:16:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:16:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:16:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:16:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:16:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:16:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:16:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:16:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:16:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:16:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:16:30.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:16:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:16:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:16:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:17:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:17:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:17:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:17:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:17:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:17:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:17:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:17:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:17:00.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:17:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:17:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:17:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:17:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:17:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:17:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:17:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:17:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:17:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:17:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:17:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:17:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:18:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:18:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 1 msec}
2025-04-26 23:18:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:18:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:18:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:18:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:18:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:18:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:18:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:18:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:18:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:18:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:18:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:18:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:18:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:18:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:18:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:18:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:18:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:18:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:18:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:19:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:19:00.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:19:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:19:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:19:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:19:00.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:19:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:19:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:19:00.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:19:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:19:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:19:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:19:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:19:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:19:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:19:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:19:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:19:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:19:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:19:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:19:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:20:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:20:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:20:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:20:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:20:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:20:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:20:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:20:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:20:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:20:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:20:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:20:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:20:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:20:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:20:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:20:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:20:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:20:30.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:20:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:20:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:20:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:21:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:21:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:21:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:21:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:21:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:21:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:21:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:21:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:21:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:21:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1

2025-04-26 23:21:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
5. SELECT 1
 {executed in 0 msec}
2025-04-26 23:21:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:21:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:21:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:21:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:21:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:21:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
5. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:21:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:21:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:21:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:21:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
5. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:22:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:22:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:22:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:22:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:22:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:22:00.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:22:00.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:22:00.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:22:00.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:22:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:22:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:22:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:22:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:22:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:22:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:22:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:22:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:22:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:22:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:22:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:22:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:23:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:23:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 1 msec}
2025-04-26 23:23:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:23:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:23:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:23:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:23:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:23:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:23:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:23:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:23:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:23:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:23:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:23:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:23:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:23:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:23:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:23:30.017 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:23:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:23:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:23:30.018 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:24:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:24:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 1 msec}
2025-04-26 23:24:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:24:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:24:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:24:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:24:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:24:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:24:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:24:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:24:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:24:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:24:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:24:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:24:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:24:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:24:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:24:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:24:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:24:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:24:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:25:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:25:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:25:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:25:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:25:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:25:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:25:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:25:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:25:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:25:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:25:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:25:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:25:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:25:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:25:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:25:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:25:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:25:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:25:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:25:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:25:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:26:00.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:26:00.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:26:00.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:26:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:26:00.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:26:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:26:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:26:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:26:00.003 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:26:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:26:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:26:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:26:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:26:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:26:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:26:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:26:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:26:30.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:26:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:26:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:26:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:27:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:27:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:27:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:27:00.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:27:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:27:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:27:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:27:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:27:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:27:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:27:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:27:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:27:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:27:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:27:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:27:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:27:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:27:30.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:27:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:27:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:27:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:28:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:28:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:28:00.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:28:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:28:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:28:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:28:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:28:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:28:00.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:28:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:28:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:28:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:28:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:28:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:28:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:28:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:28:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:28:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:28:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:28:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:28:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:29:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:29:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 1 msec}
2025-04-26 23:29:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:29:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:29:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:29:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:29:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:29:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:29:00.011 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:29:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:29:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:29:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:29:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:29:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:29:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:29:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:29:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:29:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:29:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:29:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:29:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:30:00.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:30:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:30:00.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:30:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:30:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 1 msec}
2025-04-26 23:30:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:30:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:30:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:30:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:30:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:30:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 1 msec}
2025-04-26 23:30:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:30:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:30:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:30:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:30:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:30:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:30:30.006 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:30:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:30:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:30:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:31:00.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:31:00.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 1 msec}
2025-04-26 23:31:00.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:31:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:31:00.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:31:00.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:31:00.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:31:00.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:31:00.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:31:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:31:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:31:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:31:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:31:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:31:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:31:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:31:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:31:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:31:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:31:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:31:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:32:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:32:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:32:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:32:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:32:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:32:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:32:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:32:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:32:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:32:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:32:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:32:30.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:32:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:32:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:32:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:32:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:32:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:32:30.012 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:32:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:32:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:32:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:33:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:33:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:33:00.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:33:00.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:33:00.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:33:00.019 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:33:00.019 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:33:00.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:33:00.019 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:33:30.001 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:33:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:33:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:33:30.002 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:33:30.002 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:33:30.003 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:33:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:33:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:33:30.004 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:33:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:33:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:33:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:34:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:34:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:34:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:34:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:34:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:34:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:34:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:34:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:34:00.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:34:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:34:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:34:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:34:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:34:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:34:30.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:34:30.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:34:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:34:30.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:34:30.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:34:30.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:34:30.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:35:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:35:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:35:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:35:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:35:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:35:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:35:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:35:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:35:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:35:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:35:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:35:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:35:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:35:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:35:30.017 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:35:30.017 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:35:30.017 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:35:30.018 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:35:30.018 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:35:30.018 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:35:30.019 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:36:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:36:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:36:00.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:36:00.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:36:00.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:36:00.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:36:00.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:36:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:36:00.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:36:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:36:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:36:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:36:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:36:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:36:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:36:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:36:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:36:30.015 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:36:30.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:36:30.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:36:30.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:37:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:37:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:37:00.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:37:00.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:37:00.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:37:00.016 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:37:00.016 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:37:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:37:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:37:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:37:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:37:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:37:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:37:30.012 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:37:30.013 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:37:30.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:37:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:37:30.014 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:37:30.015 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:37:30.015 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:37:30.015 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:38:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:38:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:38:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:38:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:38:00.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:38:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:38:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:38:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:38:00.008 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:38:30.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:38:30.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:38:30.011 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:38:30.011 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:38:30.011 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:38:30.012 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:38:30.012 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:38:30.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:38:30.013 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:38:30.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:38:30.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:38:30.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:39:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:39:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:39:00.009 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:39:00.009 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:39:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:39:00.010 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:39:00.010 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:39:00.010 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:39:00.010 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:39:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:39:30.004 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:39:30.005 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:39:30.005 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:39:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:39:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:39:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:39:30.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:39:30.007 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:39:30.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:39:30.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:39:30.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 0 msec}
2025-04-26 23:40:00.013 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:40:00.013 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:40:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:40:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:40:00.014 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:40:00.014 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:40:00.014 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:40:00.016 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 2 msec}
2025-04-26 23:40:00.016 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

2025-04-26 23:40:30.000 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:40:30.001 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:40:30.002 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = false */ update t_board_post bp1_0 
    set
        is_hot=0
2025-04-26 23:40:30.003 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0

2025-04-26 23:40:30.003 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = false */ update t_board_post bp1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:40:30.004 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        bp1_0.id,
        bp1_0.author_id,
        bp1_0.comment_count,
        bp1_0.content,
        bp1_0.created_at,
        bp1_0.created_by,
        bp1_0.is_hot,
        bp1_0.likes,
        bp1_0.share_count,
        bp1_0.title,
        bp1_0.updated_at,
        bp1_0.updated_by,
        bp1_0.views 
    from
        t_board_post bp1_0 
    order by
        bp1_0.views desc,
        bp1_0.created_at desc 
    limit
        ?
2025-04-26 23:40:30.004 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10

2025-04-26 23:40:30.005 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select bp1_0.id,bp1_0.author_id,bp1_0.comment_count,bp1_0.content,bp1_0.created_at,bp1_0.created_by,bp1_0.is_hot,bp1_0.likes,bp1_0.share_count,bp1_0.title,bp1_0.updated_at,bp1_0.updated_by,bp1_0.views from t_board_post bp1_0 order by bp1_0.views desc,bp1_0.created_at desc limit 10
 {executed in 0 msec}
2025-04-26 23:40:30.005 INFO  [scheduling-1] jdbc.resultsettable - 
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|id |author_id |comment_count |content |created_at                 |created_by |is_hot |likes |share_count |title     |updated_at                 |updated_by |views |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|
|3  |1         |1             |zzz     |2025-04-22 22:36:02.804431 |null       |false  |1     |0           |zz2       |2025-04-22 22:36:02.804431 |null       |19    |
|1  |1         |0             |test    |2025-04-26 12:34:07.601    |null       |false  |0     |0           |test      |2025-04-22 22:34:07.601494 |null       |4     |
|5  |1         |7             |ㅋㅋㅋㅋㅋ   |2025-04-23 20:32:44.22486  |null       |false  |0     |0           |ㅁㄴㅇㅁㄴㅇㅁㄴㅇ |2025-04-23 20:32:44.22486  |null       |4     |
|7  |1         |0             |ㅋㅋㅇㅁㄴㅇ  |2025-04-23 22:59:44.264704 |null       |false  |0     |0           |ㅋㅁㄴㅇㅁㄴㅇ   |2025-04-23 22:59:44.264704 |null       |2     |
|2  |1         |0             |zzz     |2025-04-22 22:35:27.285519 |null       |false  |0     |0           |zz        |2025-04-22 22:35:27.285519 |null       |2     |
|4  |1         |0             |ㅋㅋㅋㅋ    |2025-04-23 20:32:34.019068 |null       |false  |0     |0           |ㅋㅋ        |2025-04-23 20:32:34.019068 |null       |1     |
|---|----------|--------------|--------|---------------------------|-----------|-------|------|------------|----------|---------------------------|-----------|------|

2025-04-26 23:40:30.006 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        BoardPost b 
    set
        b.isHot = true 
    where
        b.id in :ids */ update t_board_post bp1_0 
    set
        is_hot=1 
    where
        bp1_0.id in (?, ?, ?, ?, ?, ?)
2025-04-26 23:40:30.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)

2025-04-26 23:40:30.007 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update BoardPost b set b.isHot = true where b.id in :ids */ update t_board_post bp1_0 set is_hot=1 where bp1_0.id in (3,1,5,7,2,4)
 {executed in 1 msec}
2025-04-26 23:41:00.006 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1

2025-04-26 23:41:00.006 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.PoolBase.isConnectionDead(PoolBase.java:165)
6. SELECT 1
 {executed in 0 msec}
2025-04-26 23:41:00.007 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* update
        Video v 
    set
        v.isHot = false */ update t_video v1_0 
    set
        is_hot=0
2025-04-26 23:41:00.007 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0

2025-04-26 23:41:00.008 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
6. /* update Video v set v.isHot = false */ update t_video v1_0 set is_hot=0
 {executed in 0 msec}
2025-04-26 23:41:00.008 DEBUG [scheduling-1] org.hibernate.SQL - 
    /* <criteria> */ select
        v1_0.id,
        v1_0.author_name,
        v1_0.category,
        v1_0.comment_count,
        v1_0.created_at,
        v1_0.created_by,
        v1_0.description,
        v1_0.duration_sec,
        v1_0.is_hot,
        v1_0.is_public,
        v1_0.published_at,
        v1_0.image_url,
        v1_0.title,
        v1_0.type,
        v1_0.updated_at,
        v1_0.updated_by,
        v1_0.video_url,
        v1_0.view_count,
        v1_0.youtube_id 
    from
        t_video v1_0 
    order by
        v1_0.view_count desc,
        v1_0.created_at desc 
    limit
        ?
2025-04-26 23:41:00.008 DEBUG [scheduling-1] jdbc.sqlonly -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10

2025-04-26 23:41:00.009 DEBUG [scheduling-1] jdbc.sqltiming -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
6. /* <criteria> */ select v1_0.id,v1_0.author_name,v1_0.category,v1_0.comment_count,v1_0.created_at,v1_0.created_by,v1_0.description,v1_0.duration_sec,v1_0.is_hot,v1_0.is_public,v1_0.published_at,v1_0.image_url,v1_0.title,v1_0.type,v1_0.updated_at,v1_0.updated_by,v1_0.video_url,v1_0.view_count,v1_0.youtube_id from t_video v1_0 order by v1_0.view_count desc,v1_0.created_at desc limit 10
 {executed in 1 msec}
2025-04-26 23:41:00.009 INFO  [scheduling-1] jdbc.resultsettable - 
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|id |author_name |category |comment_count |created_at |created_by |description |duration_sec |is_hot |is_public |published_at |image_url |title |type |updated_at |updated_by |video_url |view_count |youtube_id |
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|
|---|------------|---------|--------------|-----------|-----------|------------|-------------|-------|----------|-------------|----------|------|-----|-----------|-----------|----------|-----------|-----------|

